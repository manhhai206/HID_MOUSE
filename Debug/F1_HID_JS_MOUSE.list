
F1_HID_JS_MOUSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000affc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800b108  0800b108  0001b108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1f0  0800b1f0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b1f0  0800b1f0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b1f0  0800b1f0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1f0  0800b1f0  0001b1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1f4  0800b1f4  0001b1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800b1f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  2000006c  0800b264  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  0800b264  000207b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a57  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e56  00000000  00000000  00035b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  00039988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba9  00000000  00000000  0003a878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b4ef  00000000  00000000  0003b421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012df4  00000000  00000000  00056910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e4cc  00000000  00000000  00069704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c1c  00000000  00000000  00107bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0010b7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b0f0 	.word	0x0800b0f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	0800b0f0 	.word	0x0800b0f0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <AdcTask_irq_callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void AdcTask_irq_callback (void *arg)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
	...

08000678 <Mouse_GetAction>:

void Mouse_GetAction(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0


	AdcDrv_get_result(&adc1_drv, adc_raw);
 800067e:	493c      	ldr	r1, [pc, #240]	; (8000770 <Mouse_GetAction+0xf8>)
 8000680:	483c      	ldr	r0, [pc, #240]	; (8000774 <Mouse_GetAction+0xfc>)
 8000682:	f005 fa2b 	bl	8005adc <AdcDrv_get_result>
	AdcFilter_update(&adc_filter, adc_raw, adc_filtered, ADC_INPUT_TOTAL);
 8000686:	2302      	movs	r3, #2
 8000688:	4a3b      	ldr	r2, [pc, #236]	; (8000778 <Mouse_GetAction+0x100>)
 800068a:	4939      	ldr	r1, [pc, #228]	; (8000770 <Mouse_GetAction+0xf8>)
 800068c:	483b      	ldr	r0, [pc, #236]	; (800077c <Mouse_GetAction+0x104>)
 800068e:	f005 f91c 	bl	80058ca <AdcFilter_update>

	for (int i = 0; AXIS_OUTPUT_TOTAL > i; ++i)
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	e017      	b.n	80006c8 <Mouse_GetAction+0x50>
		{
	       axis_storage[i] = (uint16_t) adc_corrector_update (
	                        &CALIBRATION_DATA_G.data[i], adc_filtered[i]);
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	4613      	mov	r3, r2
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	1a9b      	subs	r3, r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4a37      	ldr	r2, [pc, #220]	; (8000780 <Mouse_GetAction+0x108>)
 80006a4:	441a      	add	r2, r3
	       axis_storage[i] = (uint16_t) adc_corrector_update (
 80006a6:	4934      	ldr	r1, [pc, #208]	; (8000778 <Mouse_GetAction+0x100>)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006ae:	4619      	mov	r1, r3
 80006b0:	4610      	mov	r0, r2
 80006b2:	f00a fb88 	bl	800adc6 <adc_corrector_update>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b299      	uxth	r1, r3
 80006ba:	4a32      	ldr	r2, [pc, #200]	; (8000784 <Mouse_GetAction+0x10c>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; AXIS_OUTPUT_TOTAL > i; ++i)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3301      	adds	r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	dde4      	ble.n	8000698 <Mouse_GetAction+0x20>
	     }
	static uint8_t button = 0;
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_2) == 0)
 80006ce:	2104      	movs	r1, #4
 80006d0:	482d      	ldr	r0, [pc, #180]	; (8000788 <Mouse_GetAction+0x110>)
 80006d2:	f001 fc03 	bl	8001edc <HAL_GPIO_ReadPin>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d103      	bne.n	80006e4 <Mouse_GetAction+0x6c>
		{
			button = 1;
 80006dc:	4b2b      	ldr	r3, [pc, #172]	; (800078c <Mouse_GetAction+0x114>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	e002      	b.n	80006ea <Mouse_GetAction+0x72>
		}
		else
		{
			button = 0;
 80006e4:	4b29      	ldr	r3, [pc, #164]	; (800078c <Mouse_GetAction+0x114>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
		}


	mouse_report[0] = button;
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <Mouse_GetAction+0x114>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <Mouse_GetAction+0x118>)
 80006f2:	801a      	strh	r2, [r3, #0]
	mouse_report[1] = MOUSE_AXIS_SCALE_FROM_ADC(axis_storage[AXIS_JS_X]);
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <Mouse_GetAction+0x10c>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fde9 	bl	80002d0 <__aeabi_i2f>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a24      	ldr	r2, [pc, #144]	; (8000794 <Mouse_GetAction+0x11c>)
 8000702:	4611      	mov	r1, r2
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fe37 	bl	8000378 <__aeabi_fmul>
 800070a:	4603      	mov	r3, r0
 800070c:	4922      	ldr	r1, [pc, #136]	; (8000798 <Mouse_GetAction+0x120>)
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fd28 	bl	8000164 <__aeabi_fsub>
 8000714:	4603      	mov	r3, r0
 8000716:	4618      	mov	r0, r3
 8000718:	f00a fcc6 	bl	800b0a8 <roundf>
 800071c:	4603      	mov	r3, r0
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff7a 	bl	8000618 <__aeabi_f2iz>
 8000724:	4603      	mov	r3, r0
 8000726:	b25b      	sxtb	r3, r3
 8000728:	b21a      	sxth	r2, r3
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <Mouse_GetAction+0x118>)
 800072c:	805a      	strh	r2, [r3, #2]
	mouse_report[2] = MOUSE_AXIS_SCALE_FROM_ADC(axis_storage[AXIS_JS_Y]);
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <Mouse_GetAction+0x10c>)
 8000730:	885b      	ldrh	r3, [r3, #2]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fdcc 	bl	80002d0 <__aeabi_i2f>
 8000738:	4603      	mov	r3, r0
 800073a:	4a16      	ldr	r2, [pc, #88]	; (8000794 <Mouse_GetAction+0x11c>)
 800073c:	4611      	mov	r1, r2
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fe1a 	bl	8000378 <__aeabi_fmul>
 8000744:	4603      	mov	r3, r0
 8000746:	4914      	ldr	r1, [pc, #80]	; (8000798 <Mouse_GetAction+0x120>)
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fd0b 	bl	8000164 <__aeabi_fsub>
 800074e:	4603      	mov	r3, r0
 8000750:	4618      	mov	r0, r3
 8000752:	f00a fca9 	bl	800b0a8 <roundf>
 8000756:	4603      	mov	r3, r0
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff5d 	bl	8000618 <__aeabi_f2iz>
 800075e:	4603      	mov	r3, r0
 8000760:	b25b      	sxtb	r3, r3
 8000762:	b21a      	sxth	r2, r3
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <Mouse_GetAction+0x118>)
 8000766:	809a      	strh	r2, [r3, #4]

}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000b4 	.word	0x200000b4
 8000774:	200000a4 	.word	0x200000a4
 8000778:	200000b8 	.word	0x200000b8
 800077c:	20000088 	.word	0x20000088
 8000780:	20000000 	.word	0x20000000
 8000784:	200000bc 	.word	0x200000bc
 8000788:	40010800 	.word	0x40010800
 800078c:	20000414 	.word	0x20000414
 8000790:	200000c0 	.word	0x200000c0
 8000794:	3d7e0fe1 	.word	0x3d7e0fe1
 8000798:	42fe0000 	.word	0x42fe0000

0800079c <Mouse_SendHIDReport>:

void Mouse_SendHIDReport(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f005 fa4e 	bl	8005c44 <tud_hid_n_ready>
 80007a8:	4603      	mov	r3, r0
    if (!tud_hid_ready()) return;
 80007aa:	f083 0301 	eor.w	r3, r3, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d11b      	bne.n	80007ec <Mouse_SendHIDReport+0x50>

    my_mouse_hid_report_t report = {
        .buttons = (uint8_t)mouse_report[0],
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <Mouse_SendHIDReport+0x58>)
 80007b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ba:	b2db      	uxtb	r3, r3
    my_mouse_hid_report_t report = {
 80007bc:	703b      	strb	r3, [r7, #0]
        .micro_x = (int8_t)mouse_report[1],
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <Mouse_SendHIDReport+0x58>)
 80007c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007c4:	b25b      	sxtb	r3, r3
    my_mouse_hid_report_t report = {
 80007c6:	707b      	strb	r3, [r7, #1]
        .micro_y = (int8_t)mouse_report[2],
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <Mouse_SendHIDReport+0x58>)
 80007ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007ce:	b25b      	sxtb	r3, r3
    my_mouse_hid_report_t report = {
 80007d0:	70bb      	strb	r3, [r7, #2]
 80007d2:	2300      	movs	r3, #0
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	463b      	mov	r3, r7
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	2303      	movs	r3, #3
 80007dc:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	7bf9      	ldrb	r1, [r7, #15]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	2000      	movs	r0, #0
 80007e6:	f005 fa6f 	bl	8005cc8 <tud_hid_n_report>
 80007ea:	e000      	b.n	80007ee <Mouse_SendHIDReport+0x52>
    if (!tud_hid_ready()) return;
 80007ec:	bf00      	nop
    };

    tud_hid_report(0, &report, sizeof(report));
}
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000c0 	.word	0x200000c0

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 faa5 	bl	8000d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f841 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f000 f92d 	bl	8000a64 <MX_GPIO_Init>
  MX_DMA_Init();
 800080a:	f000 f90d 	bl	8000a28 <MX_DMA_Init>
  MX_ADC1_Init();
 800080e:	f000 f899 	bl	8000944 <MX_ADC1_Init>
  MX_USB_PCD_Init();
 8000812:	f000 f8e7 	bl	80009e4 <MX_USB_PCD_Init>
  tusb_init();
 8000816:	2100      	movs	r1, #0
 8000818:	2000      	movs	r0, #0
 800081a:	f00a f8fd 	bl	800aa18 <tusb_rhport_init>
  /* USER CODE BEGIN 2 */
  AdcDrv_init(&adc1_drv, ADC_DRV_ADC1, AdcTask_irq_callback, NULL);
 800081e:	2300      	movs	r3, #0
 8000820:	4a15      	ldr	r2, [pc, #84]	; (8000878 <main+0x80>)
 8000822:	2100      	movs	r1, #0
 8000824:	4815      	ldr	r0, [pc, #84]	; (800087c <main+0x84>)
 8000826:	f005 f924 	bl	8005a72 <AdcDrv_init>
  AdcDrv_start(&adc1_drv);
 800082a:	4814      	ldr	r0, [pc, #80]	; (800087c <main+0x84>)
 800082c:	f005 f94a 	bl	8005ac4 <AdcDrv_start>
  AdcFilter_init(&adc_filter);
 8000830:	4813      	ldr	r0, [pc, #76]	; (8000880 <main+0x88>)
 8000832:	f005 f824 	bl	800587e <AdcFilter_init>
  for (int i = 0; i < AXIS_OUTPUT_TOTAL; ++i)
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	e00c      	b.n	8000856 <main+0x5e>
  {
      adc_corrector_init(&CALIBRATION_DATA_G.data[i]);
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4613      	mov	r3, r2
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	1a9b      	subs	r3, r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <main+0x8c>)
 8000848:	4413      	add	r3, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f00a fa5e 	bl	800ad0c <adc_corrector_init>
  for (int i = 0; i < AXIS_OUTPUT_TOTAL; ++i)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3301      	adds	r3, #1
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b01      	cmp	r3, #1
 800085a:	ddef      	ble.n	800083c <main+0x44>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 800085c:	2100      	movs	r1, #0
 800085e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000862:	f006 fadd 	bl	8006e20 <tud_task_ext>
}
 8000866:	bf00      	nop
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  tud_task();
	  Mouse_GetAction();
 8000868:	f7ff ff06 	bl	8000678 <Mouse_GetAction>
	  Mouse_SendHIDReport();
 800086c:	f7ff ff96 	bl	800079c <Mouse_SendHIDReport>

	  HAL_Delay(10);
 8000870:	200a      	movs	r0, #10
 8000872:	f000 facd 	bl	8000e10 <HAL_Delay>
	  tud_task();
 8000876:	e7f1      	b.n	800085c <main+0x64>
 8000878:	08000665 	.word	0x08000665
 800087c:	200000a4 	.word	0x200000a4
 8000880:	20000088 	.word	0x20000088
 8000884:	20000000 	.word	0x20000000

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b094      	sub	sp, #80	; 0x50
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000892:	2228      	movs	r2, #40	; 0x28
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f00a fbcc 	bl	800b034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c6:	2301      	movs	r3, #1
 80008c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2302      	movs	r3, #2
 80008cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 fe78 	bl	80035d4 <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008ea:	f000 f8fd 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2102      	movs	r1, #2
 800090a:	4618      	mov	r0, r3
 800090c:	f003 f8e4 	bl	8003ad8 <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000916:	f000 f8e7 	bl	8000ae8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800091a:	2312      	movs	r3, #18
 800091c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800091e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000922:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	4618      	mov	r0, r3
 800092c:	f003 fa30 	bl	8003d90 <HAL_RCCEx_PeriphCLKConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000936:	f000 f8d7 	bl	8000ae8 <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	3750      	adds	r7, #80	; 0x50
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000954:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_ADC1_Init+0x98>)
 8000956:	4a22      	ldr	r2, [pc, #136]	; (80009e0 <MX_ADC1_Init+0x9c>)
 8000958:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MX_ADC1_Init+0x98>)
 800095c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000960:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000962:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_ADC1_Init+0x98>)
 8000964:	2201      	movs	r2, #1
 8000966:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000968:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_ADC1_Init+0x98>)
 800096a:	2200      	movs	r2, #0
 800096c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096e:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_ADC1_Init+0x98>)
 8000970:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000974:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_ADC1_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_ADC1_Init+0x98>)
 800097e:	2202      	movs	r2, #2
 8000980:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000982:	4816      	ldr	r0, [pc, #88]	; (80009dc <MX_ADC1_Init+0x98>)
 8000984:	f000 fa68 	bl	8000e58 <HAL_ADC_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800098e:	f000 f8ab 	bl	8000ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000996:	2301      	movs	r3, #1
 8000998:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800099a:	2305      	movs	r3, #5
 800099c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	480e      	ldr	r0, [pc, #56]	; (80009dc <MX_ADC1_Init+0x98>)
 80009a4:	f000 fc20 	bl	80011e8 <HAL_ADC_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009ae:	f000 f89b 	bl	8000ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80009ba:	2306      	movs	r3, #6
 80009bc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <MX_ADC1_Init+0x98>)
 80009c4:	f000 fc10 	bl	80011e8 <HAL_ADC_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009ce:	f000 f88b 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000c8 	.word	0x200000c8
 80009e0:	40012400 	.word	0x40012400

080009e4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <MX_USB_PCD_Init+0x3c>)
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <MX_USB_PCD_Init+0x40>)
 80009ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USB_PCD_Init+0x3c>)
 80009f0:	2208      	movs	r2, #8
 80009f2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <MX_USB_PCD_Init+0x3c>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USB_PCD_Init+0x3c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <MX_USB_PCD_Init+0x3c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USB_PCD_Init+0x3c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_USB_PCD_Init+0x3c>)
 8000a0e:	f001 fa7c 	bl	8001f0a <HAL_PCD_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000a18:	f000 f866 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000013c 	.word	0x2000013c
 8000a24:	40005c00 	.word	0x40005c00

08000a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_DMA_Init+0x38>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <MX_DMA_Init+0x38>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6153      	str	r3, [r2, #20]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_DMA_Init+0x38>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	200b      	movs	r0, #11
 8000a4c:	f000 fe9d 	bl	800178a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a50:	200b      	movs	r0, #11
 8000a52:	f000 feb6 	bl	80017c2 <HAL_NVIC_EnableIRQ>

}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_GPIO_Init+0x7c>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <MX_GPIO_Init+0x7c>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <MX_GPIO_Init+0x7c>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_GPIO_Init+0x7c>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_GPIO_Init+0x7c>)
 8000a96:	f043 0320 	orr.w	r3, r3, #32
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_GPIO_Init+0x7c>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0320 	and.w	r3, r3, #32
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <MX_GPIO_Init+0x7c>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <MX_GPIO_Init+0x7c>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <MX_GPIO_Init+0x7c>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : btn_Pin */
  GPIO_InitStruct.Pin = btn_Pin;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_GPIO_Init+0x80>)
 8000ad4:	f001 f87e 	bl	8001bd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40010800 	.word	0x40010800

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <Error_Handler+0x8>
	...

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_MspInit+0x5c>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <HAL_MspInit+0x5c>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6193      	str	r3, [r2, #24]
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_MspInit+0x5c>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_MspInit+0x5c>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <HAL_MspInit+0x5c>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	61d3      	str	r3, [r2, #28]
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_MspInit+0x5c>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_MspInit+0x60>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_MspInit+0x60>)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010000 	.word	0x40010000

08000b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a29      	ldr	r2, [pc, #164]	; (8000c18 <HAL_ADC_MspInit+0xc0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d14a      	bne.n	8000c0e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b78:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <HAL_ADC_MspInit+0xc4>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a27      	ldr	r2, [pc, #156]	; (8000c1c <HAL_ADC_MspInit+0xc4>)
 8000b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <HAL_ADC_MspInit+0xc4>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <HAL_ADC_MspInit+0xc4>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a21      	ldr	r2, [pc, #132]	; (8000c1c <HAL_ADC_MspInit+0xc4>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <HAL_ADC_MspInit+0xc4>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = x_Pin|y_Pin;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bac:	2303      	movs	r3, #3
 8000bae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481a      	ldr	r0, [pc, #104]	; (8000c20 <HAL_ADC_MspInit+0xc8>)
 8000bb8:	f001 f80c 	bl	8001bd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <HAL_ADC_MspInit+0xcc>)
 8000bbe:	4a1a      	ldr	r2, [pc, #104]	; (8000c28 <HAL_ADC_MspInit+0xd0>)
 8000bc0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_ADC_MspInit+0xcc>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <HAL_ADC_MspInit+0xcc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_ADC_MspInit+0xcc>)
 8000bd0:	2280      	movs	r2, #128	; 0x80
 8000bd2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <HAL_ADC_MspInit+0xcc>)
 8000bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bda:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_ADC_MspInit+0xcc>)
 8000bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000be2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_ADC_MspInit+0xcc>)
 8000be6:	2220      	movs	r2, #32
 8000be8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_ADC_MspInit+0xcc>)
 8000bec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bf2:	480c      	ldr	r0, [pc, #48]	; (8000c24 <HAL_ADC_MspInit+0xcc>)
 8000bf4:	f000 fe00 	bl	80017f8 <HAL_DMA_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8000bfe:	f7ff ff73 	bl	8000ae8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_ADC_MspInit+0xcc>)
 8000c06:	621a      	str	r2, [r3, #32]
 8000c08:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <HAL_ADC_MspInit+0xcc>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40012400 	.word	0x40012400
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010800 	.word	0x40010800
 8000c24:	200000f8 	.word	0x200000f8
 8000c28:	40020008 	.word	0x40020008

08000c2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_PCD_MspInit+0x44>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d113      	bne.n	8000c66 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_PCD_MspInit+0x48>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <HAL_PCD_MspInit+0x48>)
 8000c44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c48:	61d3      	str	r3, [r2, #28]
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_PCD_MspInit+0x48>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2014      	movs	r0, #20
 8000c5c:	f000 fd95 	bl	800178a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000c60:	2014      	movs	r0, #20
 8000c62:	f000 fdae 	bl	80017c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40005c00 	.word	0x40005c00
 8000c74:	40021000 	.word	0x40021000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbe:	f000 f88b 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <DMA1_Channel1_IRQHandler+0x10>)
 8000cce:	f000 fe4d 	bl	800196c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200000f8 	.word	0x200000f8

08000cdc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
  tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f008 fa79 	bl	80091d8 <dcd_int_handler>
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ce6:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8000ce8:	f001 fa05 	bl	80020f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000013c 	.word	0x2000013c

08000cf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d00:	f7ff fff8 	bl	8000cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d06:	490c      	ldr	r1, [pc, #48]	; (8000d38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d08:	4a0c      	ldr	r2, [pc, #48]	; (8000d3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d1c:	4c09      	ldr	r4, [pc, #36]	; (8000d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f00a f98b 	bl	800b044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2e:	f7ff fd63 	bl	80007f8 <main>
  bx lr
 8000d32:	4770      	bx	lr
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d38:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d3c:	0800b1f8 	.word	0x0800b1f8
  ldr r2, =_sbss
 8000d40:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d44:	200007b4 	.word	0x200007b4

08000d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC1_2_IRQHandler>
	...

08000d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_Init+0x28>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <HAL_Init+0x28>)
 8000d56:	f043 0310 	orr.w	r3, r3, #16
 8000d5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 fd09 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d62:	200f      	movs	r0, #15
 8000d64:	f000 f808 	bl	8000d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d68:	f7ff fec4 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40022000 	.word	0x40022000

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x54>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x58>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fd21 	bl	80017de <HAL_SYSTICK_Config>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00e      	b.n	8000dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d80a      	bhi.n	8000dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db4:	f000 fce9 	bl	800178a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_InitTick+0x5c>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e000      	b.n	8000dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000038 	.word	0x20000038
 8000dd0:	20000040 	.word	0x20000040
 8000dd4:	2000003c 	.word	0x2000003c

08000dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x1c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_IncTick+0x20>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <HAL_IncTick+0x20>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	20000040 	.word	0x20000040
 8000df8:	20000418 	.word	0x20000418

08000dfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b02      	ldr	r3, [pc, #8]	; (8000e0c <HAL_GetTick+0x10>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	20000418 	.word	0x20000418

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff fff0 	bl	8000dfc <HAL_GetTick>
 8000e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e28:	d005      	beq.n	8000e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_Delay+0x44>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e36:	bf00      	nop
 8000e38:	f7ff ffe0 	bl	8000dfc <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f7      	bhi.n	8000e38 <HAL_Delay+0x28>
  {
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000040 	.word	0x20000040

08000e58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e0be      	b.n	8000ff8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d109      	bne.n	8000e9c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff fe5e 	bl	8000b58 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 faf5 	bl	800148c <ADC_ConversionStop_Disable>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 8099 	bne.w	8000fe6 <HAL_ADC_Init+0x18e>
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f040 8095 	bne.w	8000fe6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ec4:	f023 0302 	bic.w	r3, r3, #2
 8000ec8:	f043 0202 	orr.w	r2, r3, #2
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ed8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7b1b      	ldrb	r3, [r3, #12]
 8000ede:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ee0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ef0:	d003      	beq.n	8000efa <HAL_ADC_Init+0xa2>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d102      	bne.n	8000f00 <HAL_ADC_Init+0xa8>
 8000efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efe:	e000      	b.n	8000f02 <HAL_ADC_Init+0xaa>
 8000f00:	2300      	movs	r3, #0
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7d1b      	ldrb	r3, [r3, #20]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d119      	bne.n	8000f44 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7b1b      	ldrb	r3, [r3, #12]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d109      	bne.n	8000f2c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	035a      	lsls	r2, r3, #13
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	e00b      	b.n	8000f44 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f30:	f043 0220 	orr.w	r2, r3, #32
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3c:	f043 0201 	orr.w	r2, r3, #1
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <HAL_ADC_Init+0x1a8>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	68b9      	ldr	r1, [r7, #8]
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f74:	d003      	beq.n	8000f7e <HAL_ADC_Init+0x126>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d104      	bne.n	8000f88 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	051b      	lsls	r3, r3, #20
 8000f86:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_ADC_Init+0x1ac>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d10b      	bne.n	8000fc4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb6:	f023 0303 	bic.w	r3, r3, #3
 8000fba:	f043 0201 	orr.w	r2, r3, #1
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fc2:	e018      	b.n	8000ff6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	f023 0312 	bic.w	r3, r3, #18
 8000fcc:	f043 0210 	orr.w	r2, r3, #16
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd8:	f043 0201 	orr.w	r2, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fe4:	e007      	b.n	8000ff6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fea:	f043 0210 	orr.w	r2, r3, #16
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	ffe1f7fd 	.word	0xffe1f7fd
 8001004:	ff1f0efe 	.word	0xff1f0efe

08001008 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a64      	ldr	r2, [pc, #400]	; (80011b0 <HAL_ADC_Start_DMA+0x1a8>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d004      	beq.n	800102c <HAL_ADC_Start_DMA+0x24>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a63      	ldr	r2, [pc, #396]	; (80011b4 <HAL_ADC_Start_DMA+0x1ac>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d106      	bne.n	800103a <HAL_ADC_Start_DMA+0x32>
 800102c:	4b60      	ldr	r3, [pc, #384]	; (80011b0 <HAL_ADC_Start_DMA+0x1a8>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001034:	2b00      	cmp	r3, #0
 8001036:	f040 80b3 	bne.w	80011a0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <HAL_ADC_Start_DMA+0x40>
 8001044:	2302      	movs	r3, #2
 8001046:	e0ae      	b.n	80011a6 <HAL_ADC_Start_DMA+0x19e>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f000 f9c1 	bl	80013d8 <ADC_Enable>
 8001056:	4603      	mov	r3, r0
 8001058:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	2b00      	cmp	r3, #0
 800105e:	f040 809a 	bne.w	8001196 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001066:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a4e      	ldr	r2, [pc, #312]	; (80011b4 <HAL_ADC_Start_DMA+0x1ac>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d105      	bne.n	800108c <HAL_ADC_Start_DMA+0x84>
 8001080:	4b4b      	ldr	r3, [pc, #300]	; (80011b0 <HAL_ADC_Start_DMA+0x1a8>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d115      	bne.n	80010b8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d026      	beq.n	80010f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010b6:	e01d      	b.n	80010f4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a39      	ldr	r2, [pc, #228]	; (80011b0 <HAL_ADC_Start_DMA+0x1a8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d004      	beq.n	80010d8 <HAL_ADC_Start_DMA+0xd0>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a38      	ldr	r2, [pc, #224]	; (80011b4 <HAL_ADC_Start_DMA+0x1ac>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d10d      	bne.n	80010f4 <HAL_ADC_Start_DMA+0xec>
 80010d8:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <HAL_ADC_Start_DMA+0x1a8>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d007      	beq.n	80010f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d006      	beq.n	800110e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001104:	f023 0206 	bic.w	r2, r3, #6
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
 800110c:	e002      	b.n	8001114 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2200      	movs	r2, #0
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	4a25      	ldr	r2, [pc, #148]	; (80011b8 <HAL_ADC_Start_DMA+0x1b0>)
 8001122:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4a24      	ldr	r2, [pc, #144]	; (80011bc <HAL_ADC_Start_DMA+0x1b4>)
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <HAL_ADC_Start_DMA+0x1b8>)
 8001132:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f06f 0202 	mvn.w	r2, #2
 800113c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800114c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6a18      	ldr	r0, [r3, #32]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	334c      	adds	r3, #76	; 0x4c
 8001158:	4619      	mov	r1, r3
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f000 fba5 	bl	80018ac <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800116c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001170:	d108      	bne.n	8001184 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001180:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001182:	e00f      	b.n	80011a4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001192:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001194:	e006      	b.n	80011a4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800119e:	e001      	b.n	80011a4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40012400 	.word	0x40012400
 80011b4:	40012800 	.word	0x40012800
 80011b8:	0800150f 	.word	0x0800150f
 80011bc:	0800158b 	.word	0x0800158b
 80011c0:	080015a7 	.word	0x080015a7

080011c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001200:	2b01      	cmp	r3, #1
 8001202:	d101      	bne.n	8001208 <HAL_ADC_ConfigChannel+0x20>
 8001204:	2302      	movs	r3, #2
 8001206:	e0dc      	b.n	80013c2 <HAL_ADC_ConfigChannel+0x1da>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b06      	cmp	r3, #6
 8001216:	d81c      	bhi.n	8001252 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	3b05      	subs	r3, #5
 800122a:	221f      	movs	r2, #31
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	4019      	ands	r1, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	3b05      	subs	r3, #5
 8001244:	fa00 f203 	lsl.w	r2, r0, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	635a      	str	r2, [r3, #52]	; 0x34
 8001250:	e03c      	b.n	80012cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b0c      	cmp	r3, #12
 8001258:	d81c      	bhi.n	8001294 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	3b23      	subs	r3, #35	; 0x23
 800126c:	221f      	movs	r2, #31
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	4019      	ands	r1, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	3b23      	subs	r3, #35	; 0x23
 8001286:	fa00 f203 	lsl.w	r2, r0, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	631a      	str	r2, [r3, #48]	; 0x30
 8001292:	e01b      	b.n	80012cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	3b41      	subs	r3, #65	; 0x41
 80012a6:	221f      	movs	r2, #31
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	4019      	ands	r1, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	3b41      	subs	r3, #65	; 0x41
 80012c0:	fa00 f203 	lsl.w	r2, r0, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b09      	cmp	r3, #9
 80012d2:	d91c      	bls.n	800130e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68d9      	ldr	r1, [r3, #12]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	3b1e      	subs	r3, #30
 80012e6:	2207      	movs	r2, #7
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4019      	ands	r1, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	6898      	ldr	r0, [r3, #8]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	3b1e      	subs	r3, #30
 8001300:	fa00 f203 	lsl.w	r2, r0, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	e019      	b.n	8001342 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6919      	ldr	r1, [r3, #16]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	2207      	movs	r2, #7
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	4019      	ands	r1, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	6898      	ldr	r0, [r3, #8]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	fa00 f203 	lsl.w	r2, r0, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b10      	cmp	r3, #16
 8001348:	d003      	beq.n	8001352 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800134e:	2b11      	cmp	r3, #17
 8001350:	d132      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <HAL_ADC_ConfigChannel+0x1e4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d125      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d126      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001378:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b10      	cmp	r3, #16
 8001380:	d11a      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001388:	fba2 2303 	umull	r2, r3, r2, r3
 800138c:	0c9a      	lsrs	r2, r3, #18
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001398:	e002      	b.n	80013a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	3b01      	subs	r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f9      	bne.n	800139a <HAL_ADC_ConfigChannel+0x1b2>
 80013a6:	e007      	b.n	80013b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	f043 0220 	orr.w	r2, r3, #32
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	40012400 	.word	0x40012400
 80013d0:	20000038 	.word	0x20000038
 80013d4:	431bde83 	.word	0x431bde83

080013d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d040      	beq.n	8001478 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0201 	orr.w	r2, r2, #1
 8001404:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <ADC_Enable+0xac>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a1f      	ldr	r2, [pc, #124]	; (8001488 <ADC_Enable+0xb0>)
 800140c:	fba2 2303 	umull	r2, r3, r2, r3
 8001410:	0c9b      	lsrs	r3, r3, #18
 8001412:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001414:	e002      	b.n	800141c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	3b01      	subs	r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f9      	bne.n	8001416 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001422:	f7ff fceb 	bl	8000dfc <HAL_GetTick>
 8001426:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001428:	e01f      	b.n	800146a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800142a:	f7ff fce7 	bl	8000dfc <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d918      	bls.n	800146a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b01      	cmp	r3, #1
 8001444:	d011      	beq.n	800146a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	f043 0210 	orr.w	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001456:	f043 0201 	orr.w	r2, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e007      	b.n	800147a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b01      	cmp	r3, #1
 8001476:	d1d8      	bne.n	800142a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000038 	.word	0x20000038
 8001488:	431bde83 	.word	0x431bde83

0800148c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d12e      	bne.n	8001504 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0201 	bic.w	r2, r2, #1
 80014b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014b6:	f7ff fca1 	bl	8000dfc <HAL_GetTick>
 80014ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014bc:	e01b      	b.n	80014f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014be:	f7ff fc9d 	bl	8000dfc <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d914      	bls.n	80014f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d10d      	bne.n	80014f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	f043 0210 	orr.w	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	f043 0201 	orr.w	r2, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e007      	b.n	8001506 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b01      	cmp	r3, #1
 8001502:	d0dc      	beq.n	80014be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001524:	2b00      	cmp	r3, #0
 8001526:	d127      	bne.n	8001578 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800153e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001542:	d115      	bne.n	8001570 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001548:	2b00      	cmp	r3, #0
 800154a:	d111      	bne.n	8001570 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d105      	bne.n	8001570 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	f043 0201 	orr.w	r2, r3, #1
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f004 fb15 	bl	8005ba0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001576:	e004      	b.n	8001582 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	4798      	blx	r3
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7ff fe13 	bl	80011c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	f043 0204 	orr.w	r2, r3, #4
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f7ff fe02 	bl	80011d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4906      	ldr	r1, [pc, #24]	; (8001674 <__NVIC_EnableIRQ+0x34>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	; (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	; (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
         );
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001754:	f7ff ff90 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff2d 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff42 	bl	8001624 <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff90 	bl	80016cc <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5f 	bl	8001678 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff35 	bl	8001640 <__NVIC_EnableIRQ>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ffa2 	bl	8001730 <SysTick_Config>
 80017ec:	4603      	mov	r3, r0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e043      	b.n	8001896 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <HAL_DMA_Init+0xa8>)
 8001816:	4413      	add	r3, r2
 8001818:	4a22      	ldr	r2, [pc, #136]	; (80018a4 <HAL_DMA_Init+0xac>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	009a      	lsls	r2, r3, #2
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a1f      	ldr	r2, [pc, #124]	; (80018a8 <HAL_DMA_Init+0xb0>)
 800182a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2202      	movs	r2, #2
 8001830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001842:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001846:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	bffdfff8 	.word	0xbffdfff8
 80018a4:	cccccccd 	.word	0xcccccccd
 80018a8:	40020000 	.word	0x40020000

080018ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_DMA_Start_IT+0x20>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e04b      	b.n	8001964 <HAL_DMA_Start_IT+0xb8>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d13a      	bne.n	8001956 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0201 	bic.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	68b9      	ldr	r1, [r7, #8]
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 f937 	bl	8001b78 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	2b00      	cmp	r3, #0
 8001910:	d008      	beq.n	8001924 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 020e 	orr.w	r2, r2, #14
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e00f      	b.n	8001944 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0204 	bic.w	r2, r2, #4
 8001932:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 020a 	orr.w	r2, r2, #10
 8001942:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e005      	b.n	8001962 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800195e:	2302      	movs	r3, #2
 8001960:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001962:	7dfb      	ldrb	r3, [r7, #23]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	2204      	movs	r2, #4
 800198a:	409a      	lsls	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d04f      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xc8>
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	d04a      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0320 	and.w	r3, r3, #32
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0204 	bic.w	r2, r2, #4
 80019ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a66      	ldr	r2, [pc, #408]	; (8001b5c <HAL_DMA_IRQHandler+0x1f0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d029      	beq.n	8001a1a <HAL_DMA_IRQHandler+0xae>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a65      	ldr	r2, [pc, #404]	; (8001b60 <HAL_DMA_IRQHandler+0x1f4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d022      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xaa>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a63      	ldr	r2, [pc, #396]	; (8001b64 <HAL_DMA_IRQHandler+0x1f8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d01a      	beq.n	8001a10 <HAL_DMA_IRQHandler+0xa4>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a62      	ldr	r2, [pc, #392]	; (8001b68 <HAL_DMA_IRQHandler+0x1fc>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d012      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x9e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a60      	ldr	r2, [pc, #384]	; (8001b6c <HAL_DMA_IRQHandler+0x200>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00a      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x98>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a5f      	ldr	r2, [pc, #380]	; (8001b70 <HAL_DMA_IRQHandler+0x204>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d102      	bne.n	80019fe <HAL_DMA_IRQHandler+0x92>
 80019f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019fc:	e00e      	b.n	8001a1c <HAL_DMA_IRQHandler+0xb0>
 80019fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a02:	e00b      	b.n	8001a1c <HAL_DMA_IRQHandler+0xb0>
 8001a04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a08:	e008      	b.n	8001a1c <HAL_DMA_IRQHandler+0xb0>
 8001a0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a0e:	e005      	b.n	8001a1c <HAL_DMA_IRQHandler+0xb0>
 8001a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a14:	e002      	b.n	8001a1c <HAL_DMA_IRQHandler+0xb0>
 8001a16:	2340      	movs	r3, #64	; 0x40
 8001a18:	e000      	b.n	8001a1c <HAL_DMA_IRQHandler+0xb0>
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	4a55      	ldr	r2, [pc, #340]	; (8001b74 <HAL_DMA_IRQHandler+0x208>)
 8001a1e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8094 	beq.w	8001b52 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a32:	e08e      	b.n	8001b52 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	2202      	movs	r2, #2
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d056      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x186>
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d051      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10b      	bne.n	8001a74 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 020a 	bic.w	r2, r2, #10
 8001a6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a38      	ldr	r2, [pc, #224]	; (8001b5c <HAL_DMA_IRQHandler+0x1f0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d029      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x166>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a37      	ldr	r2, [pc, #220]	; (8001b60 <HAL_DMA_IRQHandler+0x1f4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d022      	beq.n	8001ace <HAL_DMA_IRQHandler+0x162>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a35      	ldr	r2, [pc, #212]	; (8001b64 <HAL_DMA_IRQHandler+0x1f8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d01a      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x15c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a34      	ldr	r2, [pc, #208]	; (8001b68 <HAL_DMA_IRQHandler+0x1fc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d012      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0x156>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a32      	ldr	r2, [pc, #200]	; (8001b6c <HAL_DMA_IRQHandler+0x200>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00a      	beq.n	8001abc <HAL_DMA_IRQHandler+0x150>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a31      	ldr	r2, [pc, #196]	; (8001b70 <HAL_DMA_IRQHandler+0x204>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d102      	bne.n	8001ab6 <HAL_DMA_IRQHandler+0x14a>
 8001ab0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ab4:	e00e      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x168>
 8001ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aba:	e00b      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x168>
 8001abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ac0:	e008      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x168>
 8001ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac6:	e005      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x168>
 8001ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001acc:	e002      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x168>
 8001ace:	2320      	movs	r3, #32
 8001ad0:	e000      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x168>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <HAL_DMA_IRQHandler+0x208>)
 8001ad6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d034      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001af0:	e02f      	b.n	8001b52 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	2208      	movs	r2, #8
 8001af8:	409a      	lsls	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d028      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x1e8>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d023      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 020e 	bic.w	r2, r2, #14
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d004      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	4798      	blx	r3
    }
  }
  return;
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
}
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40020008 	.word	0x40020008
 8001b60:	4002001c 	.word	0x4002001c
 8001b64:	40020030 	.word	0x40020030
 8001b68:	40020044 	.word	0x40020044
 8001b6c:	40020058 	.word	0x40020058
 8001b70:	4002006c 	.word	0x4002006c
 8001b74:	40020000 	.word	0x40020000

08001b78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8e:	2101      	movs	r1, #1
 8001b90:	fa01 f202 	lsl.w	r2, r1, r2
 8001b94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b10      	cmp	r3, #16
 8001ba4:	d108      	bne.n	8001bb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bb6:	e007      	b.n	8001bc8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	60da      	str	r2, [r3, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b08b      	sub	sp, #44	; 0x2c
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be6:	e169      	b.n	8001ebc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001be8:	2201      	movs	r2, #1
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	f040 8158 	bne.w	8001eb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4a9a      	ldr	r2, [pc, #616]	; (8001e74 <HAL_GPIO_Init+0x2a0>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d05e      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c10:	4a98      	ldr	r2, [pc, #608]	; (8001e74 <HAL_GPIO_Init+0x2a0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d875      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c16:	4a98      	ldr	r2, [pc, #608]	; (8001e78 <HAL_GPIO_Init+0x2a4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d058      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c1c:	4a96      	ldr	r2, [pc, #600]	; (8001e78 <HAL_GPIO_Init+0x2a4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d86f      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c22:	4a96      	ldr	r2, [pc, #600]	; (8001e7c <HAL_GPIO_Init+0x2a8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d052      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c28:	4a94      	ldr	r2, [pc, #592]	; (8001e7c <HAL_GPIO_Init+0x2a8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d869      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c2e:	4a94      	ldr	r2, [pc, #592]	; (8001e80 <HAL_GPIO_Init+0x2ac>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d04c      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c34:	4a92      	ldr	r2, [pc, #584]	; (8001e80 <HAL_GPIO_Init+0x2ac>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d863      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c3a:	4a92      	ldr	r2, [pc, #584]	; (8001e84 <HAL_GPIO_Init+0x2b0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d046      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c40:	4a90      	ldr	r2, [pc, #576]	; (8001e84 <HAL_GPIO_Init+0x2b0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d85d      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c46:	2b12      	cmp	r3, #18
 8001c48:	d82a      	bhi.n	8001ca0 <HAL_GPIO_Init+0xcc>
 8001c4a:	2b12      	cmp	r3, #18
 8001c4c:	d859      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c4e:	a201      	add	r2, pc, #4	; (adr r2, 8001c54 <HAL_GPIO_Init+0x80>)
 8001c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c54:	08001ccf 	.word	0x08001ccf
 8001c58:	08001ca9 	.word	0x08001ca9
 8001c5c:	08001cbb 	.word	0x08001cbb
 8001c60:	08001cfd 	.word	0x08001cfd
 8001c64:	08001d03 	.word	0x08001d03
 8001c68:	08001d03 	.word	0x08001d03
 8001c6c:	08001d03 	.word	0x08001d03
 8001c70:	08001d03 	.word	0x08001d03
 8001c74:	08001d03 	.word	0x08001d03
 8001c78:	08001d03 	.word	0x08001d03
 8001c7c:	08001d03 	.word	0x08001d03
 8001c80:	08001d03 	.word	0x08001d03
 8001c84:	08001d03 	.word	0x08001d03
 8001c88:	08001d03 	.word	0x08001d03
 8001c8c:	08001d03 	.word	0x08001d03
 8001c90:	08001d03 	.word	0x08001d03
 8001c94:	08001d03 	.word	0x08001d03
 8001c98:	08001cb1 	.word	0x08001cb1
 8001c9c:	08001cc5 	.word	0x08001cc5
 8001ca0:	4a79      	ldr	r2, [pc, #484]	; (8001e88 <HAL_GPIO_Init+0x2b4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d013      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ca6:	e02c      	b.n	8001d02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	623b      	str	r3, [r7, #32]
          break;
 8001cae:	e029      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	623b      	str	r3, [r7, #32]
          break;
 8001cb8:	e024      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	3308      	adds	r3, #8
 8001cc0:	623b      	str	r3, [r7, #32]
          break;
 8001cc2:	e01f      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	330c      	adds	r3, #12
 8001cca:	623b      	str	r3, [r7, #32]
          break;
 8001ccc:	e01a      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	623b      	str	r3, [r7, #32]
          break;
 8001cda:	e013      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	611a      	str	r2, [r3, #16]
          break;
 8001cee:	e009      	b.n	8001d04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	615a      	str	r2, [r3, #20]
          break;
 8001cfa:	e003      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
          break;
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          break;
 8001d02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2bff      	cmp	r3, #255	; 0xff
 8001d08:	d801      	bhi.n	8001d0e <HAL_GPIO_Init+0x13a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	e001      	b.n	8001d12 <HAL_GPIO_Init+0x13e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3304      	adds	r3, #4
 8001d12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2bff      	cmp	r3, #255	; 0xff
 8001d18:	d802      	bhi.n	8001d20 <HAL_GPIO_Init+0x14c>
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	e002      	b.n	8001d26 <HAL_GPIO_Init+0x152>
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	3b08      	subs	r3, #8
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	210f      	movs	r1, #15
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	401a      	ands	r2, r3
 8001d38:	6a39      	ldr	r1, [r7, #32]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	431a      	orrs	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 80b1 	beq.w	8001eb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d54:	4b4d      	ldr	r3, [pc, #308]	; (8001e8c <HAL_GPIO_Init+0x2b8>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a4c      	ldr	r2, [pc, #304]	; (8001e8c <HAL_GPIO_Init+0x2b8>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6193      	str	r3, [r2, #24]
 8001d60:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <HAL_GPIO_Init+0x2b8>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d6c:	4a48      	ldr	r2, [pc, #288]	; (8001e90 <HAL_GPIO_Init+0x2bc>)
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	220f      	movs	r2, #15
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a40      	ldr	r2, [pc, #256]	; (8001e94 <HAL_GPIO_Init+0x2c0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d013      	beq.n	8001dc0 <HAL_GPIO_Init+0x1ec>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a3f      	ldr	r2, [pc, #252]	; (8001e98 <HAL_GPIO_Init+0x2c4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d00d      	beq.n	8001dbc <HAL_GPIO_Init+0x1e8>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a3e      	ldr	r2, [pc, #248]	; (8001e9c <HAL_GPIO_Init+0x2c8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d007      	beq.n	8001db8 <HAL_GPIO_Init+0x1e4>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a3d      	ldr	r2, [pc, #244]	; (8001ea0 <HAL_GPIO_Init+0x2cc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d101      	bne.n	8001db4 <HAL_GPIO_Init+0x1e0>
 8001db0:	2303      	movs	r3, #3
 8001db2:	e006      	b.n	8001dc2 <HAL_GPIO_Init+0x1ee>
 8001db4:	2304      	movs	r3, #4
 8001db6:	e004      	b.n	8001dc2 <HAL_GPIO_Init+0x1ee>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e002      	b.n	8001dc2 <HAL_GPIO_Init+0x1ee>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <HAL_GPIO_Init+0x1ee>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc4:	f002 0203 	and.w	r2, r2, #3
 8001dc8:	0092      	lsls	r2, r2, #2
 8001dca:	4093      	lsls	r3, r2
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dd2:	492f      	ldr	r1, [pc, #188]	; (8001e90 <HAL_GPIO_Init+0x2bc>)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	492c      	ldr	r1, [pc, #176]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]
 8001df8:	e006      	b.n	8001e08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	4928      	ldr	r1, [pc, #160]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	4922      	ldr	r1, [pc, #136]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60cb      	str	r3, [r1, #12]
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e22:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	491e      	ldr	r1, [pc, #120]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4918      	ldr	r1, [pc, #96]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	4914      	ldr	r1, [pc, #80]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d021      	beq.n	8001ea8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]
 8001e70:	e021      	b.n	8001eb6 <HAL_GPIO_Init+0x2e2>
 8001e72:	bf00      	nop
 8001e74:	10320000 	.word	0x10320000
 8001e78:	10310000 	.word	0x10310000
 8001e7c:	10220000 	.word	0x10220000
 8001e80:	10210000 	.word	0x10210000
 8001e84:	10120000 	.word	0x10120000
 8001e88:	10110000 	.word	0x10110000
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010000 	.word	0x40010000
 8001e94:	40010800 	.word	0x40010800
 8001e98:	40010c00 	.word	0x40010c00
 8001e9c:	40011000 	.word	0x40011000
 8001ea0:	40011400 	.word	0x40011400
 8001ea4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_GPIO_Init+0x304>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	4909      	ldr	r1, [pc, #36]	; (8001ed8 <HAL_GPIO_Init+0x304>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	3301      	adds	r3, #1
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f47f ae8e 	bne.w	8001be8 <HAL_GPIO_Init+0x14>
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	372c      	adds	r7, #44	; 0x2c
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	40010400 	.word	0x40010400

08001edc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	887b      	ldrh	r3, [r7, #2]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	e001      	b.n	8001efe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0e8      	b.n	80020ee <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d106      	bne.n	8001f36 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7fe fe7b 	bl	8000c2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2203      	movs	r2, #3
 8001f3a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f001 ffe4 	bl	8003f16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3304      	adds	r3, #4
 8001f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f58:	f001 ffd0 	bl	8003efc <USB_CoreInit>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2202      	movs	r2, #2
 8001f66:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e0bf      	b.n	80020ee <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f001 ffe8 	bl	8003f4a <USB_SetCurrentMode>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0b0      	b.n	80020ee <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	e03e      	b.n	8002010 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3311      	adds	r3, #17
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	3310      	adds	r3, #16
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	440b      	add	r3, r1
 8001fc8:	3313      	adds	r3, #19
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	3320      	adds	r3, #32
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	440b      	add	r3, r1
 8001ff0:	3324      	adds	r3, #36	; 0x24
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	3301      	adds	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	791b      	ldrb	r3, [r3, #4]
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	429a      	cmp	r2, r3
 8002018:	d3bb      	bcc.n	8001f92 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201a:	2300      	movs	r3, #0
 800201c:	73fb      	strb	r3, [r7, #15]
 800201e:	e044      	b.n	80020aa <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	f203 1351 	addw	r3, r3, #337	; 0x151
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	f203 1353 	addw	r3, r3, #339	; 0x153
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	440b      	add	r3, r1
 8002070:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	3301      	adds	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	791b      	ldrb	r3, [r3, #4]
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d3b5      	bcc.n	8002020 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3304      	adds	r3, #4
 80020bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020be:	f001 ff50 	bl	8003f62 <USB_DevInit>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e00c      	b.n	80020ee <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 fb1c 	bl	8005724 <USB_DevDisconnect>

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b088      	sub	sp, #32
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fb18 	bl	8005738 <USB_ReadInterrupts>
 8002108:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f985 	bl	8002424 <PCD_EP_ISR_Handler>

    return;
 800211a:	e119      	b.n	8002350 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	2b00      	cmp	r3, #0
 8002124:	d013      	beq.n	800214e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800212e:	b29a      	uxth	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002138:	b292      	uxth	r2, r2
 800213a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f931 	bl	80023a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002144:	2100      	movs	r1, #0
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f948 	bl	80023dc <HAL_PCD_SetAddress>

    return;
 800214c:	e100      	b.n	8002350 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00c      	beq.n	8002172 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002160:	b29a      	uxth	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800216a:	b292      	uxth	r2, r2
 800216c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002170:	e0ee      	b.n	8002350 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00c      	beq.n	8002196 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002184:	b29a      	uxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800218e:	b292      	uxth	r2, r2
 8002190:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002194:	e0dc      	b.n	8002350 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d027      	beq.n	80021f0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0204 	bic.w	r2, r2, #4
 80021b2:	b292      	uxth	r2, r2
 80021b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0208 	bic.w	r2, r2, #8
 80021ca:	b292      	uxth	r2, r2
 80021cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f8fa 	bl	80023ca <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021de:	b29a      	uxth	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021e8:	b292      	uxth	r2, r2
 80021ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80021ee:	e0af      	b.n	8002350 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8083 	beq.w	8002302 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80021fc:	2300      	movs	r3, #0
 80021fe:	77fb      	strb	r3, [r7, #31]
 8002200:	e010      	b.n	8002224 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	7ffb      	ldrb	r3, [r7, #31]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	441a      	add	r2, r3
 800220e:	7ffb      	ldrb	r3, [r7, #31]
 8002210:	8812      	ldrh	r2, [r2, #0]
 8002212:	b292      	uxth	r2, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	3320      	adds	r3, #32
 8002218:	443b      	add	r3, r7
 800221a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800221e:	7ffb      	ldrb	r3, [r7, #31]
 8002220:	3301      	adds	r3, #1
 8002222:	77fb      	strb	r3, [r7, #31]
 8002224:	7ffb      	ldrb	r3, [r7, #31]
 8002226:	2b07      	cmp	r3, #7
 8002228:	d9eb      	bls.n	8002202 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002232:	b29a      	uxth	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	b292      	uxth	r2, r2
 800223e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800224a:	b29a      	uxth	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0201 	bic.w	r2, r2, #1
 8002254:	b292      	uxth	r2, r2
 8002256:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800225a:	bf00      	nop
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002264:	b29b      	uxth	r3, r3
 8002266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f6      	beq.n	800225c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002276:	b29a      	uxth	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002280:	b292      	uxth	r2, r2
 8002282:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002286:	2300      	movs	r3, #0
 8002288:	77fb      	strb	r3, [r7, #31]
 800228a:	e00f      	b.n	80022ac <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800228c:	7ffb      	ldrb	r3, [r7, #31]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	4611      	mov	r1, r2
 8002294:	7ffa      	ldrb	r2, [r7, #31]
 8002296:	0092      	lsls	r2, r2, #2
 8002298:	440a      	add	r2, r1
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	3320      	adds	r3, #32
 800229e:	443b      	add	r3, r7
 80022a0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80022a4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80022a6:	7ffb      	ldrb	r3, [r7, #31]
 80022a8:	3301      	adds	r3, #1
 80022aa:	77fb      	strb	r3, [r7, #31]
 80022ac:	7ffb      	ldrb	r3, [r7, #31]
 80022ae:	2b07      	cmp	r3, #7
 80022b0:	d9ec      	bls.n	800228c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 0208 	orr.w	r2, r2, #8
 80022c4:	b292      	uxth	r2, r2
 80022c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022dc:	b292      	uxth	r2, r2
 80022de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0204 	orr.w	r2, r2, #4
 80022f4:	b292      	uxth	r2, r2
 80022f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f85c 	bl	80023b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002300:	e026      	b.n	8002350 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00f      	beq.n	800232c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002314:	b29a      	uxth	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800231e:	b292      	uxth	r2, r2
 8002320:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f835 	bl	8002394 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800232a:	e011      	b.n	8002350 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800233e:	b29a      	uxth	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002348:	b292      	uxth	r2, r2
 800234a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800234e:	bf00      	nop
  }
}
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_PCD_SetAddress+0x1a>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e012      	b.n	800241c <HAL_PCD_SetAddress+0x40>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f003 f976 	bl	80056fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b096      	sub	sp, #88	; 0x58
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800242c:	e3bc      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002436:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800243a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002448:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 8176 	bne.w	800273e <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002452:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b00      	cmp	r3, #0
 800245c:	d14f      	bne.n	80024fe <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	b29b      	uxth	r3, r3
 8002466:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800246a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246e:	81fb      	strh	r3, [r7, #14]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	89fb      	ldrh	r3, [r7, #14]
 8002476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800247a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800247e:	b29b      	uxth	r3, r3
 8002480:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3310      	adds	r3, #16
 8002486:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002490:	b29b      	uxth	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	3302      	adds	r3, #2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b6:	695a      	ldr	r2, [r3, #20]
 80024b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	441a      	add	r2, r3
 80024be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024c2:	2100      	movs	r1, #0
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff51 	bl	800236c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7b5b      	ldrb	r3, [r3, #13]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8369 	beq.w	8002ba8 <PCD_EP_ISR_Handler+0x784>
 80024d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 8364 	bne.w	8002ba8 <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7b5b      	ldrb	r3, [r3, #13]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	b292      	uxth	r2, r2
 80024f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	735a      	strb	r2, [r3, #13]
 80024fc:	e354      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002504:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002510:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002518:	2b00      	cmp	r3, #0
 800251a:	d034      	beq.n	8002586 <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	3306      	adds	r3, #6
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002546:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8002552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002554:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002558:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800255a:	b29b      	uxth	r3, r3
 800255c:	f003 f940 	bl	80057e0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	b29a      	uxth	r2, r3
 8002568:	f640 738f 	movw	r3, #3983	; 0xf8f
 800256c:	4013      	ands	r3, r2
 800256e:	823b      	strh	r3, [r7, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	8a3a      	ldrh	r2, [r7, #16]
 8002576:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800257a:	b292      	uxth	r2, r2
 800257c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff feff 	bl	8002382 <HAL_PCD_SetupStageCallback>
 8002584:	e310      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002586:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800258a:	2b00      	cmp	r3, #0
 800258c:	f280 830c 	bge.w	8002ba8 <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29a      	uxth	r2, r3
 8002598:	f640 738f 	movw	r3, #3983	; 0xf8f
 800259c:	4013      	ands	r3, r2
 800259e:	83fb      	strh	r3, [r7, #30]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	8bfa      	ldrh	r2, [r7, #30]
 80025a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025aa:	b292      	uxth	r2, r2
 80025ac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	3306      	adds	r3, #6
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d019      	beq.n	8002616 <PCD_EP_ISR_Handler+0x1f2>
 80025e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d015      	beq.n	8002616 <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f0:	6959      	ldr	r1, [r3, #20]
 80025f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f003 f8f0 	bl	80057e0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	441a      	add	r2, r3
 800260a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800260e:	2100      	movs	r1, #0
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff fea0 	bl	8002356 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002620:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 82bd 	bne.w	8002ba8 <PCD_EP_ISR_Handler+0x784>
 800262e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002632:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002636:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800263a:	f000 82b5 	beq.w	8002ba8 <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800264c:	b29b      	uxth	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	4413      	add	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002668:	b29a      	uxth	r2, r3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	801a      	strh	r2, [r3, #0]
 800266e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b3e      	cmp	r3, #62	; 0x3e
 8002674:	d91d      	bls.n	80026b2 <PCD_EP_ISR_Handler+0x28e>
 8002676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	647b      	str	r3, [r7, #68]	; 0x44
 800267e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <PCD_EP_ISR_Handler+0x26c>
 800268a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800268c:	3b01      	subs	r3, #1
 800268e:	647b      	str	r3, [r7, #68]	; 0x44
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	b29a      	uxth	r2, r3
 8002696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002698:	b29b      	uxth	r3, r3
 800269a:	029b      	lsls	r3, r3, #10
 800269c:	b29b      	uxth	r3, r3
 800269e:	4313      	orrs	r3, r2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	801a      	strh	r2, [r3, #0]
 80026b0:	e026      	b.n	8002700 <PCD_EP_ISR_Handler+0x2dc>
 80026b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10a      	bne.n	80026d0 <PCD_EP_ISR_Handler+0x2ac>
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	e017      	b.n	8002700 <PCD_EP_ISR_Handler+0x2dc>
 80026d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	647b      	str	r3, [r7, #68]	; 0x44
 80026d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <PCD_EP_ISR_Handler+0x2c6>
 80026e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026e6:	3301      	adds	r3, #1
 80026e8:	647b      	str	r3, [r7, #68]	; 0x44
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	029b      	lsls	r3, r3, #10
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	4313      	orrs	r3, r2
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800270c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002710:	827b      	strh	r3, [r7, #18]
 8002712:	8a7b      	ldrh	r3, [r7, #18]
 8002714:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002718:	827b      	strh	r3, [r7, #18]
 800271a:	8a7b      	ldrh	r3, [r7, #18]
 800271c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002720:	827b      	strh	r3, [r7, #18]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	8a7b      	ldrh	r3, [r7, #18]
 8002728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800272c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002738:	b29b      	uxth	r3, r3
 800273a:	8013      	strh	r3, [r2, #0]
 800273c:	e234      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002752:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002756:	2b00      	cmp	r3, #0
 8002758:	f280 80fc 	bge.w	8002954 <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	b29a      	uxth	r2, r3
 800276e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002772:	4013      	ands	r3, r2
 8002774:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800278a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800278e:	b292      	uxth	r2, r2
 8002790:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002792:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80027a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027aa:	7b1b      	ldrb	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d125      	bne.n	80027fc <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4413      	add	r3, r2
 80027c4:	3306      	adds	r3, #6
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80027dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 8092 	beq.w	800290a <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ec:	6959      	ldr	r1, [r3, #20]
 80027ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f0:	88da      	ldrh	r2, [r3, #6]
 80027f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027f6:	f002 fff3 	bl	80057e0 <USB_ReadPMA>
 80027fa:	e086      	b.n	800290a <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fe:	78db      	ldrb	r3, [r3, #3]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d10a      	bne.n	800281a <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002804:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002808:	461a      	mov	r2, r3
 800280a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f9d9 	bl	8002bc4 <HAL_PCD_EP_DB_Receive>
 8002812:	4603      	mov	r3, r0
 8002814:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002818:	e077      	b.n	800290a <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002834:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	441a      	add	r2, r3
 8002846:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800284a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800284e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002856:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800285a:	b29b      	uxth	r3, r3
 800285c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d024      	beq.n	80028c2 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002880:	b29b      	uxth	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4413      	add	r3, r2
 800288c:	3302      	adds	r3, #2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	4413      	add	r3, r2
 8002896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80028a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d02e      	beq.n	800290a <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b2:	6959      	ldr	r1, [r3, #20]
 80028b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b6:	891a      	ldrh	r2, [r3, #8]
 80028b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028bc:	f002 ff90 	bl	80057e0 <USB_ReadPMA>
 80028c0:	e023      	b.n	800290a <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4413      	add	r3, r2
 80028d6:	3306      	adds	r3, #6
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80028ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d009      	beq.n	800290a <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fc:	6959      	ldr	r1, [r3, #20]
 80028fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002900:	895a      	ldrh	r2, [r3, #10]
 8002902:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002906:	f002 ff6b 	bl	80057e0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800290a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002912:	441a      	add	r2, r3
 8002914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002916:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002920:	441a      	add	r2, r3
 8002922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002924:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <PCD_EP_ISR_Handler+0x516>
 800292e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	429a      	cmp	r2, r3
 8002938:	d206      	bcs.n	8002948 <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800293a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	4619      	mov	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff fd08 	bl	8002356 <HAL_PCD_DataOutStageCallback>
 8002946:	e005      	b.n	8002954 <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800294e:	4618      	mov	r0, r3
 8002950:	f001 fb24 	bl	8003f9c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002954:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8123 	beq.w	8002ba8 <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8002962:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	3310      	adds	r3, #16
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800298c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002990:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	441a      	add	r2, r3
 80029a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80029a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80029b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b4:	78db      	ldrb	r3, [r3, #3]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	f040 80a2 	bne.w	8002b00 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 80029bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029be:	2200      	movs	r2, #0
 80029c0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80029c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c4:	7b1b      	ldrb	r3, [r3, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8093 	beq.w	8002af2 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d046      	beq.n	8002a66 <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d126      	bne.n	8002a2e <PCD_EP_ISR_Handler+0x60a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	4413      	add	r3, r2
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
 80029f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	011a      	lsls	r2, r3, #4
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	4413      	add	r3, r2
 8002a02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a06:	623b      	str	r3, [r7, #32]
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	801a      	strh	r2, [r3, #0]
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	801a      	strh	r2, [r3, #0]
 8002a2c:	e061      	b.n	8002af2 <PCD_EP_ISR_Handler+0x6ce>
 8002a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a30:	785b      	ldrb	r3, [r3, #1]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d15d      	bne.n	8002af2 <PCD_EP_ISR_Handler+0x6ce>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4a:	4413      	add	r3, r2
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	011a      	lsls	r2, r3, #4
 8002a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a56:	4413      	add	r3, r2
 8002a58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a60:	2200      	movs	r2, #0
 8002a62:	801a      	strh	r2, [r3, #0]
 8002a64:	e045      	b.n	8002af2 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6e:	785b      	ldrb	r3, [r3, #1]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d126      	bne.n	8002ac2 <PCD_EP_ISR_Handler+0x69e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a88:	4413      	add	r3, r2
 8002a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	011a      	lsls	r2, r3, #4
 8002a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a94:	4413      	add	r3, r2
 8002a96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	801a      	strh	r2, [r3, #0]
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	801a      	strh	r2, [r3, #0]
 8002ac0:	e017      	b.n	8002af2 <PCD_EP_ISR_Handler+0x6ce>
 8002ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac4:	785b      	ldrb	r3, [r3, #1]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d113      	bne.n	8002af2 <PCD_EP_ISR_Handler+0x6ce>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad8:	4413      	add	r3, r2
 8002ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	011a      	lsls	r2, r3, #4
 8002ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	2200      	movs	r2, #0
 8002af0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fc37 	bl	800236c <HAL_PCD_DataInStageCallback>
 8002afe:	e053      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002b00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d146      	bne.n	8002b9a <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3302      	adds	r3, #2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d907      	bls.n	8002b54 <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8002b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b46:	699a      	ldr	r2, [r3, #24]
 8002b48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b4c:	1ad2      	subs	r2, r2, r3
 8002b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b50:	619a      	str	r2, [r3, #24]
 8002b52:	e002      	b.n	8002b5a <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8002b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b56:	2200      	movs	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff fbff 	bl	800236c <HAL_PCD_DataInStageCallback>
 8002b6e:	e01b      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b72:	695a      	ldr	r2, [r3, #20]
 8002b74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b78:	441a      	add	r2, r3
 8002b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b86:	441a      	add	r2, r3
 8002b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b92:	4618      	mov	r0, r3
 8002b94:	f001 fa02 	bl	8003f9c <USB_EPStartXfer>
 8002b98:	e006      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f91b 	bl	8002dde <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f6ff ac3a 	blt.w	800242e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3758      	adds	r7, #88	; 0x58
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d07e      	beq.n	8002cda <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c04:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	8b7b      	ldrh	r3, [r7, #26]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d306      	bcc.n	8002c1e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	8b7b      	ldrh	r3, [r7, #26]
 8002c16:	1ad2      	subs	r2, r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	619a      	str	r2, [r3, #24]
 8002c1c:	e002      	b.n	8002c24 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d123      	bne.n	8002c74 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c46:	833b      	strh	r3, [r7, #24]
 8002c48:	8b3b      	ldrh	r3, [r7, #24]
 8002c4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c4e:	833b      	strh	r3, [r7, #24]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	441a      	add	r2, r3
 8002c5e:	8b3b      	ldrh	r3, [r7, #24]
 8002c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01f      	beq.n	8002cbe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c98:	82fb      	strh	r3, [r7, #22]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	441a      	add	r2, r3
 8002ca8:	8afb      	ldrh	r3, [r7, #22]
 8002caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cbe:	8b7b      	ldrh	r3, [r7, #26]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8087 	beq.w	8002dd4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	6959      	ldr	r1, [r3, #20]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	891a      	ldrh	r2, [r3, #8]
 8002cd2:	8b7b      	ldrh	r3, [r7, #26]
 8002cd4:	f002 fd84 	bl	80057e0 <USB_ReadPMA>
 8002cd8:	e07c      	b.n	8002dd4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	3306      	adds	r3, #6
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d02:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	699a      	ldr	r2, [r3, #24]
 8002d08:	8b7b      	ldrh	r3, [r7, #26]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d306      	bcc.n	8002d1c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	8b7b      	ldrh	r3, [r7, #26]
 8002d14:	1ad2      	subs	r2, r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	619a      	str	r2, [r3, #24]
 8002d1a:	e002      	b.n	8002d22 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d123      	bne.n	8002d72 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d44:	83fb      	strh	r3, [r7, #30]
 8002d46:	8bfb      	ldrh	r3, [r7, #30]
 8002d48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d4c:	83fb      	strh	r3, [r7, #30]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	441a      	add	r2, r3
 8002d5c:	8bfb      	ldrh	r3, [r7, #30]
 8002d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d11f      	bne.n	8002dbc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d96:	83bb      	strh	r3, [r7, #28]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	441a      	add	r2, r3
 8002da6:	8bbb      	ldrh	r3, [r7, #28]
 8002da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002dbc:	8b7b      	ldrh	r3, [r7, #26]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	6959      	ldr	r1, [r3, #20]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	895a      	ldrh	r2, [r3, #10]
 8002dce:	8b7b      	ldrh	r3, [r7, #26]
 8002dd0:	f002 fd06 	bl	80057e0 <USB_ReadPMA>
    }
  }

  return count;
 8002dd4:	8b7b      	ldrh	r3, [r7, #26]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b0a4      	sub	sp, #144	; 0x90
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	4613      	mov	r3, r2
 8002dea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 81dd 	beq.w	80031b2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e20:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d907      	bls.n	8002e40 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	699a      	ldr	r2, [r3, #24]
 8002e34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e38:	1ad2      	subs	r2, r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	619a      	str	r2, [r3, #24]
 8002e3e:	e002      	b.n	8002e46 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2200      	movs	r2, #0
 8002e44:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f040 80b9 	bne.w	8002fc2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	785b      	ldrb	r3, [r3, #1]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d126      	bne.n	8002ea6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	4413      	add	r3, r2
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	011a      	lsls	r2, r3, #4
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	4413      	add	r3, r2
 8002e7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8e:	801a      	strh	r2, [r3, #0]
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea2:	801a      	strh	r2, [r3, #0]
 8002ea4:	e01a      	b.n	8002edc <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	785b      	ldrb	r3, [r3, #1]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d116      	bne.n	8002edc <HAL_PCD_EP_DB_Transmit+0xfe>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	4413      	add	r3, r2
 8002ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	011a      	lsls	r2, r3, #4
 8002ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ece:	4413      	add	r3, r2
 8002ed0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	2200      	movs	r2, #0
 8002eda:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	785b      	ldrb	r3, [r3, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d126      	bne.n	8002f38 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	61fb      	str	r3, [r7, #28]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	4413      	add	r3, r2
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	011a      	lsls	r2, r3, #4
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	801a      	strh	r2, [r3, #0]
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	801a      	strh	r2, [r3, #0]
 8002f36:	e017      	b.n	8002f68 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d113      	bne.n	8002f68 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	4413      	add	r3, r2
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	011a      	lsls	r2, r3, #4
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f60:	623b      	str	r3, [r7, #32]
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	2200      	movs	r2, #0
 8002f66:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f7ff f9fc 	bl	800236c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 82fc 	beq.w	8003578 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9a:	82fb      	strh	r3, [r7, #22]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	441a      	add	r2, r3
 8002faa:	8afb      	ldrh	r3, [r7, #22]
 8002fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	8013      	strh	r3, [r2, #0]
 8002fc0:	e2da      	b.n	8003578 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d021      	beq.n	8003010 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	441a      	add	r2, r3
 8002ff8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300c:	b29b      	uxth	r3, r3
 800300e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003016:	2b01      	cmp	r3, #1
 8003018:	f040 82ae 	bne.w	8003578 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003024:	441a      	add	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	69da      	ldr	r2, [r3, #28]
 800302e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003032:	441a      	add	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	6a1a      	ldr	r2, [r3, #32]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	429a      	cmp	r2, r3
 8003042:	d30b      	bcc.n	800305c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	6a1a      	ldr	r2, [r3, #32]
 8003050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003054:	1ad2      	subs	r2, r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	621a      	str	r2, [r3, #32]
 800305a:	e017      	b.n	800308c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d108      	bne.n	8003076 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003064:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003068:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003074:	e00a      	b.n	800308c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2200      	movs	r2, #0
 800308a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	785b      	ldrb	r3, [r3, #1]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d165      	bne.n	8003160 <HAL_PCD_EP_DB_Transmit+0x382>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a8:	4413      	add	r3, r2
 80030aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	011a      	lsls	r2, r3, #4
 80030b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b4:	4413      	add	r3, r2
 80030b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80030bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ca:	801a      	strh	r2, [r3, #0]
 80030cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030d0:	2b3e      	cmp	r3, #62	; 0x3e
 80030d2:	d91d      	bls.n	8003110 <HAL_PCD_EP_DB_Transmit+0x332>
 80030d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	64bb      	str	r3, [r7, #72]	; 0x48
 80030dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d102      	bne.n	80030ee <HAL_PCD_EP_DB_Transmit+0x310>
 80030e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ea:	3b01      	subs	r3, #1
 80030ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	029b      	lsls	r3, r3, #10
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	4313      	orrs	r3, r2
 80030fe:	b29b      	uxth	r3, r3
 8003100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003108:	b29a      	uxth	r2, r3
 800310a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310c:	801a      	strh	r2, [r3, #0]
 800310e:	e044      	b.n	800319a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003110:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10a      	bne.n	800312e <HAL_PCD_EP_DB_Transmit+0x350>
 8003118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	b29b      	uxth	r3, r3
 800311e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003126:	b29a      	uxth	r2, r3
 8003128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312a:	801a      	strh	r2, [r3, #0]
 800312c:	e035      	b.n	800319a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800312e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	64bb      	str	r3, [r7, #72]	; 0x48
 8003136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003144:	3301      	adds	r3, #1
 8003146:	64bb      	str	r3, [r7, #72]	; 0x48
 8003148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	b29a      	uxth	r2, r3
 800314e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003150:	b29b      	uxth	r3, r3
 8003152:	029b      	lsls	r3, r3, #10
 8003154:	b29b      	uxth	r3, r3
 8003156:	4313      	orrs	r3, r2
 8003158:	b29a      	uxth	r2, r3
 800315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315c:	801a      	strh	r2, [r3, #0]
 800315e:	e01c      	b.n	800319a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	785b      	ldrb	r3, [r3, #1]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d118      	bne.n	800319a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	647b      	str	r3, [r7, #68]	; 0x44
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317c:	4413      	add	r3, r2
 800317e:	647b      	str	r3, [r7, #68]	; 0x44
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	011a      	lsls	r2, r3, #4
 8003186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003188:	4413      	add	r3, r2
 800318a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800318e:	643b      	str	r3, [r7, #64]	; 0x40
 8003190:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003194:	b29a      	uxth	r2, r3
 8003196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003198:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	6959      	ldr	r1, [r3, #20]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	891a      	ldrh	r2, [r3, #8]
 80031a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	f002 fad3 	bl	8005756 <USB_WritePMA>
 80031b0:	e1e2      	b.n	8003578 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4413      	add	r3, r2
 80031c6:	3306      	adds	r3, #6
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031da:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d307      	bcc.n	80031fa <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031f2:	1ad2      	subs	r2, r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	619a      	str	r2, [r3, #24]
 80031f8:	e002      	b.n	8003200 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2200      	movs	r2, #0
 80031fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f040 80c0 	bne.w	800338a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	785b      	ldrb	r3, [r3, #1]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d126      	bne.n	8003260 <HAL_PCD_EP_DB_Transmit+0x482>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003220:	b29b      	uxth	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003226:	4413      	add	r3, r2
 8003228:	67fb      	str	r3, [r7, #124]	; 0x7c
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	011a      	lsls	r2, r3, #4
 8003230:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003232:	4413      	add	r3, r2
 8003234:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003238:	67bb      	str	r3, [r7, #120]	; 0x78
 800323a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003244:	b29a      	uxth	r2, r3
 8003246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003248:	801a      	strh	r2, [r3, #0]
 800324a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	b29b      	uxth	r3, r3
 8003250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003258:	b29a      	uxth	r2, r3
 800325a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800325c:	801a      	strh	r2, [r3, #0]
 800325e:	e01a      	b.n	8003296 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	785b      	ldrb	r3, [r3, #1]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d116      	bne.n	8003296 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	667b      	str	r3, [r7, #100]	; 0x64
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003276:	b29b      	uxth	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800327c:	4413      	add	r3, r2
 800327e:	667b      	str	r3, [r7, #100]	; 0x64
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	011a      	lsls	r2, r3, #4
 8003286:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003288:	4413      	add	r3, r2
 800328a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800328e:	663b      	str	r3, [r7, #96]	; 0x60
 8003290:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003292:	2200      	movs	r2, #0
 8003294:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	677b      	str	r3, [r7, #116]	; 0x74
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	785b      	ldrb	r3, [r3, #1]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d12b      	bne.n	80032fc <HAL_PCD_EP_DB_Transmit+0x51e>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b8:	4413      	add	r3, r2
 80032ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	011a      	lsls	r2, r3, #4
 80032c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c4:	4413      	add	r3, r2
 80032c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032da:	b29a      	uxth	r2, r3
 80032dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032e0:	801a      	strh	r2, [r3, #0]
 80032e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	e017      	b.n	800332c <HAL_PCD_EP_DB_Transmit+0x54e>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	785b      	ldrb	r3, [r3, #1]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d113      	bne.n	800332c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800330c:	b29b      	uxth	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003312:	4413      	add	r3, r2
 8003314:	677b      	str	r3, [r7, #116]	; 0x74
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	011a      	lsls	r2, r3, #4
 800331c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800331e:	4413      	add	r3, r2
 8003320:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003324:	673b      	str	r3, [r7, #112]	; 0x70
 8003326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003328:	2200      	movs	r2, #0
 800332a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	4619      	mov	r1, r3
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff f81a 	bl	800236c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 811a 	bne.w	8003578 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	441a      	add	r2, r3
 8003370:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800337c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003384:	b29b      	uxth	r3, r3
 8003386:	8013      	strh	r3, [r2, #0]
 8003388:	e0f6      	b.n	8003578 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d121      	bne.n	80033d8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	441a      	add	r2, r3
 80033c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033de:	2b01      	cmp	r3, #1
 80033e0:	f040 80ca 	bne.w	8003578 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033ec:	441a      	add	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	69da      	ldr	r2, [r3, #28]
 80033f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033fa:	441a      	add	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	6a1a      	ldr	r2, [r3, #32]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	429a      	cmp	r2, r3
 800340a:	d30b      	bcc.n	8003424 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	6a1a      	ldr	r2, [r3, #32]
 8003418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800341c:	1ad2      	subs	r2, r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	621a      	str	r2, [r3, #32]
 8003422:	e017      	b.n	8003454 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d108      	bne.n	800343e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800342c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003430:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800343c:	e00a      	b.n	8003454 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2200      	movs	r2, #0
 800344a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	657b      	str	r3, [r7, #84]	; 0x54
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	785b      	ldrb	r3, [r3, #1]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d165      	bne.n	800352e <HAL_PCD_EP_DB_Transmit+0x750>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003470:	b29b      	uxth	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003476:	4413      	add	r3, r2
 8003478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	011a      	lsls	r2, r3, #4
 8003480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003482:	4413      	add	r3, r2
 8003484:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003488:	65bb      	str	r3, [r7, #88]	; 0x58
 800348a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003494:	b29a      	uxth	r2, r3
 8003496:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003498:	801a      	strh	r2, [r3, #0]
 800349a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800349e:	2b3e      	cmp	r3, #62	; 0x3e
 80034a0:	d91d      	bls.n	80034de <HAL_PCD_EP_DB_Transmit+0x700>
 80034a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80034aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <HAL_PCD_EP_DB_Transmit+0x6de>
 80034b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034b8:	3b01      	subs	r3, #1
 80034ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80034bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	029b      	lsls	r3, r3, #10
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	4313      	orrs	r3, r2
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034da:	801a      	strh	r2, [r3, #0]
 80034dc:	e041      	b.n	8003562 <HAL_PCD_EP_DB_Transmit+0x784>
 80034de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10a      	bne.n	80034fc <HAL_PCD_EP_DB_Transmit+0x71e>
 80034e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034f8:	801a      	strh	r2, [r3, #0]
 80034fa:	e032      	b.n	8003562 <HAL_PCD_EP_DB_Transmit+0x784>
 80034fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003500:	085b      	lsrs	r3, r3, #1
 8003502:	66bb      	str	r3, [r7, #104]	; 0x68
 8003504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_PCD_EP_DB_Transmit+0x738>
 8003510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003512:	3301      	adds	r3, #1
 8003514:	66bb      	str	r3, [r7, #104]	; 0x68
 8003516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	b29a      	uxth	r2, r3
 800351c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800351e:	b29b      	uxth	r3, r3
 8003520:	029b      	lsls	r3, r3, #10
 8003522:	b29b      	uxth	r3, r3
 8003524:	4313      	orrs	r3, r2
 8003526:	b29a      	uxth	r2, r3
 8003528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800352a:	801a      	strh	r2, [r3, #0]
 800352c:	e019      	b.n	8003562 <HAL_PCD_EP_DB_Transmit+0x784>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	785b      	ldrb	r3, [r3, #1]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d115      	bne.n	8003562 <HAL_PCD_EP_DB_Transmit+0x784>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800353e:	b29b      	uxth	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003544:	4413      	add	r3, r2
 8003546:	657b      	str	r3, [r7, #84]	; 0x54
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	011a      	lsls	r2, r3, #4
 800354e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003550:	4413      	add	r3, r2
 8003552:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003556:	653b      	str	r3, [r7, #80]	; 0x50
 8003558:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800355c:	b29a      	uxth	r2, r3
 800355e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003560:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6959      	ldr	r1, [r3, #20]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	895a      	ldrh	r2, [r3, #10]
 800356e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003572:	b29b      	uxth	r3, r3
 8003574:	f002 f8ef 	bl	8005756 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800358e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003592:	82bb      	strh	r3, [r7, #20]
 8003594:	8abb      	ldrh	r3, [r7, #20]
 8003596:	f083 0310 	eor.w	r3, r3, #16
 800359a:	82bb      	strh	r3, [r7, #20]
 800359c:	8abb      	ldrh	r3, [r7, #20]
 800359e:	f083 0320 	eor.w	r3, r3, #32
 80035a2:	82bb      	strh	r3, [r7, #20]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	441a      	add	r2, r3
 80035b2:	8abb      	ldrh	r3, [r7, #20]
 80035b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3790      	adds	r7, #144	; 0x90
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e272      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8087 	beq.w	8003702 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035f4:	4b92      	ldr	r3, [pc, #584]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d00c      	beq.n	800361a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003600:	4b8f      	ldr	r3, [pc, #572]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b08      	cmp	r3, #8
 800360a:	d112      	bne.n	8003632 <HAL_RCC_OscConfig+0x5e>
 800360c:	4b8c      	ldr	r3, [pc, #560]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003618:	d10b      	bne.n	8003632 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361a:	4b89      	ldr	r3, [pc, #548]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d06c      	beq.n	8003700 <HAL_RCC_OscConfig+0x12c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d168      	bne.n	8003700 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e24c      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363a:	d106      	bne.n	800364a <HAL_RCC_OscConfig+0x76>
 800363c:	4b80      	ldr	r3, [pc, #512]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a7f      	ldr	r2, [pc, #508]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	e02e      	b.n	80036a8 <HAL_RCC_OscConfig+0xd4>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10c      	bne.n	800366c <HAL_RCC_OscConfig+0x98>
 8003652:	4b7b      	ldr	r3, [pc, #492]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a7a      	ldr	r2, [pc, #488]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	4b78      	ldr	r3, [pc, #480]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a77      	ldr	r2, [pc, #476]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003664:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e01d      	b.n	80036a8 <HAL_RCC_OscConfig+0xd4>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0xbc>
 8003676:	4b72      	ldr	r3, [pc, #456]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a71      	ldr	r2, [pc, #452]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800367c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6e      	ldr	r2, [pc, #440]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e00b      	b.n	80036a8 <HAL_RCC_OscConfig+0xd4>
 8003690:	4b6b      	ldr	r3, [pc, #428]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a6a      	ldr	r2, [pc, #424]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b68      	ldr	r3, [pc, #416]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a67      	ldr	r2, [pc, #412]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80036a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d013      	beq.n	80036d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fd fba4 	bl	8000dfc <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b8:	f7fd fba0 	bl	8000dfc <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e200      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b5d      	ldr	r3, [pc, #372]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0xe4>
 80036d6:	e014      	b.n	8003702 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fd fb90 	bl	8000dfc <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e0:	f7fd fb8c 	bl	8000dfc <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e1ec      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x10c>
 80036fe:	e000      	b.n	8003702 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d063      	beq.n	80037d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800370e:	4b4c      	ldr	r3, [pc, #304]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800371a:	4b49      	ldr	r3, [pc, #292]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b08      	cmp	r3, #8
 8003724:	d11c      	bne.n	8003760 <HAL_RCC_OscConfig+0x18c>
 8003726:	4b46      	ldr	r3, [pc, #280]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d116      	bne.n	8003760 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003732:	4b43      	ldr	r3, [pc, #268]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_RCC_OscConfig+0x176>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d001      	beq.n	800374a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e1c0      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4939      	ldr	r1, [pc, #228]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	e03a      	b.n	80037d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003768:	4b36      	ldr	r3, [pc, #216]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7fd fb45 	bl	8000dfc <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003776:	f7fd fb41 	bl	8000dfc <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e1a1      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003788:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4927      	ldr	r1, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]
 80037a8:	e015      	b.n	80037d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037aa:	4b26      	ldr	r3, [pc, #152]	; (8003844 <HAL_RCC_OscConfig+0x270>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fd fb24 	bl	8000dfc <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b8:	f7fd fb20 	bl	8000dfc <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e180      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d03a      	beq.n	8003858 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d019      	beq.n	800381e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ea:	4b17      	ldr	r3, [pc, #92]	; (8003848 <HAL_RCC_OscConfig+0x274>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f0:	f7fd fb04 	bl	8000dfc <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f8:	f7fd fb00 	bl	8000dfc <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e160      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380a:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <HAL_RCC_OscConfig+0x26c>)
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003816:	2001      	movs	r0, #1
 8003818:	f000 fa9c 	bl	8003d54 <RCC_Delay>
 800381c:	e01c      	b.n	8003858 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_RCC_OscConfig+0x274>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003824:	f7fd faea 	bl	8000dfc <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382a:	e00f      	b.n	800384c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382c:	f7fd fae6 	bl	8000dfc <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d908      	bls.n	800384c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e146      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
 8003844:	42420000 	.word	0x42420000
 8003848:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800384c:	4b92      	ldr	r3, [pc, #584]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e9      	bne.n	800382c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80a6 	beq.w	80039b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003866:	2300      	movs	r3, #0
 8003868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386a:	4b8b      	ldr	r3, [pc, #556]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10d      	bne.n	8003892 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	4b88      	ldr	r3, [pc, #544]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	4a87      	ldr	r2, [pc, #540]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003880:	61d3      	str	r3, [r2, #28]
 8003882:	4b85      	ldr	r3, [pc, #532]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003892:	4b82      	ldr	r3, [pc, #520]	; (8003a9c <HAL_RCC_OscConfig+0x4c8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d118      	bne.n	80038d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800389e:	4b7f      	ldr	r3, [pc, #508]	; (8003a9c <HAL_RCC_OscConfig+0x4c8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a7e      	ldr	r2, [pc, #504]	; (8003a9c <HAL_RCC_OscConfig+0x4c8>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038aa:	f7fd faa7 	bl	8000dfc <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b2:	f7fd faa3 	bl	8000dfc <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b64      	cmp	r3, #100	; 0x64
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e103      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c4:	4b75      	ldr	r3, [pc, #468]	; (8003a9c <HAL_RCC_OscConfig+0x4c8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d106      	bne.n	80038e6 <HAL_RCC_OscConfig+0x312>
 80038d8:	4b6f      	ldr	r3, [pc, #444]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4a6e      	ldr	r2, [pc, #440]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6213      	str	r3, [r2, #32]
 80038e4:	e02d      	b.n	8003942 <HAL_RCC_OscConfig+0x36e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10c      	bne.n	8003908 <HAL_RCC_OscConfig+0x334>
 80038ee:	4b6a      	ldr	r3, [pc, #424]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	4a69      	ldr	r2, [pc, #420]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	6213      	str	r3, [r2, #32]
 80038fa:	4b67      	ldr	r3, [pc, #412]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	4a66      	ldr	r2, [pc, #408]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003900:	f023 0304 	bic.w	r3, r3, #4
 8003904:	6213      	str	r3, [r2, #32]
 8003906:	e01c      	b.n	8003942 <HAL_RCC_OscConfig+0x36e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	2b05      	cmp	r3, #5
 800390e:	d10c      	bne.n	800392a <HAL_RCC_OscConfig+0x356>
 8003910:	4b61      	ldr	r3, [pc, #388]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	4a60      	ldr	r2, [pc, #384]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003916:	f043 0304 	orr.w	r3, r3, #4
 800391a:	6213      	str	r3, [r2, #32]
 800391c:	4b5e      	ldr	r3, [pc, #376]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	4a5d      	ldr	r2, [pc, #372]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6213      	str	r3, [r2, #32]
 8003928:	e00b      	b.n	8003942 <HAL_RCC_OscConfig+0x36e>
 800392a:	4b5b      	ldr	r3, [pc, #364]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	4a5a      	ldr	r2, [pc, #360]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	6213      	str	r3, [r2, #32]
 8003936:	4b58      	ldr	r3, [pc, #352]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	4a57      	ldr	r2, [pc, #348]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 800393c:	f023 0304 	bic.w	r3, r3, #4
 8003940:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d015      	beq.n	8003976 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394a:	f7fd fa57 	bl	8000dfc <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003950:	e00a      	b.n	8003968 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003952:	f7fd fa53 	bl	8000dfc <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003960:	4293      	cmp	r3, r2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e0b1      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003968:	4b4b      	ldr	r3, [pc, #300]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ee      	beq.n	8003952 <HAL_RCC_OscConfig+0x37e>
 8003974:	e014      	b.n	80039a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003976:	f7fd fa41 	bl	8000dfc <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397c:	e00a      	b.n	8003994 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7fd fa3d 	bl	8000dfc <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	; 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e09b      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003994:	4b40      	ldr	r3, [pc, #256]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1ee      	bne.n	800397e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d105      	bne.n	80039b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a6:	4b3c      	ldr	r3, [pc, #240]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	4a3b      	ldr	r2, [pc, #236]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80039ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 8087 	beq.w	8003aca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039bc:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 030c 	and.w	r3, r3, #12
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d061      	beq.n	8003a8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d146      	bne.n	8003a5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d0:	4b33      	ldr	r3, [pc, #204]	; (8003aa0 <HAL_RCC_OscConfig+0x4cc>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d6:	f7fd fa11 	bl	8000dfc <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039de:	f7fd fa0d 	bl	8000dfc <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e06d      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f0:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f0      	bne.n	80039de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a04:	d108      	bne.n	8003a18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a06:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	4921      	ldr	r1, [pc, #132]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a18:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a19      	ldr	r1, [r3, #32]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	491b      	ldr	r1, [pc, #108]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a30:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <HAL_RCC_OscConfig+0x4cc>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a36:	f7fd f9e1 	bl	8000dfc <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7fd f9dd 	bl	8000dfc <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e03d      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x46a>
 8003a5c:	e035      	b.n	8003aca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5e:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <HAL_RCC_OscConfig+0x4cc>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a64:	f7fd f9ca 	bl	8000dfc <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7fd f9c6 	bl	8000dfc <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e026      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x498>
 8003a8a:	e01e      	b.n	8003aca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d107      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e019      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40007000 	.word	0x40007000
 8003aa0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_RCC_OscConfig+0x500>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d001      	beq.n	8003aca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021000 	.word	0x40021000

08003ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0d0      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aec:	4b6a      	ldr	r3, [pc, #424]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d910      	bls.n	8003b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b67      	ldr	r3, [pc, #412]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 0207 	bic.w	r2, r3, #7
 8003b02:	4965      	ldr	r1, [pc, #404]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b63      	ldr	r3, [pc, #396]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0b8      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d020      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b34:	4b59      	ldr	r3, [pc, #356]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a58      	ldr	r2, [pc, #352]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b4c:	4b53      	ldr	r3, [pc, #332]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4a52      	ldr	r2, [pc, #328]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b58:	4b50      	ldr	r3, [pc, #320]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	494d      	ldr	r1, [pc, #308]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d040      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	4b47      	ldr	r3, [pc, #284]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d115      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e07f      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d107      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b96:	4b41      	ldr	r3, [pc, #260]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e073      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba6:	4b3d      	ldr	r3, [pc, #244]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e06b      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bb6:	4b39      	ldr	r3, [pc, #228]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f023 0203 	bic.w	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4936      	ldr	r1, [pc, #216]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc8:	f7fd f918 	bl	8000dfc <HAL_GetTick>
 8003bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	e00a      	b.n	8003be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd0:	f7fd f914 	bl	8000dfc <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e053      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be6:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 020c 	and.w	r2, r3, #12
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d1eb      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d210      	bcs.n	8003c28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 0207 	bic.w	r2, r3, #7
 8003c0e:	4922      	ldr	r1, [pc, #136]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e032      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c34:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4916      	ldr	r1, [pc, #88]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	490e      	ldr	r1, [pc, #56]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c66:	f000 f821 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	490a      	ldr	r1, [pc, #40]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c78:	5ccb      	ldrb	r3, [r1, r3]
 8003c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7e:	4a09      	ldr	r2, [pc, #36]	; (8003ca4 <HAL_RCC_ClockConfig+0x1cc>)
 8003c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c82:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <HAL_RCC_ClockConfig+0x1d0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fd f876 	bl	8000d78 <HAL_InitTick>

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40022000 	.word	0x40022000
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	0800b138 	.word	0x0800b138
 8003ca4:	20000038 	.word	0x20000038
 8003ca8:	2000003c 	.word	0x2000003c

08003cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cc6:	4b1e      	ldr	r3, [pc, #120]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d002      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x30>
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d003      	beq.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x36>
 8003cda:	e027      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cde:	613b      	str	r3, [r7, #16]
      break;
 8003ce0:	e027      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	0c9b      	lsrs	r3, r3, #18
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	4a17      	ldr	r2, [pc, #92]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cec:	5cd3      	ldrb	r3, [r2, r3]
 8003cee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d010      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	0c5b      	lsrs	r3, r3, #17
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d06:	5cd3      	ldrb	r3, [r2, r3]
 8003d08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a0d      	ldr	r2, [pc, #52]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d0e:	fb03 f202 	mul.w	r2, r3, r2
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	e004      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a0c      	ldr	r2, [pc, #48]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d20:	fb02 f303 	mul.w	r3, r2, r3
 8003d24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	613b      	str	r3, [r7, #16]
      break;
 8003d2a:	e002      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d2e:	613b      	str	r3, [r7, #16]
      break;
 8003d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d32:	693b      	ldr	r3, [r7, #16]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40021000 	.word	0x40021000
 8003d44:	007a1200 	.word	0x007a1200
 8003d48:	0800b148 	.word	0x0800b148
 8003d4c:	0800b158 	.word	0x0800b158
 8003d50:	003d0900 	.word	0x003d0900

08003d54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <RCC_Delay+0x34>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <RCC_Delay+0x38>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	0a5b      	lsrs	r3, r3, #9
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	fb02 f303 	mul.w	r3, r2, r3
 8003d6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d70:	bf00      	nop
  }
  while (Delay --);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1e5a      	subs	r2, r3, #1
 8003d76:	60fa      	str	r2, [r7, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f9      	bne.n	8003d70 <RCC_Delay+0x1c>
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	20000038 	.word	0x20000038
 8003d8c:	10624dd3 	.word	0x10624dd3

08003d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d07d      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003dac:	2300      	movs	r3, #0
 8003dae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db0:	4b4f      	ldr	r3, [pc, #316]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10d      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dbc:	4b4c      	ldr	r3, [pc, #304]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	4a4b      	ldr	r2, [pc, #300]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	61d3      	str	r3, [r2, #28]
 8003dc8:	4b49      	ldr	r3, [pc, #292]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	4b46      	ldr	r3, [pc, #280]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d118      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de4:	4b43      	ldr	r3, [pc, #268]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a42      	ldr	r2, [pc, #264]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df0:	f7fd f804 	bl	8000dfc <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df6:	e008      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df8:	f7fd f800 	bl	8000dfc <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	; 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e06d      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0a:	4b3a      	ldr	r3, [pc, #232]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e16:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d02e      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d027      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e34:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e44:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e4a:	4a29      	ldr	r2, [pc, #164]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d014      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7fc ffcf 	bl	8000dfc <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e60:	e00a      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fc ffcb 	bl	8000dfc <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e036      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ee      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e84:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4917      	ldr	r1, [pc, #92]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d105      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9c:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003eb4:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	490b      	ldr	r1, [pc, #44]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d008      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ed2:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	4904      	ldr	r1, [pc, #16]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	42420440 	.word	0x42420440

08003efc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	4638      	mov	r0, r7
 8003f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr

08003f16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b085      	sub	sp, #20
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f1e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f22:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	4013      	ands	r3, r2
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	460b      	mov	r3, r1
 8003f54:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr

08003f62 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b0c2      	sub	sp, #264	; 0x108
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003faa:	6018      	str	r0, [r3, #0]
 8003fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fb4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	785b      	ldrb	r3, [r3, #1]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	f040 86b7 	bne.w	8004d36 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699a      	ldr	r2, [r3, #24]
 8003fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d908      	bls.n	8003ff6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ff4:	e007      	b.n	8004006 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800400a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	7b1b      	ldrb	r3, [r3, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d13a      	bne.n	800408c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800401a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6959      	ldr	r1, [r3, #20]
 8004022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	88da      	ldrh	r2, [r3, #6]
 800402e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004032:	b29b      	uxth	r3, r3
 8004034:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004038:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800403c:	6800      	ldr	r0, [r0, #0]
 800403e:	f001 fb8a 	bl	8005756 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800405c:	b29b      	uxth	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4413      	add	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800406a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	011a      	lsls	r2, r3, #4
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4413      	add	r3, r2
 8004078:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	801a      	strh	r2, [r3, #0]
 8004088:	f000 be1f 	b.w	8004cca <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800408c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	78db      	ldrb	r3, [r3, #3]
 8004098:	2b02      	cmp	r3, #2
 800409a:	f040 8462 	bne.w	8004962 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800409e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6a1a      	ldr	r2, [r3, #32]
 80040aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	f240 83df 	bls.w	800487a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80040bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80040e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	441a      	add	r2, r3
 8004100:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800410c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004114:	b29b      	uxth	r3, r3
 8004116:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800411c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6a1a      	ldr	r2, [r3, #32]
 8004124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004128:	1ad2      	subs	r2, r2, r3
 800412a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800412e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800413a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	b29b      	uxth	r3, r3
 8004154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 81c7 	beq.w	80044ec <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800415e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	633b      	str	r3, [r7, #48]	; 0x30
 800416a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800416e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	785b      	ldrb	r3, [r3, #1]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d177      	bne.n	800426a <USB_EPStartXfer+0x2ce>
 800417a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800417e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	62bb      	str	r3, [r7, #40]	; 0x28
 8004186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800418a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004194:	b29b      	uxth	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	4413      	add	r3, r2
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28
 800419e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	011a      	lsls	r2, r3, #4
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	4413      	add	r3, r2
 80041b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	801a      	strh	r2, [r3, #0]
 80041c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ca:	2b3e      	cmp	r3, #62	; 0x3e
 80041cc:	d921      	bls.n	8004212 <USB_EPStartXfer+0x276>
 80041ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80041d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d104      	bne.n	80041ee <USB_EPStartXfer+0x252>
 80041e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80041e8:	3b01      	subs	r3, #1
 80041ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	029b      	lsls	r3, r3, #10
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	4313      	orrs	r3, r2
 8004200:	b29b      	uxth	r3, r3
 8004202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800420a:	b29a      	uxth	r2, r3
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	801a      	strh	r2, [r3, #0]
 8004210:	e050      	b.n	80042b4 <USB_EPStartXfer+0x318>
 8004212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <USB_EPStartXfer+0x294>
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004228:	b29a      	uxth	r2, r3
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	801a      	strh	r2, [r3, #0]
 800422e:	e041      	b.n	80042b4 <USB_EPStartXfer+0x318>
 8004230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800423a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d004      	beq.n	8004250 <USB_EPStartXfer+0x2b4>
 8004246:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800424a:	3301      	adds	r3, #1
 800424c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29a      	uxth	r2, r3
 8004256:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800425a:	b29b      	uxth	r3, r3
 800425c:	029b      	lsls	r3, r3, #10
 800425e:	b29b      	uxth	r3, r3
 8004260:	4313      	orrs	r3, r2
 8004262:	b29a      	uxth	r2, r3
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	801a      	strh	r2, [r3, #0]
 8004268:	e024      	b.n	80042b4 <USB_EPStartXfer+0x318>
 800426a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800426e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d11c      	bne.n	80042b4 <USB_EPStartXfer+0x318>
 800427a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800427e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004288:	b29b      	uxth	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	4413      	add	r3, r2
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
 8004292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	011a      	lsls	r2, r3, #4
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	4413      	add	r3, r2
 80042a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80042b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	895b      	ldrh	r3, [r3, #10]
 80042c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6959      	ldr	r1, [r3, #20]
 80042d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80042da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80042de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80042e2:	6800      	ldr	r0, [r0, #0]
 80042e4:	f001 fa37 	bl	8005756 <USB_WritePMA>
            ep->xfer_buff += len;
 80042e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042f8:	441a      	add	r2, r3
 80042fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800430a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6a1a      	ldr	r2, [r3, #32]
 8004312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	429a      	cmp	r2, r3
 8004320:	d90f      	bls.n	8004342 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6a1a      	ldr	r2, [r3, #32]
 800432e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004332:	1ad2      	subs	r2, r2, r3
 8004334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	621a      	str	r2, [r3, #32]
 8004340:	e00e      	b.n	8004360 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2200      	movs	r2, #0
 800435e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d177      	bne.n	8004460 <USB_EPStartXfer+0x4c4>
 8004370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004374:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	61bb      	str	r3, [r7, #24]
 800437c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800438a:	b29b      	uxth	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	4413      	add	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	011a      	lsls	r2, r3, #4
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	4413      	add	r3, r2
 80043a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	801a      	strh	r2, [r3, #0]
 80043bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043c0:	2b3e      	cmp	r3, #62	; 0x3e
 80043c2:	d921      	bls.n	8004408 <USB_EPStartXfer+0x46c>
 80043c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80043ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d104      	bne.n	80043e4 <USB_EPStartXfer+0x448>
 80043da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043de:	3b01      	subs	r3, #1
 80043e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	029b      	lsls	r3, r3, #10
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	4313      	orrs	r3, r2
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004400:	b29a      	uxth	r2, r3
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	801a      	strh	r2, [r3, #0]
 8004406:	e056      	b.n	80044b6 <USB_EPStartXfer+0x51a>
 8004408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <USB_EPStartXfer+0x48a>
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	b29b      	uxth	r3, r3
 8004416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800441a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441e:	b29a      	uxth	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	801a      	strh	r2, [r3, #0]
 8004424:	e047      	b.n	80044b6 <USB_EPStartXfer+0x51a>
 8004426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <USB_EPStartXfer+0x4aa>
 800443c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004440:	3301      	adds	r3, #1
 8004442:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29a      	uxth	r2, r3
 800444c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004450:	b29b      	uxth	r3, r3
 8004452:	029b      	lsls	r3, r3, #10
 8004454:	b29b      	uxth	r3, r3
 8004456:	4313      	orrs	r3, r2
 8004458:	b29a      	uxth	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	e02a      	b.n	80044b6 <USB_EPStartXfer+0x51a>
 8004460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	785b      	ldrb	r3, [r3, #1]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d122      	bne.n	80044b6 <USB_EPStartXfer+0x51a>
 8004470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	623b      	str	r3, [r7, #32]
 800447c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800448a:	b29b      	uxth	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	4413      	add	r3, r2
 8004492:	623b      	str	r3, [r7, #32]
 8004494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	011a      	lsls	r2, r3, #4
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	4413      	add	r3, r2
 80044a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80044b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	891b      	ldrh	r3, [r3, #8]
 80044c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6959      	ldr	r1, [r3, #20]
 80044d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80044dc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80044e0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80044e4:	6800      	ldr	r0, [r0, #0]
 80044e6:	f001 f936 	bl	8005756 <USB_WritePMA>
 80044ea:	e3ee      	b.n	8004cca <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80044ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	785b      	ldrb	r3, [r3, #1]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d177      	bne.n	80045ec <USB_EPStartXfer+0x650>
 80044fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	64bb      	str	r3, [r7, #72]	; 0x48
 8004508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800450c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004516:	b29b      	uxth	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451c:	4413      	add	r3, r2
 800451e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	011a      	lsls	r2, r3, #4
 800452e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004530:	4413      	add	r3, r2
 8004532:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004536:	647b      	str	r3, [r7, #68]	; 0x44
 8004538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004542:	b29a      	uxth	r2, r3
 8004544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004546:	801a      	strh	r2, [r3, #0]
 8004548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800454c:	2b3e      	cmp	r3, #62	; 0x3e
 800454e:	d921      	bls.n	8004594 <USB_EPStartXfer+0x5f8>
 8004550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800455a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	2b00      	cmp	r3, #0
 8004564:	d104      	bne.n	8004570 <USB_EPStartXfer+0x5d4>
 8004566:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800456a:	3b01      	subs	r3, #1
 800456c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29a      	uxth	r2, r3
 8004576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800457a:	b29b      	uxth	r3, r3
 800457c:	029b      	lsls	r3, r3, #10
 800457e:	b29b      	uxth	r3, r3
 8004580:	4313      	orrs	r3, r2
 8004582:	b29b      	uxth	r3, r3
 8004584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800458c:	b29a      	uxth	r2, r3
 800458e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004590:	801a      	strh	r2, [r3, #0]
 8004592:	e056      	b.n	8004642 <USB_EPStartXfer+0x6a6>
 8004594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <USB_EPStartXfer+0x616>
 800459c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ae:	801a      	strh	r2, [r3, #0]
 80045b0:	e047      	b.n	8004642 <USB_EPStartXfer+0x6a6>
 80045b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80045bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d004      	beq.n	80045d2 <USB_EPStartXfer+0x636>
 80045c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045cc:	3301      	adds	r3, #1
 80045ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80045d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045dc:	b29b      	uxth	r3, r3
 80045de:	029b      	lsls	r3, r3, #10
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	4313      	orrs	r3, r2
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e8:	801a      	strh	r2, [r3, #0]
 80045ea:	e02a      	b.n	8004642 <USB_EPStartXfer+0x6a6>
 80045ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	785b      	ldrb	r3, [r3, #1]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d122      	bne.n	8004642 <USB_EPStartXfer+0x6a6>
 80045fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004600:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	653b      	str	r3, [r7, #80]	; 0x50
 8004608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800460c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004616:	b29b      	uxth	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800461c:	4413      	add	r3, r2
 800461e:	653b      	str	r3, [r7, #80]	; 0x50
 8004620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	011a      	lsls	r2, r3, #4
 800462e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004630:	4413      	add	r3, r2
 8004632:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800463c:	b29a      	uxth	r2, r3
 800463e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004640:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	891b      	ldrh	r3, [r3, #8]
 800464e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6959      	ldr	r1, [r3, #20]
 800465e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004662:	b29b      	uxth	r3, r3
 8004664:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004668:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800466c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004670:	6800      	ldr	r0, [r0, #0]
 8004672:	f001 f870 	bl	8005756 <USB_WritePMA>
            ep->xfer_buff += len;
 8004676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800467a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004686:	441a      	add	r2, r3
 8004688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800468c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6a1a      	ldr	r2, [r3, #32]
 80046a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d90f      	bls.n	80046d0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80046b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6a1a      	ldr	r2, [r3, #32]
 80046bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046c0:	1ad2      	subs	r2, r2, r3
 80046c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	621a      	str	r2, [r3, #32]
 80046ce:	e00e      	b.n	80046ee <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80046d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80046e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2200      	movs	r2, #0
 80046ec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80046ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	643b      	str	r3, [r7, #64]	; 0x40
 80046fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	785b      	ldrb	r3, [r3, #1]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d177      	bne.n	80047fa <USB_EPStartXfer+0x85e>
 800470a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800470e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	63bb      	str	r3, [r7, #56]	; 0x38
 8004716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800471a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004724:	b29b      	uxth	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	4413      	add	r3, r2
 800472c:	63bb      	str	r3, [r7, #56]	; 0x38
 800472e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	011a      	lsls	r2, r3, #4
 800473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473e:	4413      	add	r3, r2
 8004740:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004744:	637b      	str	r3, [r7, #52]	; 0x34
 8004746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004750:	b29a      	uxth	r2, r3
 8004752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004754:	801a      	strh	r2, [r3, #0]
 8004756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800475a:	2b3e      	cmp	r3, #62	; 0x3e
 800475c:	d921      	bls.n	80047a2 <USB_EPStartXfer+0x806>
 800475e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	2b00      	cmp	r3, #0
 8004772:	d104      	bne.n	800477e <USB_EPStartXfer+0x7e2>
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	3b01      	subs	r3, #1
 800477a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800477e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	b29a      	uxth	r2, r3
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004788:	b29b      	uxth	r3, r3
 800478a:	029b      	lsls	r3, r3, #10
 800478c:	b29b      	uxth	r3, r3
 800478e:	4313      	orrs	r3, r2
 8004790:	b29b      	uxth	r3, r3
 8004792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800479a:	b29a      	uxth	r2, r3
 800479c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479e:	801a      	strh	r2, [r3, #0]
 80047a0:	e050      	b.n	8004844 <USB_EPStartXfer+0x8a8>
 80047a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <USB_EPStartXfer+0x824>
 80047aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047bc:	801a      	strh	r2, [r3, #0]
 80047be:	e041      	b.n	8004844 <USB_EPStartXfer+0x8a8>
 80047c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80047ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <USB_EPStartXfer+0x844>
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047da:	3301      	adds	r3, #1
 80047dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80047e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	029b      	lsls	r3, r3, #10
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	4313      	orrs	r3, r2
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f6:	801a      	strh	r2, [r3, #0]
 80047f8:	e024      	b.n	8004844 <USB_EPStartXfer+0x8a8>
 80047fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	785b      	ldrb	r3, [r3, #1]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d11c      	bne.n	8004844 <USB_EPStartXfer+0x8a8>
 800480a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800480e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004818:	b29b      	uxth	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800481e:	4413      	add	r3, r2
 8004820:	643b      	str	r3, [r7, #64]	; 0x40
 8004822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	011a      	lsls	r2, r3, #4
 8004830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004832:	4413      	add	r3, r2
 8004834:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800483a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800483e:	b29a      	uxth	r2, r3
 8004840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004842:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	895b      	ldrh	r3, [r3, #10]
 8004850:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6959      	ldr	r1, [r3, #20]
 8004860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004864:	b29b      	uxth	r3, r3
 8004866:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800486a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800486e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004872:	6800      	ldr	r0, [r0, #0]
 8004874:	f000 ff6f 	bl	8005756 <USB_WritePMA>
 8004878:	e227      	b.n	8004cca <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800487a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800487e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800488a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800488e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80048ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80048b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	441a      	add	r2, r3
 80048ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80048d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80048e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004900:	b29b      	uxth	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004906:	4413      	add	r3, r2
 8004908:	65fb      	str	r3, [r7, #92]	; 0x5c
 800490a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800490e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	011a      	lsls	r2, r3, #4
 8004918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800491a:	4413      	add	r3, r2
 800491c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004920:	65bb      	str	r3, [r7, #88]	; 0x58
 8004922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004926:	b29a      	uxth	r2, r3
 8004928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800492a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800492c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	891b      	ldrh	r3, [r3, #8]
 8004938:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800493c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6959      	ldr	r1, [r3, #20]
 8004948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800494c:	b29b      	uxth	r3, r3
 800494e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004952:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004956:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800495a:	6800      	ldr	r0, [r0, #0]
 800495c:	f000 fefb 	bl	8005756 <USB_WritePMA>
 8004960:	e1b3      	b.n	8004cca <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6a1a      	ldr	r2, [r3, #32]
 800496e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004972:	1ad2      	subs	r2, r2, r3
 8004974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800498e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 80c6 	beq.w	8004b34 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	673b      	str	r3, [r7, #112]	; 0x70
 80049b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	785b      	ldrb	r3, [r3, #1]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d177      	bne.n	8004ab4 <USB_EPStartXfer+0xb18>
 80049c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80049d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049de:	b29b      	uxth	r3, r3
 80049e0:	461a      	mov	r2, r3
 80049e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049e4:	4413      	add	r3, r2
 80049e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80049e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	011a      	lsls	r2, r3, #4
 80049f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049f8:	4413      	add	r3, r2
 80049fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a0e:	801a      	strh	r2, [r3, #0]
 8004a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a14:	2b3e      	cmp	r3, #62	; 0x3e
 8004a16:	d921      	bls.n	8004a5c <USB_EPStartXfer+0xac0>
 8004a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a26:	f003 031f 	and.w	r3, r3, #31
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d104      	bne.n	8004a38 <USB_EPStartXfer+0xa9c>
 8004a2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a32:	3b01      	subs	r3, #1
 8004a34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	029b      	lsls	r3, r3, #10
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a58:	801a      	strh	r2, [r3, #0]
 8004a5a:	e050      	b.n	8004afe <USB_EPStartXfer+0xb62>
 8004a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <USB_EPStartXfer+0xade>
 8004a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a76:	801a      	strh	r2, [r3, #0]
 8004a78:	e041      	b.n	8004afe <USB_EPStartXfer+0xb62>
 8004a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a7e:	085b      	lsrs	r3, r3, #1
 8004a80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d004      	beq.n	8004a9a <USB_EPStartXfer+0xafe>
 8004a90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a94:	3301      	adds	r3, #1
 8004a96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	029b      	lsls	r3, r3, #10
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ab0:	801a      	strh	r2, [r3, #0]
 8004ab2:	e024      	b.n	8004afe <USB_EPStartXfer+0xb62>
 8004ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	785b      	ldrb	r3, [r3, #1]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d11c      	bne.n	8004afe <USB_EPStartXfer+0xb62>
 8004ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ac8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ad8:	4413      	add	r3, r2
 8004ada:	673b      	str	r3, [r7, #112]	; 0x70
 8004adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	011a      	lsls	r2, r3, #4
 8004aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aec:	4413      	add	r3, r2
 8004aee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004af2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	895b      	ldrh	r3, [r3, #10]
 8004b0a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6959      	ldr	r1, [r3, #20]
 8004b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004b24:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004b28:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004b2c:	6800      	ldr	r0, [r0, #0]
 8004b2e:	f000 fe12 	bl	8005756 <USB_WritePMA>
 8004b32:	e0ca      	b.n	8004cca <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	785b      	ldrb	r3, [r3, #1]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d177      	bne.n	8004c34 <USB_EPStartXfer+0xc98>
 8004b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	461a      	mov	r2, r3
 8004b62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b64:	4413      	add	r3, r2
 8004b66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	011a      	lsls	r2, r3, #4
 8004b76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b78:	4413      	add	r3, r2
 8004b7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b8e:	801a      	strh	r2, [r3, #0]
 8004b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b94:	2b3e      	cmp	r3, #62	; 0x3e
 8004b96:	d921      	bls.n	8004bdc <USB_EPStartXfer+0xc40>
 8004b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba6:	f003 031f 	and.w	r3, r3, #31
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d104      	bne.n	8004bb8 <USB_EPStartXfer+0xc1c>
 8004bae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	029b      	lsls	r3, r3, #10
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bd8:	801a      	strh	r2, [r3, #0]
 8004bda:	e05c      	b.n	8004c96 <USB_EPStartXfer+0xcfa>
 8004bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10a      	bne.n	8004bfa <USB_EPStartXfer+0xc5e>
 8004be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bf6:	801a      	strh	r2, [r3, #0]
 8004bf8:	e04d      	b.n	8004c96 <USB_EPStartXfer+0xcfa>
 8004bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d004      	beq.n	8004c1a <USB_EPStartXfer+0xc7e>
 8004c10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c14:	3301      	adds	r3, #1
 8004c16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	029b      	lsls	r3, r3, #10
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c30:	801a      	strh	r2, [r3, #0]
 8004c32:	e030      	b.n	8004c96 <USB_EPStartXfer+0xcfa>
 8004c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	785b      	ldrb	r3, [r3, #1]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d128      	bne.n	8004c96 <USB_EPStartXfer+0xcfa>
 8004c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c68:	4413      	add	r3, r2
 8004c6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	011a      	lsls	r2, r3, #4
 8004c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c80:	4413      	add	r3, r2
 8004c82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	891b      	ldrh	r3, [r3, #8]
 8004ca2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6959      	ldr	r1, [r3, #20]
 8004cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004cbc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004cc0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004cc4:	6800      	ldr	r0, [r0, #0]
 8004cc6:	f000 fd46 	bl	8005756 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf0:	817b      	strh	r3, [r7, #10]
 8004cf2:	897b      	ldrh	r3, [r7, #10]
 8004cf4:	f083 0310 	eor.w	r3, r3, #16
 8004cf8:	817b      	strh	r3, [r7, #10]
 8004cfa:	897b      	ldrh	r3, [r7, #10]
 8004cfc:	f083 0320 	eor.w	r3, r3, #32
 8004d00:	817b      	strh	r3, [r7, #10]
 8004d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	441a      	add	r2, r3
 8004d1c:	897b      	ldrh	r3, [r7, #10]
 8004d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	8013      	strh	r3, [r2, #0]
 8004d32:	f000 bcde 	b.w	80056f2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	7b1b      	ldrb	r3, [r3, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f040 80bb 	bne.w	8004ebe <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d917      	bls.n	8004d94 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8004d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699a      	ldr	r2, [r3, #24]
 8004d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d84:	1ad2      	subs	r2, r2, r3
 8004d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	619a      	str	r2, [r3, #24]
 8004d92:	e00e      	b.n	8004db2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8004da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2200      	movs	r2, #0
 8004db0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004db6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	011a      	lsls	r2, r3, #4
 8004dea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dee:	4413      	add	r3, r2
 8004df0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004df4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e0a:	801a      	strh	r2, [r3, #0]
 8004e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e10:	2b3e      	cmp	r3, #62	; 0x3e
 8004e12:	d924      	bls.n	8004e5e <USB_EPStartXfer+0xec2>
 8004e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e18:	095b      	lsrs	r3, r3, #5
 8004e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d104      	bne.n	8004e34 <USB_EPStartXfer+0xe98>
 8004e2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	029b      	lsls	r3, r3, #10
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	4313      	orrs	r3, r2
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e58:	801a      	strh	r2, [r3, #0]
 8004e5a:	f000 bc10 	b.w	800567e <USB_EPStartXfer+0x16e2>
 8004e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10c      	bne.n	8004e80 <USB_EPStartXfer+0xee4>
 8004e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e7c:	801a      	strh	r2, [r3, #0]
 8004e7e:	e3fe      	b.n	800567e <USB_EPStartXfer+0x16e2>
 8004e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d004      	beq.n	8004ea0 <USB_EPStartXfer+0xf04>
 8004e96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	029b      	lsls	r3, r3, #10
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eba:	801a      	strh	r2, [r3, #0]
 8004ebc:	e3df      	b.n	800567e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	78db      	ldrb	r3, [r3, #3]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	f040 8218 	bne.w	8005300 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f040 809d 	bne.w	800501c <USB_EPStartXfer+0x1080>
 8004ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f06:	4413      	add	r3, r2
 8004f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	011a      	lsls	r2, r3, #4
 8004f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f1e:	4413      	add	r3, r2
 8004f20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f3a:	801a      	strh	r2, [r3, #0]
 8004f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2b3e      	cmp	r3, #62	; 0x3e
 8004f4a:	d92b      	bls.n	8004fa4 <USB_EPStartXfer+0x1008>
 8004f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	095b      	lsrs	r3, r3, #5
 8004f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 031f 	and.w	r3, r3, #31
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d104      	bne.n	8004f7c <USB_EPStartXfer+0xfe0>
 8004f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f76:	3b01      	subs	r3, #1
 8004f78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	029b      	lsls	r3, r3, #10
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fa0:	801a      	strh	r2, [r3, #0]
 8004fa2:	e070      	b.n	8005086 <USB_EPStartXfer+0x10ea>
 8004fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10c      	bne.n	8004fce <USB_EPStartXfer+0x1032>
 8004fb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fca:	801a      	strh	r2, [r3, #0]
 8004fcc:	e05b      	b.n	8005086 <USB_EPStartXfer+0x10ea>
 8004fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	085b      	lsrs	r3, r3, #1
 8004fdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d004      	beq.n	8004ffe <USB_EPStartXfer+0x1062>
 8004ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ffe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b29a      	uxth	r2, r3
 8005006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500a:	b29b      	uxth	r3, r3
 800500c:	029b      	lsls	r3, r3, #10
 800500e:	b29b      	uxth	r3, r3
 8005010:	4313      	orrs	r3, r2
 8005012:	b29a      	uxth	r2, r3
 8005014:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005018:	801a      	strh	r2, [r3, #0]
 800501a:	e034      	b.n	8005086 <USB_EPStartXfer+0x10ea>
 800501c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	785b      	ldrb	r3, [r3, #1]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d12c      	bne.n	8005086 <USB_EPStartXfer+0x10ea>
 800502c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800503a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800503e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005048:	b29b      	uxth	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005050:	4413      	add	r3, r2
 8005052:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800505a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	011a      	lsls	r2, r3, #4
 8005064:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005068:	4413      	add	r3, r2
 800506a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800506e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	b29a      	uxth	r2, r3
 8005080:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005084:	801a      	strh	r2, [r3, #0]
 8005086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800508a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f040 809d 	bne.w	80051e0 <USB_EPStartXfer+0x1244>
 80050a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050ca:	4413      	add	r3, r2
 80050cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	011a      	lsls	r2, r3, #4
 80050de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050e2:	4413      	add	r3, r2
 80050e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050fe:	801a      	strh	r2, [r3, #0]
 8005100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b3e      	cmp	r3, #62	; 0x3e
 800510e:	d92b      	bls.n	8005168 <USB_EPStartXfer+0x11cc>
 8005110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <USB_EPStartXfer+0x11a4>
 8005136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800513a:	3b01      	subs	r3, #1
 800513c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29a      	uxth	r2, r3
 8005148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800514c:	b29b      	uxth	r3, r3
 800514e:	029b      	lsls	r3, r3, #10
 8005150:	b29b      	uxth	r3, r3
 8005152:	4313      	orrs	r3, r2
 8005154:	b29b      	uxth	r3, r3
 8005156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515e:	b29a      	uxth	r2, r3
 8005160:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	e069      	b.n	800523c <USB_EPStartXfer+0x12a0>
 8005168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800516c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10c      	bne.n	8005192 <USB_EPStartXfer+0x11f6>
 8005178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005188:	b29a      	uxth	r2, r3
 800518a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800518e:	801a      	strh	r2, [r3, #0]
 8005190:	e054      	b.n	800523c <USB_EPStartXfer+0x12a0>
 8005192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	085b      	lsrs	r3, r3, #1
 80051a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d004      	beq.n	80051c2 <USB_EPStartXfer+0x1226>
 80051b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051bc:	3301      	adds	r3, #1
 80051be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	029b      	lsls	r3, r3, #10
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	4313      	orrs	r3, r2
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	e02d      	b.n	800523c <USB_EPStartXfer+0x12a0>
 80051e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d125      	bne.n	800523c <USB_EPStartXfer+0x12a0>
 80051f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051fe:	b29b      	uxth	r3, r3
 8005200:	461a      	mov	r2, r3
 8005202:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005206:	4413      	add	r3, r2
 8005208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800520c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	011a      	lsls	r2, r3, #4
 800521a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800521e:	4413      	add	r3, r2
 8005220:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005224:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800522c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	b29a      	uxth	r2, r3
 8005236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800523a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800523c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 8218 	beq.w	800567e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800524e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800526e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <USB_EPStartXfer+0x12ea>
 800527a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800527e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10d      	bne.n	80052a2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005286:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800528a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800528e:	2b00      	cmp	r3, #0
 8005290:	f040 81f5 	bne.w	800567e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005294:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 81ee 	bne.w	800567e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80052a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80052cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	441a      	add	r2, r3
 80052e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80052ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8013      	strh	r3, [r2, #0]
 80052fe:	e1be      	b.n	800567e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	78db      	ldrb	r3, [r3, #3]
 800530c:	2b01      	cmp	r3, #1
 800530e:	f040 81b4 	bne.w	800567a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	429a      	cmp	r2, r3
 800532c:	d917      	bls.n	800535e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800532e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800533e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699a      	ldr	r2, [r3, #24]
 800534a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800534e:	1ad2      	subs	r2, r2, r3
 8005350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	619a      	str	r2, [r3, #24]
 800535c:	e00e      	b.n	800537c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800535e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800536e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2200      	movs	r2, #0
 800537a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800537c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f040 8085 	bne.w	8005498 <USB_EPStartXfer+0x14fc>
 800538e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005392:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800539c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	461a      	mov	r2, r3
 80053ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053b2:	4413      	add	r3, r2
 80053b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	011a      	lsls	r2, r3, #4
 80053c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053ca:	4413      	add	r3, r2
 80053cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053e6:	801a      	strh	r2, [r3, #0]
 80053e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ec:	2b3e      	cmp	r3, #62	; 0x3e
 80053ee:	d923      	bls.n	8005438 <USB_EPStartXfer+0x149c>
 80053f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80053fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	2b00      	cmp	r3, #0
 8005404:	d104      	bne.n	8005410 <USB_EPStartXfer+0x1474>
 8005406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800540a:	3b01      	subs	r3, #1
 800540c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005410:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29a      	uxth	r2, r3
 8005418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800541c:	b29b      	uxth	r3, r3
 800541e:	029b      	lsls	r3, r3, #10
 8005420:	b29b      	uxth	r3, r3
 8005422:	4313      	orrs	r3, r2
 8005424:	b29b      	uxth	r3, r3
 8005426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542e:	b29a      	uxth	r2, r3
 8005430:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005434:	801a      	strh	r2, [r3, #0]
 8005436:	e060      	b.n	80054fa <USB_EPStartXfer+0x155e>
 8005438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10c      	bne.n	800545a <USB_EPStartXfer+0x14be>
 8005440:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29b      	uxth	r3, r3
 8005448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800544c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005450:	b29a      	uxth	r2, r3
 8005452:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005456:	801a      	strh	r2, [r3, #0]
 8005458:	e04f      	b.n	80054fa <USB_EPStartXfer+0x155e>
 800545a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545e:	085b      	lsrs	r3, r3, #1
 8005460:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d004      	beq.n	800547a <USB_EPStartXfer+0x14de>
 8005470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005474:	3301      	adds	r3, #1
 8005476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800547a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	b29a      	uxth	r2, r3
 8005482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005486:	b29b      	uxth	r3, r3
 8005488:	029b      	lsls	r3, r3, #10
 800548a:	b29b      	uxth	r3, r3
 800548c:	4313      	orrs	r3, r2
 800548e:	b29a      	uxth	r2, r3
 8005490:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005494:	801a      	strh	r2, [r3, #0]
 8005496:	e030      	b.n	80054fa <USB_EPStartXfer+0x155e>
 8005498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800549c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	785b      	ldrb	r3, [r3, #1]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d128      	bne.n	80054fa <USB_EPStartXfer+0x155e>
 80054a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80054b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054cc:	4413      	add	r3, r2
 80054ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80054d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	011a      	lsls	r2, r3, #4
 80054e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054e4:	4413      	add	r3, r2
 80054e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800550c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f040 8085 	bne.w	8005624 <USB_EPStartXfer+0x1688>
 800551a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800552c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005536:	b29b      	uxth	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800553e:	4413      	add	r3, r2
 8005540:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	011a      	lsls	r2, r3, #4
 8005552:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005556:	4413      	add	r3, r2
 8005558:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800555c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005560:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	b29b      	uxth	r3, r3
 8005568:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800556c:	b29a      	uxth	r2, r3
 800556e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005572:	801a      	strh	r2, [r3, #0]
 8005574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005578:	2b3e      	cmp	r3, #62	; 0x3e
 800557a:	d923      	bls.n	80055c4 <USB_EPStartXfer+0x1628>
 800557c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	2b00      	cmp	r3, #0
 8005590:	d104      	bne.n	800559c <USB_EPStartXfer+0x1600>
 8005592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005596:	3b01      	subs	r3, #1
 8005598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800559c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	029b      	lsls	r3, r3, #10
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	4313      	orrs	r3, r2
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	e05c      	b.n	800567e <USB_EPStartXfer+0x16e2>
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10c      	bne.n	80055e6 <USB_EPStartXfer+0x164a>
 80055cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055dc:	b29a      	uxth	r2, r3
 80055de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055e2:	801a      	strh	r2, [r3, #0]
 80055e4:	e04b      	b.n	800567e <USB_EPStartXfer+0x16e2>
 80055e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ea:	085b      	lsrs	r3, r3, #1
 80055ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d004      	beq.n	8005606 <USB_EPStartXfer+0x166a>
 80055fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005600:	3301      	adds	r3, #1
 8005602:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29a      	uxth	r2, r3
 800560e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005612:	b29b      	uxth	r3, r3
 8005614:	029b      	lsls	r3, r3, #10
 8005616:	b29b      	uxth	r3, r3
 8005618:	4313      	orrs	r3, r2
 800561a:	b29a      	uxth	r2, r3
 800561c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005620:	801a      	strh	r2, [r3, #0]
 8005622:	e02c      	b.n	800567e <USB_EPStartXfer+0x16e2>
 8005624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	785b      	ldrb	r3, [r3, #1]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d124      	bne.n	800567e <USB_EPStartXfer+0x16e2>
 8005634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005642:	b29b      	uxth	r3, r3
 8005644:	461a      	mov	r2, r3
 8005646:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800564a:	4413      	add	r3, r2
 800564c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	011a      	lsls	r2, r3, #4
 800565e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005662:	4413      	add	r3, r2
 8005664:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005668:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800566c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005670:	b29a      	uxth	r2, r3
 8005672:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005676:	801a      	strh	r2, [r3, #0]
 8005678:	e001      	b.n	800567e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e03a      	b.n	80056f4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800567e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005682:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800568c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80056a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80056ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80056b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80056b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80056c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	441a      	add	r2, r3
 80056da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80056de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d103      	bne.n	8005718 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2280      	movs	r2, #128	; 0x80
 8005714:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr

08005738 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005746:	b29b      	uxth	r3, r3
 8005748:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800574a:	68fb      	ldr	r3, [r7, #12]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr

08005756 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005756:	b480      	push	{r7}
 8005758:	b08b      	sub	sp, #44	; 0x2c
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	4611      	mov	r1, r2
 8005762:	461a      	mov	r2, r3
 8005764:	460b      	mov	r3, r1
 8005766:	80fb      	strh	r3, [r7, #6]
 8005768:	4613      	mov	r3, r2
 800576a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800576c:	88bb      	ldrh	r3, [r7, #4]
 800576e:	3301      	adds	r3, #1
 8005770:	085b      	lsrs	r3, r3, #1
 8005772:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800577c:	88fb      	ldrh	r3, [r7, #6]
 800577e:	005a      	lsls	r2, r3, #1
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005788:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
 800578e:	e01e      	b.n	80057ce <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3301      	adds	r3, #1
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	b21a      	sxth	r2, r3
 80057a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	b21b      	sxth	r3, r3
 80057a8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	8a7a      	ldrh	r2, [r7, #18]
 80057ae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	3302      	adds	r3, #2
 80057b4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	3302      	adds	r3, #2
 80057ba:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	3301      	adds	r3, #1
 80057c0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3301      	adds	r3, #1
 80057c6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	3b01      	subs	r3, #1
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1dd      	bne.n	8005790 <USB_WritePMA+0x3a>
  }
}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop
 80057d8:	372c      	adds	r7, #44	; 0x2c
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr

080057e0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b08b      	sub	sp, #44	; 0x2c
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	4611      	mov	r1, r2
 80057ec:	461a      	mov	r2, r3
 80057ee:	460b      	mov	r3, r1
 80057f0:	80fb      	strh	r3, [r7, #6]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80057f6:	88bb      	ldrh	r3, [r7, #4]
 80057f8:	085b      	lsrs	r3, r3, #1
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	005a      	lsls	r2, r3, #1
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005812:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
 8005818:	e01b      	b.n	8005852 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	3302      	adds	r3, #2
 8005826:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	b2da      	uxtb	r2, r3
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	3301      	adds	r3, #1
 8005834:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	0a1b      	lsrs	r3, r3, #8
 800583a:	b2da      	uxtb	r2, r3
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	3301      	adds	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	3302      	adds	r3, #2
 800584a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	3b01      	subs	r3, #1
 8005850:	627b      	str	r3, [r7, #36]	; 0x24
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e0      	bne.n	800581a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005858:	88bb      	ldrh	r3, [r7, #4]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	b2da      	uxtb	r2, r3
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	701a      	strb	r2, [r3, #0]
  }
}
 8005874:	bf00      	nop
 8005876:	372c      	adds	r7, #44	; 0x2c
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr

0800587e <AdcFilter_init>:
#include <string.h>


int
AdcFilter_init (adc_filter_t *hand)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b084      	sub	sp, #16
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
    for (int i = 0; ADC_INPUT_TOTAL > i; ++i)
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	e016      	b.n	80058ba <AdcFilter_init+0x3c>
        {
#ifdef RC_FILTER
            rc_filter_init (&hand->pre_filter[i], ADC_RC_FILTER_R,
                            ADC_RC_FILTER_C, ADC_DRV_SAMPLE_PERIOD);
#else
            ema_filter_init (&hand->pre_filter[i], ADC_EMA_ROUNDING_BIT);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	4413      	add	r3, r2
 8005894:	2105      	movs	r1, #5
 8005896:	4618      	mov	r0, r3
 8005898:	f005 fb4a 	bl	800af30 <ema_filter_init>
#endif
            hysteresis_init (&hand->final_filter[i],
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4613      	mov	r3, r2
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	4413      	add	r3, r2
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	3310      	adds	r3, #16
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	4413      	add	r3, r2
 80058ac:	2102      	movs	r1, #2
 80058ae:	4618      	mov	r0, r3
 80058b0:	f005 fb7a 	bl	800afa8 <hysteresis_init>
    for (int i = 0; ADC_INPUT_TOTAL > i; ++i)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3301      	adds	r3, #1
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	dde5      	ble.n	800588c <AdcFilter_init+0xe>
                             ADC_HYSTERESIS_BIT_THRESHOLD);
        }
    return 1;
 80058c0:	2301      	movs	r3, #1
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <AdcFilter_update>:


int AdcFilter_update(adc_filter_t *hand, const uint16_t *input, uint16_t *output, uint16_t len)
{
 80058ca:	b590      	push	{r4, r7, lr}
 80058cc:	b087      	sub	sp, #28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
 80058d6:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < len; ++i)
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	e028      	b.n	8005930 <AdcFilter_update+0x66>
    {
        uint16_t pre_filtered = input[i];
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	4413      	add	r3, r2
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	827b      	strh	r3, [r7, #18]

#ifdef RC_FILTER
        pre_filtered = rc_filter_update(&hand->pre_filter[i], input[i]);
#else
        pre_filtered = ema_filter_update(&hand->pre_filter[i], input[i]);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	18d0      	adds	r0, r2, r3
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	4413      	add	r3, r2
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	4619      	mov	r1, r3
 80058fe:	f005 fb32 	bl	800af66 <ema_filter_update>
 8005902:	4603      	mov	r3, r0
 8005904:	827b      	strh	r3, [r7, #18]
#endif

        output[i] = hysteresis_update(&hand->final_filter[i], pre_filtered);
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4613      	mov	r3, r2
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	4413      	add	r3, r2
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	3310      	adds	r3, #16
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	18d0      	adds	r0, r2, r3
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	18d4      	adds	r4, r2, r3
 800591e:	8a7b      	ldrh	r3, [r7, #18]
 8005920:	4619      	mov	r1, r3
 8005922:	f005 fb5a 	bl	800afda <hysteresis_update>
 8005926:	4603      	mov	r3, r0
 8005928:	8023      	strh	r3, [r4, #0]
    for (int i = 0; i < len; ++i)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	3301      	adds	r3, #1
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	887b      	ldrh	r3, [r7, #2]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	429a      	cmp	r2, r3
 8005936:	dbd2      	blt.n	80058de <AdcFilter_update+0x14>
    }
    return 1;
 8005938:	2301      	movs	r3, #1
}
 800593a:	4618      	mov	r0, r3
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	bd90      	pop	{r4, r7, pc}
	...

08005944 <tud_descriptor_device_cb>:

  .bNumConfigurations = 0x01
};

uint8_t const* tud_descriptor_device_cb(void)
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
  return (uint8_t const*) &desc_device;
 8005948:	4b02      	ldr	r3, [pc, #8]	; (8005954 <tud_descriptor_device_cb+0x10>)
}
 800594a:	4618      	mov	r0, r3
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	0800b15c 	.word	0x0800b15c

08005958 <tud_hid_descriptor_report_cb>:
{
  TUD_HID_REPORT_DESC_SIMPLE_MOUSE()
};

uint8_t const* tud_hid_descriptor_report_cb(uint8_t instance)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 8005962:	4b03      	ldr	r3, [pc, #12]	; (8005970 <tud_hid_descriptor_report_cb+0x18>)
}
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	bc80      	pop	{r7}
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	0800b170 	.word	0x0800b170

08005974 <tud_descriptor_configuration_cb>:
  TUD_HID_DESCRIPTOR(ITF_NUM_HID, 0, HID_ITF_PROTOCOL_MOUSE,
                     sizeof(desc_hid_report), EPNUM_HID, CFG_TUD_HID_EP_BUFSIZE, 5)
};

uint8_t const* tud_descriptor_configuration_cb(uint8_t index)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return desc_configuration;
 800597e:	4b03      	ldr	r3, [pc, #12]	; (800598c <tud_descriptor_configuration_cb+0x18>)
}
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	0800b1a4 	.word	0x0800b1a4

08005990 <tud_descriptor_string_cb>:
};

static uint16_t _desc_str[32];

uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	4603      	mov	r3, r0
 8005998:	460a      	mov	r2, r1
 800599a:	71fb      	strb	r3, [r7, #7]
 800599c:	4613      	mov	r3, r2
 800599e:	80bb      	strh	r3, [r7, #4]
  (void) langid;
  uint8_t chr_count;

  if (index == 0)
 80059a0:	79fb      	ldrb	r3, [r7, #7]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d108      	bne.n	80059b8 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 80059a6:	4b21      	ldr	r3, [pc, #132]	; (8005a2c <tud_descriptor_string_cb+0x9c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <tud_descriptor_string_cb+0xa0>)
 80059b0:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 80059b2:	2301      	movs	r3, #1
 80059b4:	73fb      	strb	r3, [r7, #15]
 80059b6:	e027      	b.n	8005a08 <tud_descriptor_string_cb+0x78>
  }
  else
  {
    if (index >= sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) return NULL;
 80059b8:	79fb      	ldrb	r3, [r7, #7]
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d901      	bls.n	80059c2 <tud_descriptor_string_cb+0x32>
 80059be:	2300      	movs	r3, #0
 80059c0:	e02f      	b.n	8005a22 <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 80059c2:	79fb      	ldrb	r3, [r7, #7]
 80059c4:	4a19      	ldr	r2, [pc, #100]	; (8005a2c <tud_descriptor_string_cb+0x9c>)
 80059c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ca:	60bb      	str	r3, [r7, #8]
    chr_count = strlen(str);
 80059cc:	68b8      	ldr	r0, [r7, #8]
 80059ce:	f7fa fbbd 	bl	800014c <strlen>
 80059d2:	4603      	mov	r3, r0
 80059d4:	73fb      	strb	r3, [r7, #15]
    if (chr_count > 31) chr_count = 31;
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	2b1f      	cmp	r3, #31
 80059da:	d901      	bls.n	80059e0 <tud_descriptor_string_cb+0x50>
 80059dc:	231f      	movs	r3, #31
 80059de:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < chr_count; i++)
 80059e0:	2300      	movs	r3, #0
 80059e2:	73bb      	strb	r3, [r7, #14]
 80059e4:	e00c      	b.n	8005a00 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 80059e6:	7bbb      	ldrb	r3, [r7, #14]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	4413      	add	r3, r2
 80059ec:	781a      	ldrb	r2, [r3, #0]
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	3301      	adds	r3, #1
 80059f2:	b291      	uxth	r1, r2
 80059f4:	4a0e      	ldr	r2, [pc, #56]	; (8005a30 <tud_descriptor_string_cb+0xa0>)
 80059f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < chr_count; i++)
 80059fa:	7bbb      	ldrb	r3, [r7, #14]
 80059fc:	3301      	adds	r3, #1
 80059fe:	73bb      	strb	r3, [r7, #14]
 8005a00:	7bba      	ldrb	r2, [r7, #14]
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d3ee      	bcc.n	80059e6 <tud_descriptor_string_cb+0x56>
    }
  }

  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	b21b      	sxth	r3, r3
 8005a14:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005a18:	b21b      	sxth	r3, r3
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	4b04      	ldr	r3, [pc, #16]	; (8005a30 <tud_descriptor_string_cb+0xa0>)
 8005a1e:	801a      	strh	r2, [r3, #0]
  return _desc_str;
 8005a20:	4b03      	ldr	r3, [pc, #12]	; (8005a30 <tud_descriptor_string_cb+0xa0>)
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000044 	.word	0x20000044
 8005a30:	2000041c 	.word	0x2000041c

08005a34 <tud_hid_get_report_cb>:
// HID Callbacks (optional for mouse)
//--------------------------------------------------------------------+
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id,
                               hid_report_type_t report_type,
                               uint8_t* buffer, uint16_t reqlen)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	71fb      	strb	r3, [r7, #7]
 8005a40:	460b      	mov	r3, r1
 8005a42:	71bb      	strb	r3, [r7, #6]
 8005a44:	4613      	mov	r3, r2
 8005a46:	717b      	strb	r3, [r7, #5]
  (void) instance; (void) report_id; (void) report_type;
  (void) buffer;   (void) reqlen;
  return 0;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr

08005a54 <tud_hid_set_report_cb>:

void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id,
                           hid_report_type_t report_type,
                           uint8_t const* buffer, uint16_t bufsize)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	71fb      	strb	r3, [r7, #7]
 8005a60:	460b      	mov	r3, r1
 8005a62:	71bb      	strb	r3, [r7, #6]
 8005a64:	4613      	mov	r3, r2
 8005a66:	717b      	strb	r3, [r7, #5]
  (void) instance; (void) report_id; (void) report_type;
  (void) buffer;   (void) bufsize;
  // Not used for mouse
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr

08005a72 <AdcDrv_init>:
int AdcDrv_hal_start (const adc_drv_t *hand);
int AdcDrv_hal_stop (const adc_drv_t *hand);

int
AdcDrv_init (adc_drv_t *hand, ADC_DRV_HARDWARE type, adc_iqr_handler func, void *cb_arg)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b086      	sub	sp, #24
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	603b      	str	r3, [r7, #0]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	72fb      	strb	r3, [r7, #11]
    int res = AdcDrv_register (hand, type);
 8005a82:	7afb      	ldrb	r3, [r7, #11]
 8005a84:	4619      	mov	r1, r3
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f840 	bl	8005b0c <AdcDrv_register>
 8005a8c:	6178      	str	r0, [r7, #20]
    if (res < 0)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	da01      	bge.n	8005a98 <AdcDrv_init+0x26>
    {
        return 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	e011      	b.n	8005abc <AdcDrv_init+0x4a>
    }
    hand->cb = func;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	605a      	str	r2, [r3, #4]
    hand->cb_arg = cb_arg;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	609a      	str	r2, [r3, #8]
    memset (hand->raw_data, 0U,
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f103 000c 	add.w	r0, r3, #12
            ((ADC_HandleTypeDef *) hand->hadc)->Init.NbrOfConversion
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
                * sizeof (uint16_t));
 8005ab0:	005b      	lsls	r3, r3, #1
    memset (hand->raw_data, 0U,
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	f005 fabd 	bl	800b034 <memset>
    return 1;
 8005aba:	2301      	movs	r3, #1
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <AdcDrv_start>:

int
AdcDrv_start (const adc_drv_t *hand)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
    return AdcDrv_hal_start (hand);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f84d 	bl	8005b6c <AdcDrv_hal_start>
 8005ad2:	4603      	mov	r3, r0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <AdcDrv_get_result>:
    return AdcDrv_hal_stop (hand);
}

uint16_t
AdcDrv_get_result (const adc_drv_t *hand, uint16_t *data)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
    memcpy (data, hand->raw_data,
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f103 010c 	add.w	r1, r3, #12
            ((ADC_HandleTypeDef *) hand->hadc)->Init.NbrOfConversion
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
                * sizeof (uint16_t));
 8005af2:	005b      	lsls	r3, r3, #1
    memcpy (data, hand->raw_data,
 8005af4:	461a      	mov	r2, r3
 8005af6:	6838      	ldr	r0, [r7, #0]
 8005af8:	f005 fac8 	bl	800b08c <memcpy>
    return ((ADC_HandleTypeDef *) hand->hadc)->Init.NbrOfConversion;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	b29b      	uxth	r3, r3
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <AdcDrv_register>:

int
AdcDrv_register (adc_drv_t *hand, ADC_DRV_HARDWARE type)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	460b      	mov	r3, r1
 8005b16:	70fb      	strb	r3, [r7, #3]
    int result = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]

    switch (type)
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d013      	beq.n	8005b4a <AdcDrv_register+0x3e>
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	dc13      	bgt.n	8005b4e <AdcDrv_register+0x42>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <AdcDrv_register+0x24>
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d011      	beq.n	8005b52 <AdcDrv_register+0x46>
    	break;
    case ADC_DRV_ADC3:
    	break;
    case ADC_DRV_TOTAL:
    default:
        break;
 8005b2e:	e00e      	b.n	8005b4e <AdcDrv_register+0x42>
        if (registerd_drv_g[ADC_DRV_ADC1] == NULL)
 8005b30:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <AdcDrv_register+0x58>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10e      	bne.n	8005b56 <AdcDrv_register+0x4a>
            hand->hadc = (void *) &hadc1;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a0b      	ldr	r2, [pc, #44]	; (8005b68 <AdcDrv_register+0x5c>)
 8005b3c:	601a      	str	r2, [r3, #0]
            registerd_drv_g[ADC_DRV_ADC1] = hand;
 8005b3e:	4a09      	ldr	r2, [pc, #36]	; (8005b64 <AdcDrv_register+0x58>)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6013      	str	r3, [r2, #0]
            result = 1;
 8005b44:	2301      	movs	r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
        break;
 8005b48:	e005      	b.n	8005b56 <AdcDrv_register+0x4a>
    	break;
 8005b4a:	bf00      	nop
 8005b4c:	e004      	b.n	8005b58 <AdcDrv_register+0x4c>
        break;
 8005b4e:	bf00      	nop
 8005b50:	e002      	b.n	8005b58 <AdcDrv_register+0x4c>
    	break;
 8005b52:	bf00      	nop
 8005b54:	e000      	b.n	8005b58 <AdcDrv_register+0x4c>
        break;
 8005b56:	bf00      	nop
    }
    return result;
 8005b58:	68fb      	ldr	r3, [r7, #12]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr
 8005b64:	2000045c 	.word	0x2000045c
 8005b68:	200000c8 	.word	0x200000c8

08005b6c <AdcDrv_hal_start>:



int
AdcDrv_hal_start (const adc_drv_t *hand)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]


    if (HAL_ADC_Start_DMA ((ADC_HandleTypeDef *) hand->hadc,
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6818      	ldr	r0, [r3, #0]
                           (uint32_t *) hand->raw_data,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f103 010c 	add.w	r1, r3, #12
                           ((ADC_HandleTypeDef *) hand->hadc)->Init.NbrOfConversion) != HAL_OK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
    if (HAL_ADC_Start_DMA ((ADC_HandleTypeDef *) hand->hadc,
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	461a      	mov	r2, r3
 8005b86:	f7fb fa3f 	bl	8001008 <HAL_ADC_Start_DMA>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <AdcDrv_hal_start+0x28>
    {
        return 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e000      	b.n	8005b96 <AdcDrv_hal_start+0x2a>
    }

    return 1;
 8005b94:	2301      	movs	r3, #1
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <HAL_ADC_ConvCpltCallback>:
    }
    return 1;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a07      	ldr	r2, [pc, #28]	; (8005bcc <HAL_ADC_ConvCpltCallback+0x2c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d107      	bne.n	8005bc2 <HAL_ADC_ConvCpltCallback+0x22>
    {

            registerd_drv_g[ADC_DRV_ADC1]->cb(registerd_drv_g[ADC_DRV_ADC1]->cb_arg);
 8005bb2:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <HAL_ADC_ConvCpltCallback+0x30>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	4a05      	ldr	r2, [pc, #20]	; (8005bd0 <HAL_ADC_ConvCpltCallback+0x30>)
 8005bba:	6812      	ldr	r2, [r2, #0]
 8005bbc:	6892      	ldr	r2, [r2, #8]
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	4798      	blx	r3
    }
}
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40012400 	.word	0x40012400
 8005bd0:	2000045c 	.word	0x2000045c

08005bd4 <tud_hid_set_protocol_cb>:
}

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	460a      	mov	r2, r1
 8005bde:	71fb      	strb	r3, [r7, #7]
 8005be0:	4613      	mov	r3, r2
 8005be2:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) protocol;
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr

08005bee <tud_hid_set_idle_cb>:

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	460a      	mov	r2, r1
 8005bf8:	71fb      	strb	r3, [r7, #7]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 8005bfe:	2301      	movs	r3, #1
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr

08005c0a <tud_hid_report_complete_cb>:

TU_ATTR_WEAK void tud_hid_report_complete_cb(uint8_t instance, uint8_t const* report, uint16_t len) {
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	4603      	mov	r3, r0
 8005c12:	6039      	str	r1, [r7, #0]
 8005c14:	71fb      	strb	r3, [r7, #7]
 8005c16:	4613      	mov	r3, r2
 8005c18:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report;
  (void) len;
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr

08005c24 <tud_hid_report_failed_cb>:

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	603a      	str	r2, [r7, #0]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	4603      	mov	r3, r0
 8005c30:	71fb      	strb	r3, [r7, #7]
 8005c32:	460b      	mov	r3, r1
 8005c34:	71bb      	strb	r3, [r7, #6]
 8005c36:	4613      	mov	r3, r2
 8005c38:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr

08005c44 <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 8005c52:	79fa      	ldrb	r2, [r7, #7]
 8005c54:	491b      	ldr	r1, [pc, #108]	; (8005cc4 <tud_hid_n_ready+0x80>)
 8005c56:	4613      	mov	r3, r2
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	3301      	adds	r3, #1
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	73bb      	strb	r3, [r7, #14]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8005c66:	f000 ff71 	bl	8006b4c <tud_mounted>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d009      	beq.n	8005c84 <tud_hid_n_ready+0x40>
 8005c70:	f000 ff7c 	bl	8006b6c <tud_suspended>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f083 0301 	eor.w	r3, r3, #1
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <tud_hid_n_ready+0x40>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <tud_hid_n_ready+0x42>
 8005c84:	2300      	movs	r3, #0
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d010      	beq.n	8005cb2 <tud_hid_n_ready+0x6e>
 8005c90:	7bbb      	ldrb	r3, [r7, #14]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00d      	beq.n	8005cb2 <tud_hid_n_ready+0x6e>
 8005c96:	7bba      	ldrb	r2, [r7, #14]
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f002 faa3 	bl	80081e8 <usbd_edpt_busy>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	f083 0301 	eor.w	r3, r3, #1
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <tud_hid_n_ready+0x6e>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <tud_hid_n_ready+0x70>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	b2db      	uxtb	r3, r3
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000468 	.word	0x20000468

08005cc8 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08e      	sub	sp, #56	; 0x38
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	603a      	str	r2, [r7, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	71fb      	strb	r3, [r7, #7]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	71bb      	strb	r3, [r7, #6]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 8005cde:	79fb      	ldrb	r3, [r7, #7]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <tud_hid_n_report+0x20>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e06e      	b.n	8005dc6 <tud_hid_n_report+0xfe>
  const uint8_t rhport = 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 8005cee:	79fa      	ldrb	r2, [r7, #7]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4a35      	ldr	r2, [pc, #212]	; (8005dd0 <tud_hid_n_report+0x108>)
 8005cfa:	4413      	add	r3, r2
 8005cfc:	633b      	str	r3, [r7, #48]	; 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8005cfe:	79fa      	ldrb	r2, [r7, #7]
 8005d00:	4613      	mov	r3, r2
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	4413      	add	r3, r2
 8005d06:	019b      	lsls	r3, r3, #6
 8005d08:	4a32      	ldr	r2, [pc, #200]	; (8005dd4 <tud_hid_n_report+0x10c>)
 8005d0a:	4413      	add	r3, r2
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	785a      	ldrb	r2, [r3, #1]
 8005d12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d16:	4611      	mov	r1, r2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f002 f9c5 	bl	80080a8 <usbd_edpt_claim>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	f083 0301 	eor.w	r3, r3, #1
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <tud_hid_n_report+0x66>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e04b      	b.n	8005dc6 <tud_hid_n_report+0xfe>

  // prepare data
  if (report_id) {
 8005d2e:	79bb      	ldrb	r3, [r7, #6]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d022      	beq.n	8005d7a <tud_hid_n_report+0xb2>
    p_epbuf->epin[0] = report_id;
 8005d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d36:	79ba      	ldrb	r2, [r7, #6]
 8005d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 8005d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3e:	3340      	adds	r3, #64	; 0x40
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	88bb      	ldrh	r3, [r7, #4]
 8005d44:	62ba      	str	r2, [r7, #40]	; 0x28
 8005d46:	223f      	movs	r2, #63	; 0x3f
 8005d48:	627a      	str	r2, [r7, #36]	; 0x24
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	623a      	str	r2, [r7, #32]
 8005d4e:	61fb      	str	r3, [r7, #28]
}

// This is a backport of memcpy_s from c11
TU_ATTR_ALWAYS_INLINE static inline int tu_memcpy_s(void *dest, size_t destsz, const void *src, size_t count) {
  // TODO may check if desst and src is not NULL
  if ( count > destsz ) {
 8005d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d202      	bcs.n	8005d5e <tud_hid_n_report+0x96>
    return -1;
 8005d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d5c:	e005      	b.n	8005d6a <tud_hid_n_report+0xa2>
  }
  memcpy(dest, src, count);
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	6a39      	ldr	r1, [r7, #32]
 8005d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d64:	f005 f992 	bl	800b08c <memcpy>
  return 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <tud_hid_n_report+0xaa>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	e029      	b.n	8005dc6 <tud_hid_n_report+0xfe>
    len++;
 8005d72:	88bb      	ldrh	r3, [r7, #4]
 8005d74:	3301      	adds	r3, #1
 8005d76:	80bb      	strh	r3, [r7, #4]
 8005d78:	e01a      	b.n	8005db0 <tud_hid_n_report+0xe8>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005d80:	88bb      	ldrh	r3, [r7, #4]
 8005d82:	61ba      	str	r2, [r7, #24]
 8005d84:	2240      	movs	r2, #64	; 0x40
 8005d86:	617a      	str	r2, [r7, #20]
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	613a      	str	r2, [r7, #16]
 8005d8c:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d202      	bcs.n	8005d9c <tud_hid_n_report+0xd4>
    return -1;
 8005d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d9a:	e005      	b.n	8005da8 <tud_hid_n_report+0xe0>
  memcpy(dest, src, count);
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	6939      	ldr	r1, [r7, #16]
 8005da0:	69b8      	ldr	r0, [r7, #24]
 8005da2:	f005 f973 	bl	800b08c <memcpy>
  return 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <tud_hid_n_report+0xe8>
 8005dac:	2300      	movs	r3, #0
 8005dae:	e00a      	b.n	8005dc6 <tud_hid_n_report+0xfe>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 8005db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db2:	7859      	ldrb	r1, [r3, #1]
 8005db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005dba:	88bb      	ldrh	r3, [r7, #4]
 8005dbc:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8005dc0:	f002 f99c 	bl	80080fc <usbd_edpt_xfer>
 8005dc4:	4603      	mov	r3, r0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3738      	adds	r7, #56	; 0x38
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000468 	.word	0x20000468
 8005dd4:	20000474 	.word	0x20000474

08005dd8 <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  hidd_reset(0);
 8005ddc:	2000      	movs	r0, #0
 8005dde:	f000 f809 	bl	8005df4 <hidd_reset>
}
 8005de2:	bf00      	nop
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <hidd_deinit>:

bool hidd_deinit(void) {
 8005de6:	b480      	push	{r7}
 8005de8:	af00      	add	r7, sp, #0
  return true;
 8005dea:	2301      	movs	r3, #1
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr

08005df4 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 8005dfe:	220c      	movs	r2, #12
 8005e00:	2100      	movs	r1, #0
 8005e02:	4803      	ldr	r0, [pc, #12]	; (8005e10 <hidd_reset+0x1c>)
 8005e04:	f005 f916 	bl	800b034 <memset>
}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	20000468 	.word	0x20000468

08005e14 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b094      	sub	sp, #80	; 0x50
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	6039      	str	r1, [r7, #0]
 8005e1e:	71fb      	strb	r3, [r7, #7]
 8005e20:	4613      	mov	r3, r2
 8005e22:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	795b      	ldrb	r3, [r3, #5]
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d001      	beq.n	8005e30 <hidd_open+0x1c>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e0cf      	b.n	8005fd0 <hidd_open+0x1bc>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	791b      	ldrb	r3, [r3, #4]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	461a      	mov	r2, r3
 8005e38:	00d2      	lsls	r2, r2, #3
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8005e3e:	3312      	adds	r3, #18
 8005e40:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 8005e44:	88ba      	ldrh	r2, [r7, #4]
 8005e46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d20a      	bcs.n	8005e64 <hidd_open+0x50>
 8005e4e:	4b62      	ldr	r3, [pc, #392]	; (8005fd8 <hidd_open+0x1c4>)
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d000      	beq.n	8005e60 <hidd_open+0x4c>
 8005e5e:	be00      	bkpt	0x0000
 8005e60:	2300      	movs	r3, #0
 8005e62:	e0b5      	b.n	8005fd0 <hidd_open+0x1bc>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8005e64:	2300      	movs	r3, #0
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6a:	e011      	b.n	8005e90 <hidd_open+0x7c>
    p_hid = &_hidd_itf[hid_id];
 8005e6c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8005e70:	4613      	mov	r3, r2
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4a58      	ldr	r2, [pc, #352]	; (8005fdc <hidd_open+0x1c8>)
 8005e7a:	4413      	add	r3, r2
 8005e7c:	647b      	str	r3, [r7, #68]	; 0x44
    if (p_hid->ep_in == 0) {
 8005e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e80:	785b      	ldrb	r3, [r3, #1]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <hidd_open+0x86>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 8005e86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0e9      	beq.n	8005e6c <hidd_open+0x58>
 8005e98:	e000      	b.n	8005e9c <hidd_open+0x88>
      break;
 8005e9a:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 8005e9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <hidd_open+0xa6>
 8005ea4:	4b4c      	ldr	r3, [pc, #304]	; (8005fd8 <hidd_open+0x1c4>)
 8005ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d000      	beq.n	8005eb6 <hidd_open+0xa2>
 8005eb4:	be00      	bkpt	0x0000
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e08a      	b.n	8005fd0 <hidd_open+0x1bc>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 8005eba:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	4413      	add	r3, r2
 8005ec4:	019b      	lsls	r3, r3, #6
 8005ec6:	4a46      	ldr	r2, [pc, #280]	; (8005fe0 <hidd_open+0x1cc>)
 8005ec8:	4413      	add	r3, r2
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	61fb      	str	r3, [r7, #28]
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8005ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	3301      	adds	r3, #1
 8005eec:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 8005eee:	2b21      	cmp	r3, #33	; 0x21
 8005ef0:	d00a      	beq.n	8005f08 <hidd_open+0xf4>
 8005ef2:	4b39      	ldr	r3, [pc, #228]	; (8005fd8 <hidd_open+0x1c4>)
 8005ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d000      	beq.n	8005f04 <hidd_open+0xf0>
 8005f02:	be00      	bkpt	0x0000
 8005f04:	2300      	movs	r3, #0
 8005f06:	e063      	b.n	8005fd0 <hidd_open+0x1bc>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 8005f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f0c:	609a      	str	r2, [r3, #8]
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f10:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8005f20:	63bb      	str	r3, [r7, #56]	; 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	7919      	ldrb	r1, [r3, #4]
 8005f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f28:	3302      	adds	r3, #2
 8005f2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f2c:	3201      	adds	r2, #1
 8005f2e:	79f8      	ldrb	r0, [r7, #7]
 8005f30:	9201      	str	r2, [sp, #4]
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	2303      	movs	r3, #3
 8005f36:	460a      	mov	r2, r1
 8005f38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f3a:	f002 f807 	bl	8007f4c <usbd_open_edpt_pair>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f083 0301 	eor.w	r3, r3, #1
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <hidd_open+0x14c>
 8005f4a:	4b23      	ldr	r3, [pc, #140]	; (8005fd8 <hidd_open+0x1c4>)
 8005f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d000      	beq.n	8005f5c <hidd_open+0x148>
 8005f5a:	be00      	bkpt	0x0000
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e037      	b.n	8005fd0 <hidd_open+0x1bc>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	799b      	ldrb	r3, [r3, #6]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d103      	bne.n	8005f70 <hidd_open+0x15c>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	79da      	ldrb	r2, [r3, #7]
 8005f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f6e:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 8005f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f72:	2201      	movs	r2, #1
 8005f74:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	789a      	ldrb	r2, [r3, #2]
 8005f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f7c:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 8005f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	3307      	adds	r3, #7
 8005f84:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	881a      	ldrh	r2, [r3, #0]
 8005f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f8c:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 8005f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f90:	789b      	ldrb	r3, [r3, #2]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01a      	beq.n	8005fcc <hidd_open+0x1b8>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 8005f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f98:	7899      	ldrb	r1, [r3, #2]
 8005f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8005fa0:	79f8      	ldrb	r0, [r7, #7]
 8005fa2:	2340      	movs	r3, #64	; 0x40
 8005fa4:	f002 f8aa 	bl	80080fc <usbd_edpt_xfer>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f083 0301 	eor.w	r3, r3, #1
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <hidd_open+0x1b8>
 8005fb4:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <hidd_open+0x1c4>)
 8005fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d000      	beq.n	8005fc6 <hidd_open+0x1b2>
 8005fc4:	be00      	bkpt	0x0000
 8005fc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fca:	e001      	b.n	8005fd0 <hidd_open+0x1bc>
  }

  return drv_len;
 8005fcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3748      	adds	r7, #72	; 0x48
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	e000edf0 	.word	0xe000edf0
 8005fdc:	20000468 	.word	0x20000468
 8005fe0:	20000474 	.word	0x20000474

08005fe4 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b094      	sub	sp, #80	; 0x50
 8005fe8:	af02      	add	r7, sp, #8
 8005fea:	4603      	mov	r3, r0
 8005fec:	603a      	str	r2, [r7, #0]
 8005fee:	71fb      	strb	r3, [r7, #7]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	f003 031f 	and.w	r3, r3, #31
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d001      	beq.n	8006006 <hidd_control_xfer_cb+0x22>
 8006002:	2300      	movs	r3, #0
 8006004:	e1d6      	b.n	80063b4 <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	889b      	ldrh	r3, [r3, #4]
 800600a:	b29b      	uxth	r3, r3
 800600c:	b2db      	uxtb	r3, r3
 800600e:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8006010:	2300      	movs	r3, #0
 8006012:	77bb      	strb	r3, [r7, #30]
 8006014:	e00f      	b.n	8006036 <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 8006016:	7fba      	ldrb	r2, [r7, #30]
 8006018:	498f      	ldr	r1, [pc, #572]	; (8006258 <hidd_control_xfer_cb+0x274>)
 800601a:	4613      	mov	r3, r2
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	440b      	add	r3, r1
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	7ffa      	ldrb	r2, [r7, #31]
 8006028:	429a      	cmp	r2, r3
 800602a:	d101      	bne.n	8006030 <hidd_control_xfer_cb+0x4c>
      return i;
 800602c:	7fbb      	ldrb	r3, [r7, #30]
 800602e:	e006      	b.n	800603e <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8006030:	7fbb      	ldrb	r3, [r7, #30]
 8006032:	3301      	adds	r3, #1
 8006034:	77bb      	strb	r3, [r7, #30]
 8006036:	7fbb      	ldrb	r3, [r7, #30]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0ec      	beq.n	8006016 <hidd_control_xfer_cb+0x32>
  return 0xFF;
 800603c:	23ff      	movs	r3, #255	; 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 800603e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8006042:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <hidd_control_xfer_cb+0x6a>
 800604a:	2300      	movs	r3, #0
 800604c:	e1b2      	b.n	80063b4 <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 800604e:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8006052:	4613      	mov	r3, r2
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4a7f      	ldr	r2, [pc, #508]	; (8006258 <hidd_control_xfer_cb+0x274>)
 800605c:	4413      	add	r3, r2
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8006060:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8006064:	4613      	mov	r3, r2
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	4413      	add	r3, r2
 800606a:	019b      	lsls	r3, r3, #6
 800606c:	4a7b      	ldr	r2, [pc, #492]	; (800625c <hidd_control_xfer_cb+0x278>)
 800606e:	4413      	add	r3, r2
 8006070:	633b      	str	r3, [r7, #48]	; 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d146      	bne.n	800610e <hidd_control_xfer_cb+0x12a>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8006080:	79bb      	ldrb	r3, [r7, #6]
 8006082:	2b01      	cmp	r3, #1
 8006084:	f040 8195 	bne.w	80063b2 <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	885b      	ldrh	r3, [r3, #2]
 800608c:	b29b      	uxth	r3, r3
 800608e:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8006090:	8bbb      	ldrh	r3, [r7, #28]
 8006092:	0a1b      	lsrs	r3, r3, #8
 8006094:	b29b      	uxth	r3, r3
 8006096:	b2db      	uxtb	r3, r3
 8006098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	2b06      	cmp	r3, #6
 80060a2:	d11c      	bne.n	80060de <hidd_control_xfer_cb+0xfa>
 80060a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060a8:	2b21      	cmp	r3, #33	; 0x21
 80060aa:	d118      	bne.n	80060de <hidd_control_xfer_cb+0xfa>
        TU_VERIFY(p_hid->hid_descriptor);
 80060ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <hidd_control_xfer_cb+0xd4>
 80060b4:	2300      	movs	r3, #0
 80060b6:	e17d      	b.n	80063b4 <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 80060b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	79f8      	ldrb	r0, [r7, #7]
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	f002 f9f0 	bl	80084ac <tud_control_xfer>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f083 0301 	eor.w	r3, r3, #1
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 816c 	beq.w	80063b2 <hidd_control_xfer_cb+0x3ce>
 80060da:	2300      	movs	r3, #0
 80060dc:	e16a      	b.n	80063b4 <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d111      	bne.n	800610a <hidd_control_xfer_cb+0x126>
 80060e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060ea:	2b22      	cmp	r3, #34	; 0x22
 80060ec:	d10d      	bne.n	800610a <hidd_control_xfer_cb+0x126>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 80060ee:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff fc30 	bl	8005958 <tud_hid_descriptor_report_cb>
 80060f8:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 80060fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fc:	889b      	ldrh	r3, [r3, #4]
 80060fe:	79f8      	ldrb	r0, [r7, #7]
 8006100:	6a3a      	ldr	r2, [r7, #32]
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	f002 f9d2 	bl	80084ac <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8006108:	e153      	b.n	80063b2 <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 800610a:	2300      	movs	r3, #0
 800610c:	e152      	b.n	80063b4 <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b20      	cmp	r3, #32
 800611a:	f040 813d 	bne.w	8006398 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	3b01      	subs	r3, #1
 8006124:	2b0a      	cmp	r3, #10
 8006126:	f200 8135 	bhi.w	8006394 <hidd_control_xfer_cb+0x3b0>
 800612a:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <hidd_control_xfer_cb+0x14c>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	0800615d 	.word	0x0800615d
 8006134:	08006333 	.word	0x08006333
 8006138:	08006349 	.word	0x08006349
 800613c:	08006395 	.word	0x08006395
 8006140:	08006395 	.word	0x08006395
 8006144:	08006395 	.word	0x08006395
 8006148:	08006395 	.word	0x08006395
 800614c:	08006395 	.word	0x08006395
 8006150:	08006233 	.word	0x08006233
 8006154:	080062ed 	.word	0x080062ed
 8006158:	0800635f 	.word	0x0800635f
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 800615c:	79bb      	ldrb	r3, [r7, #6]
 800615e:	2b01      	cmp	r3, #1
 8006160:	f040 811c 	bne.w	800639c <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	885b      	ldrh	r3, [r3, #2]
 8006168:	b29b      	uxth	r3, r3
 800616a:	82bb      	strh	r3, [r7, #20]
 800616c:	8abb      	ldrh	r3, [r7, #20]
 800616e:	0a1b      	lsrs	r3, r3, #8
 8006170:	b29b      	uxth	r3, r3
 8006172:	b2db      	uxtb	r3, r3
 8006174:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	885b      	ldrh	r3, [r3, #2]
 800617c:	b29b      	uxth	r3, r3
 800617e:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8006180:	8afb      	ldrh	r3, [r7, #22]
 8006182:	b2db      	uxtb	r3, r3
 8006184:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	647b      	str	r3, [r7, #68]	; 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	88db      	ldrh	r3, [r3, #6]
 8006190:	b29b      	uxth	r3, r3
 8006192:	837b      	strh	r3, [r7, #26]
 8006194:	2340      	movs	r3, #64	; 0x40
 8006196:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006198:	8b7a      	ldrh	r2, [r7, #26]
 800619a:	8b3b      	ldrh	r3, [r7, #24]
 800619c:	4293      	cmp	r3, r2
 800619e:	bf28      	it	cs
 80061a0:	4613      	movcs	r3, r2
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
          uint16_t xferlen = 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 80061ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d013      	beq.n	80061de <hidd_control_xfer_cb+0x1fa>
 80061b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d90f      	bls.n	80061de <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 80061be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	647a      	str	r2, [r7, #68]	; 0x44
 80061c4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80061c8:	701a      	strb	r2, [r3, #0]
            req_len--;
 80061ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80061ce:	3b01      	subs	r3, #1
 80061d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            xferlen++;
 80061d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80061d8:	3301      	adds	r3, #1
 80061da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 80061de:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80061e2:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80061e6:	f897 0039 	ldrb.w	r0, [r7, #57]	; 0x39
 80061ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f2:	f7ff fc1f 	bl	8005a34 <tud_hid_get_report_cb>
 80061f6:	4603      	mov	r3, r0
 80061f8:	461a      	mov	r2, r3
 80061fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80061fe:	4413      	add	r3, r2
 8006200:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          TU_ASSERT(xferlen > 0);
 8006204:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <hidd_control_xfer_cb+0x23e>
 800620c:	4b14      	ldr	r3, [pc, #80]	; (8006260 <hidd_control_xfer_cb+0x27c>)
 800620e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d000      	beq.n	800621e <hidd_control_xfer_cb+0x23a>
 800621c:	be00      	bkpt	0x0000
 800621e:	2300      	movs	r3, #0
 8006220:	e0c8      	b.n	80063b4 <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 8006222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006224:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006228:	79f8      	ldrb	r0, [r7, #7]
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	f002 f93e 	bl	80084ac <tud_control_xfer>
        }
        break;
 8006230:	e0b4      	b.n	800639c <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8006232:	79bb      	ldrb	r3, [r7, #6]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d115      	bne.n	8006264 <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	88db      	ldrh	r3, [r3, #6]
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b40      	cmp	r3, #64	; 0x40
 8006240:	d901      	bls.n	8006246 <hidd_control_xfer_cb+0x262>
 8006242:	2300      	movs	r3, #0
 8006244:	e0b6      	b.n	80063b4 <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 8006246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	88db      	ldrh	r3, [r3, #6]
 800624c:	b29b      	uxth	r3, r3
 800624e:	79f8      	ldrb	r0, [r7, #7]
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	f002 f92b 	bl	80084ac <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 8006256:	e0a3      	b.n	80063a0 <hidd_control_xfer_cb+0x3bc>
 8006258:	20000468 	.word	0x20000468
 800625c:	20000474 	.word	0x20000474
 8006260:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8006264:	79bb      	ldrb	r3, [r7, #6]
 8006266:	2b03      	cmp	r3, #3
 8006268:	f040 809a 	bne.w	80063a0 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	885b      	ldrh	r3, [r3, #2]
 8006270:	b29b      	uxth	r3, r3
 8006272:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8006274:	89bb      	ldrh	r3, [r7, #12]
 8006276:	0a1b      	lsrs	r3, r3, #8
 8006278:	b29b      	uxth	r3, r3
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	885b      	ldrh	r3, [r3, #2]
 8006284:	b29b      	uxth	r3, r3
 8006286:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8006288:	89fb      	ldrh	r3, [r7, #14]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	63fb      	str	r3, [r7, #60]	; 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	88db      	ldrh	r3, [r3, #6]
 8006298:	b29b      	uxth	r3, r3
 800629a:	827b      	strh	r3, [r7, #18]
 800629c:	2340      	movs	r3, #64	; 0x40
 800629e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80062a0:	8a7a      	ldrh	r2, [r7, #18]
 80062a2:	8a3b      	ldrh	r3, [r7, #16]
 80062a4:	4293      	cmp	r3, r2
 80062a6:	bf28      	it	cs
 80062a8:	4613      	movcs	r3, r2
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	877b      	strh	r3, [r7, #58]	; 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 80062ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00e      	beq.n	80062d4 <hidd_control_xfer_cb+0x2f0>
 80062b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d90b      	bls.n	80062d4 <hidd_control_xfer_cb+0x2f0>
 80062bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d105      	bne.n	80062d4 <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 80062c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ca:	3301      	adds	r3, #1
 80062cc:	63fb      	str	r3, [r7, #60]	; 0x3c
            report_len--;
 80062ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80062d0:	3b01      	subs	r3, #1
 80062d2:	877b      	strh	r3, [r7, #58]	; 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 80062d4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80062d8:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80062dc:	f897 0039 	ldrb.w	r0, [r7, #57]	; 0x39
 80062e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e6:	f7ff fbb5 	bl	8005a54 <tud_hid_set_report_cb>
        break;
 80062ea:	e059      	b.n	80063a0 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 80062ec:	79bb      	ldrb	r3, [r7, #6]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d158      	bne.n	80063a4 <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	885b      	ldrh	r3, [r3, #2]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80062fa:	897b      	ldrh	r3, [r7, #10]
 80062fc:	0a1b      	lsrs	r3, r3, #8
 80062fe:	b29b      	uxth	r3, r3
 8006300:	b2da      	uxtb	r2, r3
 8006302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006304:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 8006306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006308:	79da      	ldrb	r2, [r3, #7]
 800630a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff fc6c 	bl	8005bee <tud_hid_set_idle_cb>
 8006316:	4603      	mov	r3, r0
 8006318:	f083 0301 	eor.w	r3, r3, #1
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <hidd_control_xfer_cb+0x342>
 8006322:	2300      	movs	r3, #0
 8006324:	e046      	b.n	80063b4 <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f002 f84c 	bl	80083c8 <tud_control_status>
        }
        break;
 8006330:	e038      	b.n	80063a4 <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8006332:	79bb      	ldrb	r3, [r7, #6]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d137      	bne.n	80063a8 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8006338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633a:	1dda      	adds	r2, r3, #7
 800633c:	79f8      	ldrb	r0, [r7, #7]
 800633e:	2301      	movs	r3, #1
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	f002 f8b3 	bl	80084ac <tud_control_xfer>
        }
        break;
 8006346:	e02f      	b.n	80063a8 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8006348:	79bb      	ldrb	r3, [r7, #6]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d12e      	bne.n	80063ac <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 800634e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006350:	1d9a      	adds	r2, r3, #6
 8006352:	79f8      	ldrb	r0, [r7, #7]
 8006354:	2301      	movs	r3, #1
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	f002 f8a8 	bl	80084ac <tud_control_xfer>
        }
        break;
 800635c:	e026      	b.n	80063ac <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 800635e:	79bb      	ldrb	r3, [r7, #6]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d105      	bne.n	8006370 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f002 f82d 	bl	80083c8 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 800636e:	e01f      	b.n	80063b0 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8006370:	79bb      	ldrb	r3, [r7, #6]
 8006372:	2b03      	cmp	r3, #3
 8006374:	d11c      	bne.n	80063b0 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	885b      	ldrh	r3, [r3, #2]
 800637a:	b29b      	uxth	r3, r3
 800637c:	b2da      	uxtb	r2, r3
 800637e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006380:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8006382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006384:	799a      	ldrb	r2, [r3, #6]
 8006386:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800638a:	4611      	mov	r1, r2
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff fc21 	bl	8005bd4 <tud_hid_set_protocol_cb>
        break;
 8006392:	e00d      	b.n	80063b0 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 8006394:	2300      	movs	r3, #0
 8006396:	e00d      	b.n	80063b4 <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 8006398:	2300      	movs	r3, #0
 800639a:	e00b      	b.n	80063b4 <hidd_control_xfer_cb+0x3d0>
        break;
 800639c:	bf00      	nop
 800639e:	e008      	b.n	80063b2 <hidd_control_xfer_cb+0x3ce>
        break;
 80063a0:	bf00      	nop
 80063a2:	e006      	b.n	80063b2 <hidd_control_xfer_cb+0x3ce>
        break;
 80063a4:	bf00      	nop
 80063a6:	e004      	b.n	80063b2 <hidd_control_xfer_cb+0x3ce>
        break;
 80063a8:	bf00      	nop
 80063aa:	e002      	b.n	80063b2 <hidd_control_xfer_cb+0x3ce>
        break;
 80063ac:	bf00      	nop
 80063ae:	e000      	b.n	80063b2 <hidd_control_xfer_cb+0x3ce>
        break;
 80063b0:	bf00      	nop
  }

  return true;
 80063b2:	2301      	movs	r3, #1
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3748      	adds	r7, #72	; 0x48
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	; 0x28
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	603b      	str	r3, [r7, #0]
 80063c4:	4603      	mov	r3, r0
 80063c6:	71fb      	strb	r3, [r7, #7]
 80063c8:	460b      	mov	r3, r1
 80063ca:	71bb      	strb	r3, [r7, #6]
 80063cc:	4613      	mov	r3, r2
 80063ce:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 80063d0:	2300      	movs	r3, #0
 80063d2:	77fb      	strb	r3, [r7, #31]
 80063d4:	e014      	b.n	8006400 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 80063d6:	7ffa      	ldrb	r2, [r7, #31]
 80063d8:	4613      	mov	r3, r2
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	4413      	add	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4a3e      	ldr	r2, [pc, #248]	; (80064dc <hidd_xfer_cb+0x120>)
 80063e2:	4413      	add	r3, r2
 80063e4:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	789b      	ldrb	r3, [r3, #2]
 80063ea:	79ba      	ldrb	r2, [r7, #6]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d00a      	beq.n	8006406 <hidd_xfer_cb+0x4a>
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	79ba      	ldrb	r2, [r7, #6]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d005      	beq.n	8006406 <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 80063fa:	7ffb      	ldrb	r3, [r7, #31]
 80063fc:	3301      	adds	r3, #1
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	7ffb      	ldrb	r3, [r7, #31]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0e7      	beq.n	80063d6 <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8006406:	7ffb      	ldrb	r3, [r7, #31]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00a      	beq.n	8006422 <hidd_xfer_cb+0x66>
 800640c:	4b34      	ldr	r3, [pc, #208]	; (80064e0 <hidd_xfer_cb+0x124>)
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d000      	beq.n	800641e <hidd_xfer_cb+0x62>
 800641c:	be00      	bkpt	0x0000
 800641e:	2300      	movs	r3, #0
 8006420:	e057      	b.n	80064d2 <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8006422:	7ffa      	ldrb	r2, [r7, #31]
 8006424:	4613      	mov	r3, r2
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	4413      	add	r3, r2
 800642a:	019b      	lsls	r3, r3, #6
 800642c:	4a2d      	ldr	r2, [pc, #180]	; (80064e4 <hidd_xfer_cb+0x128>)
 800642e:	4413      	add	r3, r2
 8006430:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	79ba      	ldrb	r2, [r7, #6]
 8006438:	429a      	cmp	r2, r3
 800643a:	d116      	bne.n	800646a <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 800643c:	797b      	ldrb	r3, [r7, #5]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d109      	bne.n	8006456 <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	b29a      	uxth	r2, r3
 800644c:	7ffb      	ldrb	r3, [r7, #31]
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff fbdb 	bl	8005c0a <tud_hid_report_complete_cb>
 8006454:	e03c      	b.n	80064d0 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	7ff8      	ldrb	r0, [r7, #31]
 8006462:	2101      	movs	r1, #1
 8006464:	f7ff fbde 	bl	8005c24 <tud_hid_report_failed_cb>
 8006468:	e032      	b.n	80064d0 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 800646a:	797b      	ldrb	r3, [r7, #5]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10c      	bne.n	800648a <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	b29b      	uxth	r3, r3
 800647a:	7ff8      	ldrb	r0, [r7, #31]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	4613      	mov	r3, r2
 8006480:	2202      	movs	r2, #2
 8006482:	2100      	movs	r1, #0
 8006484:	f7ff fae6 	bl	8005a54 <tud_hid_set_report_cb>
 8006488:	e008      	b.n	800649c <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	7ff8      	ldrb	r0, [r7, #31]
 8006496:	2102      	movs	r1, #2
 8006498:	f7ff fbc4 	bl	8005c24 <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	7899      	ldrb	r1, [r3, #2]
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80064a6:	79f8      	ldrb	r0, [r7, #7]
 80064a8:	2340      	movs	r3, #64	; 0x40
 80064aa:	f001 fe27 	bl	80080fc <usbd_edpt_xfer>
 80064ae:	4603      	mov	r3, r0
 80064b0:	f083 0301 	eor.w	r3, r3, #1
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <hidd_xfer_cb+0x114>
 80064ba:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <hidd_xfer_cb+0x124>)
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d000      	beq.n	80064cc <hidd_xfer_cb+0x110>
 80064ca:	be00      	bkpt	0x0000
 80064cc:	2300      	movs	r3, #0
 80064ce:	e000      	b.n	80064d2 <hidd_xfer_cb+0x116>
  }

  return true;
 80064d0:	2301      	movs	r3, #1
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3720      	adds	r7, #32
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20000468 	.word	0x20000468
 80064e0:	e000edf0 	.word	0xe000edf0
 80064e4:	20000474 	.word	0x20000474

080064e8 <_ff_push>:
}
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	4613      	mov	r3, r2
 80064f4:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	88fa      	ldrh	r2, [r7, #6]
 80064fc:	68f9      	ldr	r1, [r7, #12]
 80064fe:	88c9      	ldrh	r1, [r1, #6]
 8006500:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006504:	b289      	uxth	r1, r1
 8006506:	fb01 f202 	mul.w	r2, r1, r2
 800650a:	1898      	adds	r0, r3, r2
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	88db      	ldrh	r3, [r3, #6]
 8006510:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006514:	b29b      	uxth	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	f004 fdb7 	bl	800b08c <memcpy>
}
 800651e:	bf00      	nop
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <_ff_pull>:
  }
}

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	4613      	mov	r3, r2
 8006532:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	88fa      	ldrh	r2, [r7, #6]
 800653a:	68f9      	ldr	r1, [r7, #12]
 800653c:	88c9      	ldrh	r1, [r1, #6]
 800653e:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006542:	b289      	uxth	r1, r1
 8006544:	fb01 f202 	mul.w	r2, r1, r2
 8006548:	1899      	adds	r1, r3, r2
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	88db      	ldrh	r3, [r3, #6]
 800654e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006552:	b29b      	uxth	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	68b8      	ldr	r0, [r7, #8]
 8006558:	f004 fd98 	bl	800b08c <memcpy>
}
 800655c:	bf00      	nop
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	4603      	mov	r3, r0
 800656c:	80fb      	strh	r3, [r7, #6]
 800656e:	460b      	mov	r3, r1
 8006570:	80bb      	strh	r3, [r7, #4]
 8006572:	4613      	mov	r3, r2
 8006574:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8006576:	88ba      	ldrh	r2, [r7, #4]
 8006578:	887b      	ldrh	r3, [r7, #2]
 800657a:	4413      	add	r3, r2
 800657c:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800657e:	88ba      	ldrh	r2, [r7, #4]
 8006580:	89fb      	ldrh	r3, [r7, #14]
 8006582:	429a      	cmp	r2, r3
 8006584:	d804      	bhi.n	8006590 <advance_index+0x2c>
 8006586:	89fa      	ldrh	r2, [r7, #14]
 8006588:	88fb      	ldrh	r3, [r7, #6]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	429a      	cmp	r2, r3
 800658e:	db08      	blt.n	80065a2 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	b29b      	uxth	r3, r3
 8006596:	425b      	negs	r3, r3
 8006598:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800659a:	89fa      	ldrh	r2, [r7, #14]
 800659c:	89bb      	ldrh	r3, [r7, #12]
 800659e:	4413      	add	r3, r2
 80065a0:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 80065a2:	89fb      	ldrh	r3, [r7, #14]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr

080065ae <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b08a      	sub	sp, #40	; 0x28
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	4611      	mov	r1, r2
 80065ba:	461a      	mov	r2, r3
 80065bc:	460b      	mov	r3, r1
 80065be:	80fb      	strh	r3, [r7, #6]
 80065c0:	4613      	mov	r3, r2
 80065c2:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	889b      	ldrh	r3, [r3, #4]
 80065c8:	847b      	strh	r3, [r7, #34]	; 0x22
 80065ca:	88fb      	ldrh	r3, [r7, #6]
 80065cc:	843b      	strh	r3, [r7, #32]
 80065ce:	88bb      	ldrh	r3, [r7, #4]
 80065d0:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80065d2:	8c3a      	ldrh	r2, [r7, #32]
 80065d4:	8bfb      	ldrh	r3, [r7, #30]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d304      	bcc.n	80065e4 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80065da:	8c3a      	ldrh	r2, [r7, #32]
 80065dc:	8bfb      	ldrh	r3, [r7, #30]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	e008      	b.n	80065f6 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80065e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	8c39      	ldrh	r1, [r7, #32]
 80065ec:	8bfb      	ldrh	r3, [r7, #30]
 80065ee:	1acb      	subs	r3, r1, r3
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	4413      	add	r3, r2
 80065f4:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80065f6:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 80065f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <_tu_fifo_peek+0x54>
 80065fe:	2300      	movs	r3, #0
 8006600:	e037      	b.n	8006672 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	889b      	ldrh	r3, [r3, #4]
 8006606:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006608:	429a      	cmp	r2, r3
 800660a:	d91b      	bls.n	8006644 <_tu_fifo_peek+0x96>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	61bb      	str	r3, [r7, #24]
 8006610:	88fb      	ldrh	r3, [r7, #6]
 8006612:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	889b      	ldrh	r3, [r3, #4]
 8006618:	8afa      	ldrh	r2, [r7, #22]
 800661a:	429a      	cmp	r2, r3
 800661c:	d305      	bcc.n	800662a <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	889b      	ldrh	r3, [r3, #4]
 8006622:	8afa      	ldrh	r2, [r7, #22]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	82bb      	strh	r3, [r7, #20]
 8006628:	e004      	b.n	8006634 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	889a      	ldrh	r2, [r3, #4]
 800662e:	8afb      	ldrh	r3, [r7, #22]
 8006630:	4413      	add	r3, r2
 8006632:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	8aba      	ldrh	r2, [r7, #20]
 8006638:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800663a:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800663c:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	889b      	ldrh	r3, [r3, #4]
 8006642:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	889b      	ldrh	r3, [r3, #4]
 8006648:	827b      	strh	r3, [r7, #18]
 800664a:	88bb      	ldrh	r3, [r7, #4]
 800664c:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 800664e:	e003      	b.n	8006658 <_tu_fifo_peek+0xaa>
 8006650:	8a3a      	ldrh	r2, [r7, #16]
 8006652:	8a7b      	ldrh	r3, [r7, #18]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	823b      	strh	r3, [r7, #16]
 8006658:	8a7a      	ldrh	r2, [r7, #18]
 800665a:	8a3b      	ldrh	r3, [r7, #16]
 800665c:	429a      	cmp	r2, r3
 800665e:	d9f7      	bls.n	8006650 <_tu_fifo_peek+0xa2>
  return idx;
 8006660:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006662:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8006664:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006666:	461a      	mov	r2, r3
 8006668:	68b9      	ldr	r1, [r7, #8]
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f7ff ff5b 	bl	8006526 <_ff_pull>

  return true;
 8006670:	2301      	movs	r3, #1
}
 8006672:	4618      	mov	r0, r3
 8006674:	3728      	adds	r7, #40	; 0x28
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 800667a:	b480      	push	{r7}
 800667c:	b085      	sub	sp, #20
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	8899      	ldrh	r1, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	891b      	ldrh	r3, [r3, #8]
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	895b      	ldrh	r3, [r3, #10]
 8006690:	b29b      	uxth	r3, r3
 8006692:	81f9      	strh	r1, [r7, #14]
 8006694:	81ba      	strh	r2, [r7, #12]
 8006696:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8006698:	89ba      	ldrh	r2, [r7, #12]
 800669a:	897b      	ldrh	r3, [r7, #10]
 800669c:	429a      	cmp	r2, r3
 800669e:	d304      	bcc.n	80066aa <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 80066a0:	89ba      	ldrh	r2, [r7, #12]
 80066a2:	897b      	ldrh	r3, [r7, #10]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	e008      	b.n	80066bc <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80066aa:	89fb      	ldrh	r3, [r7, #14]
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	89b9      	ldrh	r1, [r7, #12]
 80066b2:	897b      	ldrh	r3, [r7, #10]
 80066b4:	1acb      	subs	r3, r1, r3
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	4413      	add	r3, r2
 80066ba:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	8892      	ldrh	r2, [r2, #4]
 80066c0:	4293      	cmp	r3, r2
 80066c2:	bf2c      	ite	cs
 80066c4:	2301      	movcs	r3, #1
 80066c6:	2300      	movcc	r3, #0
 80066c8:	b2db      	uxtb	r3, r3
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bc80      	pop	{r7}
 80066d2:	4770      	bx	lr

080066d4 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	891b      	ldrh	r3, [r3, #8]
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	895b      	ldrh	r3, [r3, #10]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff ff5e 	bl	80065ae <_tu_fifo_peek>
 80066f2:	4603      	mov	r3, r0
 80066f4:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8898      	ldrh	r0, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	895b      	ldrh	r3, [r3, #10]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	7bfa      	ldrb	r2, [r7, #15]
 8006702:	b292      	uxth	r2, r2
 8006704:	4619      	mov	r1, r3
 8006706:	f7ff ff2d 	bl	8006564 <advance_index>
 800670a:	4603      	mov	r3, r0
 800670c:	461a      	mov	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8006712:	7bfb      	ldrb	r3, [r7, #15]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	891b      	ldrh	r3, [r3, #8]
 800672a:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff ffa4 	bl	800667a <tu_fifo_full>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00c      	beq.n	8006752 <tu_fifo_write+0x36>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	79db      	ldrb	r3, [r3, #7]
 800673c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006740:	b2db      	uxtb	r3, r3
 8006742:	f083 0301 	eor.w	r3, r3, #1
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <tu_fifo_write+0x36>
  {
    ret = false;
 800674c:	2300      	movs	r3, #0
 800674e:	75fb      	strb	r3, [r7, #23]
 8006750:	e022      	b.n	8006798 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	889b      	ldrh	r3, [r3, #4]
 8006756:	823b      	strh	r3, [r7, #16]
 8006758:	8abb      	ldrh	r3, [r7, #20]
 800675a:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 800675c:	e003      	b.n	8006766 <tu_fifo_write+0x4a>
 800675e:	89fa      	ldrh	r2, [r7, #14]
 8006760:	8a3b      	ldrh	r3, [r7, #16]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	81fb      	strh	r3, [r7, #14]
 8006766:	8a3a      	ldrh	r2, [r7, #16]
 8006768:	89fb      	ldrh	r3, [r7, #14]
 800676a:	429a      	cmp	r2, r3
 800676c:	d9f7      	bls.n	800675e <tu_fifo_write+0x42>
  return idx;
 800676e:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006770:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8006772:	8a7b      	ldrh	r3, [r7, #18]
 8006774:	461a      	mov	r2, r3
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff feb5 	bl	80064e8 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	889b      	ldrh	r3, [r3, #4]
 8006782:	8ab9      	ldrh	r1, [r7, #20]
 8006784:	2201      	movs	r2, #1
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff feec 	bl	8006564 <advance_index>
 800678c:	4603      	mov	r3, r0
 800678e:	461a      	mov	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	811a      	strh	r2, [r3, #8]

    ret = true;
 8006794:	2301      	movs	r3, #1
 8006796:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8006798:	7dfb      	ldrb	r3, [r7, #23]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 80067b6:	2301      	movs	r3, #1
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr

080067c2 <tu_fifo_advance_write_pointer>:
    @param[in]  n
                Number of items the write pointer moves forward
 */
/******************************************************************************/
void tu_fifo_advance_write_pointer(tu_fifo_t *f, uint16_t n)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	807b      	strh	r3, [r7, #2]
  f->wr_idx = advance_index(f->depth, f->wr_idx, n);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	8898      	ldrh	r0, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	891b      	ldrh	r3, [r3, #8]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	887a      	ldrh	r2, [r7, #2]
 80067da:	4619      	mov	r1, r3
 80067dc:	f7ff fec2 	bl	8006564 <advance_index>
 80067e0:	4603      	mov	r3, r0
 80067e2:	461a      	mov	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	811a      	strh	r2, [r3, #8]
}
 80067e8:	bf00      	nop
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <tu_fifo_advance_read_pointer>:
    @param[in]  n
                Number of items the read pointer moves forward
 */
/******************************************************************************/
void tu_fifo_advance_read_pointer(tu_fifo_t *f, uint16_t n)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	807b      	strh	r3, [r7, #2]
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	8898      	ldrh	r0, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	895b      	ldrh	r3, [r3, #10]
 8006804:	b29b      	uxth	r3, r3
 8006806:	887a      	ldrh	r2, [r7, #2]
 8006808:	4619      	mov	r1, r3
 800680a:	f7ff feab 	bl	8006564 <advance_index>
 800680e:	4603      	mov	r3, r0
 8006810:	461a      	mov	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	815a      	strh	r2, [r3, #10]
}
 8006816:	bf00      	nop
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <tu_fifo_get_read_info>:
   @param[out]      *info
                    Pointer to struct which holds the desired infos
 */
/******************************************************************************/
void tu_fifo_get_read_info(tu_fifo_t *f, tu_fifo_buffer_info_t *info)
{
 800681e:	b480      	push	{r7}
 8006820:	b08b      	sub	sp, #44	; 0x2c
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	6039      	str	r1, [r7, #0]
  // Operate on temporary values in case they change in between
  uint16_t wr_idx = f->wr_idx;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	891b      	ldrh	r3, [r3, #8]
 800682c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t rd_idx = f->rd_idx;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	895b      	ldrh	r3, [r3, #10]
 8006832:	84fb      	strh	r3, [r7, #38]	; 0x26

  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	889b      	ldrh	r3, [r3, #4]
 8006838:	83bb      	strh	r3, [r7, #28]
 800683a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800683c:	837b      	strh	r3, [r7, #26]
 800683e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006840:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8006842:	8b7a      	ldrh	r2, [r7, #26]
 8006844:	8b3b      	ldrh	r3, [r7, #24]
 8006846:	429a      	cmp	r2, r3
 8006848:	d304      	bcc.n	8006854 <tu_fifo_get_read_info+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 800684a:	8b7a      	ldrh	r2, [r7, #26]
 800684c:	8b3b      	ldrh	r3, [r7, #24]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	b29b      	uxth	r3, r3
 8006852:	e008      	b.n	8006866 <tu_fifo_get_read_info+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006854:	8bbb      	ldrh	r3, [r7, #28]
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	b29a      	uxth	r2, r3
 800685a:	8b79      	ldrh	r1, [r7, #26]
 800685c:	8b3b      	ldrh	r3, [r7, #24]
 800685e:	1acb      	subs	r3, r1, r3
 8006860:	b29b      	uxth	r3, r3
 8006862:	4413      	add	r3, r2
 8006864:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006866:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Check overflow and correct if required - may happen in case a DMA wrote too fast
  if (cnt > f->depth)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	889b      	ldrh	r3, [r3, #4]
 800686c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800686e:	429a      	cmp	r2, r3
 8006870:	d91b      	bls.n	80068aa <tu_fifo_get_read_info+0x8c>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006878:	827b      	strh	r3, [r7, #18]
  if ( wr_idx >= f->depth )
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	889b      	ldrh	r3, [r3, #4]
 800687e:	8a7a      	ldrh	r2, [r7, #18]
 8006880:	429a      	cmp	r2, r3
 8006882:	d305      	bcc.n	8006890 <tu_fifo_get_read_info+0x72>
    rd_idx = wr_idx - f->depth;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	889b      	ldrh	r3, [r3, #4]
 8006888:	8a7a      	ldrh	r2, [r7, #18]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	823b      	strh	r3, [r7, #16]
 800688e:	e004      	b.n	800689a <tu_fifo_get_read_info+0x7c>
    rd_idx = wr_idx + f->depth;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	889a      	ldrh	r2, [r3, #4]
 8006894:	8a7b      	ldrh	r3, [r7, #18]
 8006896:	4413      	add	r3, r2
 8006898:	823b      	strh	r3, [r7, #16]
  f->rd_idx = rd_idx;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	8a3a      	ldrh	r2, [r7, #16]
 800689e:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80068a0:	8a3b      	ldrh	r3, [r7, #16]
  {
    _ff_lock(f->mutex_rd);
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80068a2:	84fb      	strh	r3, [r7, #38]	; 0x26
    _ff_unlock(f->mutex_rd);

    cnt = f->depth;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	889b      	ldrh	r3, [r3, #4]
 80068a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  // Check if fifo is empty
  if (cnt == 0)
 80068aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10c      	bne.n	80068ca <tu_fifo_get_read_info+0xac>
  {
    info->len_lin  = 0;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2200      	movs	r2, #0
 80068b4:	801a      	strh	r2, [r3, #0]
    info->len_wrap = 0;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2200      	movs	r2, #0
 80068ba:	805a      	strh	r2, [r3, #2]
    info->ptr_lin  = NULL;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2200      	movs	r2, #0
 80068c0:	605a      	str	r2, [r3, #4]
    info->ptr_wrap = NULL;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2200      	movs	r2, #0
 80068c6:	609a      	str	r2, [r3, #8]
    return;
 80068c8:	e045      	b.n	8006956 <tu_fifo_get_read_info+0x138>
  }

  // Get relative pointers
  uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	889b      	ldrh	r3, [r3, #4]
 80068ce:	817b      	strh	r3, [r7, #10]
 80068d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068d2:	813b      	strh	r3, [r7, #8]
  while ( idx >= depth ) idx -= depth;
 80068d4:	e003      	b.n	80068de <tu_fifo_get_read_info+0xc0>
 80068d6:	893a      	ldrh	r2, [r7, #8]
 80068d8:	897b      	ldrh	r3, [r7, #10]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	813b      	strh	r3, [r7, #8]
 80068de:	897a      	ldrh	r2, [r7, #10]
 80068e0:	893b      	ldrh	r3, [r7, #8]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d9f7      	bls.n	80068d6 <tu_fifo_get_read_info+0xb8>
  return idx;
 80068e6:	893b      	ldrh	r3, [r7, #8]
  uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80068e8:	843b      	strh	r3, [r7, #32]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	889b      	ldrh	r3, [r3, #4]
 80068ee:	81fb      	strh	r3, [r7, #14]
 80068f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068f2:	81bb      	strh	r3, [r7, #12]
  while ( idx >= depth ) idx -= depth;
 80068f4:	e003      	b.n	80068fe <tu_fifo_get_read_info+0xe0>
 80068f6:	89ba      	ldrh	r2, [r7, #12]
 80068f8:	89fb      	ldrh	r3, [r7, #14]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	81bb      	strh	r3, [r7, #12]
 80068fe:	89fa      	ldrh	r2, [r7, #14]
 8006900:	89bb      	ldrh	r3, [r7, #12]
 8006902:	429a      	cmp	r2, r3
 8006904:	d9f7      	bls.n	80068f6 <tu_fifo_get_read_info+0xd8>
  return idx;
 8006906:	89bb      	ldrh	r3, [r7, #12]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006908:	83fb      	strh	r3, [r7, #30]

  // Copy pointer to buffer to start reading from
  info->ptr_lin = &f->buffer[rd_ptr];
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	8bfb      	ldrh	r3, [r7, #30]
 8006910:	441a      	add	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	605a      	str	r2, [r3, #4]

  // Check if there is a wrap around necessary
  if (wr_ptr > rd_ptr)
 8006916:	8c3a      	ldrh	r2, [r7, #32]
 8006918:	8bfb      	ldrh	r3, [r7, #30]
 800691a:	429a      	cmp	r2, r3
 800691c:	d909      	bls.n	8006932 <tu_fifo_get_read_info+0x114>
  {
    // Non wrapping case
    info->len_lin  = cnt;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006922:	801a      	strh	r2, [r3, #0]

    info->len_wrap = 0;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2200      	movs	r2, #0
 8006928:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = NULL;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2200      	movs	r2, #0
 800692e:	609a      	str	r2, [r3, #8]
 8006930:	e011      	b.n	8006956 <tu_fifo_get_read_info+0x138>
  }
  else
  {
    info->len_lin  = f->depth - rd_ptr;   // Also the case if FIFO was full
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	889a      	ldrh	r2, [r3, #4]
 8006936:	8bfb      	ldrh	r3, [r7, #30]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	b29a      	uxth	r2, r3
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	801a      	strh	r2, [r3, #0]

    info->len_wrap = cnt - info->len_lin;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	b29a      	uxth	r2, r3
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = f->buffer;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	609a      	str	r2, [r3, #8]
  }
}
 8006956:	372c      	adds	r7, #44	; 0x2c
 8006958:	46bd      	mov	sp, r7
 800695a:	bc80      	pop	{r7}
 800695c:	4770      	bx	lr

0800695e <tu_fifo_get_write_info>:
   @param[out]      *info
                    Pointer to struct which holds the desired infos
 */
/******************************************************************************/
void tu_fifo_get_write_info(tu_fifo_t *f, tu_fifo_buffer_info_t *info)
{
 800695e:	b480      	push	{r7}
 8006960:	b08b      	sub	sp, #44	; 0x2c
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	6039      	str	r1, [r7, #0]
  uint16_t wr_idx = f->wr_idx;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	891b      	ldrh	r3, [r3, #8]
 800696c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t rd_idx = f->rd_idx;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	895b      	ldrh	r3, [r3, #10]
 8006972:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	889b      	ldrh	r3, [r3, #4]
 8006978:	83bb      	strh	r3, [r7, #28]
 800697a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800697c:	837b      	strh	r3, [r7, #26]
 800697e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006980:	833b      	strh	r3, [r7, #24]
 8006982:	8bbb      	ldrh	r3, [r7, #28]
 8006984:	82fb      	strh	r3, [r7, #22]
 8006986:	8b7b      	ldrh	r3, [r7, #26]
 8006988:	82bb      	strh	r3, [r7, #20]
 800698a:	8b3b      	ldrh	r3, [r7, #24]
 800698c:	827b      	strh	r3, [r7, #18]
  if (wr_idx >= rd_idx)
 800698e:	8aba      	ldrh	r2, [r7, #20]
 8006990:	8a7b      	ldrh	r3, [r7, #18]
 8006992:	429a      	cmp	r2, r3
 8006994:	d304      	bcc.n	80069a0 <tu_fifo_get_write_info+0x42>
    return (uint16_t) (wr_idx - rd_idx);
 8006996:	8aba      	ldrh	r2, [r7, #20]
 8006998:	8a7b      	ldrh	r3, [r7, #18]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	b29b      	uxth	r3, r3
 800699e:	e008      	b.n	80069b2 <tu_fifo_get_write_info+0x54>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80069a0:	8afb      	ldrh	r3, [r7, #22]
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	8ab9      	ldrh	r1, [r7, #20]
 80069a8:	8a7b      	ldrh	r3, [r7, #18]
 80069aa:	1acb      	subs	r3, r1, r3
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	4413      	add	r3, r2
 80069b0:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80069b2:	823b      	strh	r3, [r7, #16]
  return (depth > count) ? (depth - count) : 0;
 80069b4:	8bba      	ldrh	r2, [r7, #28]
 80069b6:	8a3b      	ldrh	r3, [r7, #16]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d904      	bls.n	80069c6 <tu_fifo_get_write_info+0x68>
 80069bc:	8bba      	ldrh	r2, [r7, #28]
 80069be:	8a3b      	ldrh	r3, [r7, #16]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	e000      	b.n	80069c8 <tu_fifo_get_write_info+0x6a>
 80069c6:	2300      	movs	r3, #0
  uint16_t remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80069c8:	847b      	strh	r3, [r7, #34]	; 0x22

  if (remain == 0)
 80069ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10c      	bne.n	80069ea <tu_fifo_get_write_info+0x8c>
  {
    info->len_lin  = 0;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2200      	movs	r2, #0
 80069d4:	801a      	strh	r2, [r3, #0]
    info->len_wrap = 0;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2200      	movs	r2, #0
 80069da:	805a      	strh	r2, [r3, #2]
    info->ptr_lin  = NULL;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2200      	movs	r2, #0
 80069e0:	605a      	str	r2, [r3, #4]
    info->ptr_wrap = NULL;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2200      	movs	r2, #0
 80069e6:	609a      	str	r2, [r3, #8]
    return;
 80069e8:	e048      	b.n	8006a7c <tu_fifo_get_write_info+0x11e>
  }

  // Get relative pointers
  uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	889b      	ldrh	r3, [r3, #4]
 80069ee:	817b      	strh	r3, [r7, #10]
 80069f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069f2:	813b      	strh	r3, [r7, #8]
  while ( idx >= depth ) idx -= depth;
 80069f4:	e003      	b.n	80069fe <tu_fifo_get_write_info+0xa0>
 80069f6:	893a      	ldrh	r2, [r7, #8]
 80069f8:	897b      	ldrh	r3, [r7, #10]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	813b      	strh	r3, [r7, #8]
 80069fe:	897a      	ldrh	r2, [r7, #10]
 8006a00:	893b      	ldrh	r3, [r7, #8]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d9f7      	bls.n	80069f6 <tu_fifo_get_write_info+0x98>
  return idx;
 8006a06:	893b      	ldrh	r3, [r7, #8]
  uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006a08:	843b      	strh	r3, [r7, #32]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	889b      	ldrh	r3, [r3, #4]
 8006a0e:	81fb      	strh	r3, [r7, #14]
 8006a10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a12:	81bb      	strh	r3, [r7, #12]
  while ( idx >= depth ) idx -= depth;
 8006a14:	e003      	b.n	8006a1e <tu_fifo_get_write_info+0xc0>
 8006a16:	89ba      	ldrh	r2, [r7, #12]
 8006a18:	89fb      	ldrh	r3, [r7, #14]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	81bb      	strh	r3, [r7, #12]
 8006a1e:	89fa      	ldrh	r2, [r7, #14]
 8006a20:	89bb      	ldrh	r3, [r7, #12]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d9f7      	bls.n	8006a16 <tu_fifo_get_write_info+0xb8>
  return idx;
 8006a26:	89bb      	ldrh	r3, [r7, #12]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006a28:	83fb      	strh	r3, [r7, #30]

  // Copy pointer to buffer to start writing to
  info->ptr_lin = &f->buffer[wr_ptr];
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	8c3b      	ldrh	r3, [r7, #32]
 8006a30:	441a      	add	r2, r3
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	605a      	str	r2, [r3, #4]

  if (wr_ptr < rd_ptr)
 8006a36:	8c3a      	ldrh	r2, [r7, #32]
 8006a38:	8bfb      	ldrh	r3, [r7, #30]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d20c      	bcs.n	8006a58 <tu_fifo_get_write_info+0xfa>
  {
    // Non wrapping case
    info->len_lin  = rd_ptr-wr_ptr;
 8006a3e:	8bfa      	ldrh	r2, [r7, #30]
 8006a40:	8c3b      	ldrh	r3, [r7, #32]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	801a      	strh	r2, [r3, #0]
    info->len_wrap = 0;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = NULL;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2200      	movs	r2, #0
 8006a54:	609a      	str	r2, [r3, #8]
 8006a56:	e011      	b.n	8006a7c <tu_fifo_get_write_info+0x11e>
  }
  else
  {
    info->len_lin  = f->depth - wr_ptr;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	889a      	ldrh	r2, [r3, #4]
 8006a5c:	8c3b      	ldrh	r3, [r7, #32]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	801a      	strh	r2, [r3, #0]
    info->len_wrap = remain - info->len_lin; // Remaining length - n already was limited to remain or FIFO depth
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = f->buffer;              // Always start of buffer
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	609a      	str	r2, [r3, #8]
  }
}
 8006a7c:	372c      	adds	r7, #44	; 0x2c
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr

08006a84 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	6039      	str	r1, [r7, #0]
 8006a8e:	71fb      	strb	r3, [r7, #7]
 8006a90:	4613      	mov	r3, r2
 8006a92:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	4770      	bx	lr

08006a9e <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr

08006ab0 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0
  return NULL;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8006abe:	b480      	push	{r7}
 8006ac0:	af00      	add	r7, sp, #0
  return NULL;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr

08006acc <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr

08006ae2 <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 8006ae2:	b480      	push	{r7}
 8006ae4:	af00      	add	r7, sp, #0
}
 8006ae6:	bf00      	nop
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bc80      	pop	{r7}
 8006aec:	4770      	bx	lr

08006aee <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 8006aee:	b480      	push	{r7}
 8006af0:	af00      	add	r7, sp, #0
}
 8006af2:	bf00      	nop
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bc80      	pop	{r7}
 8006af8:	4770      	bx	lr

08006afa <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	4603      	mov	r3, r0
 8006b02:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bc80      	pop	{r7}
 8006b0c:	4770      	bx	lr

08006b0e <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 8006b0e:	b480      	push	{r7}
 8006b10:	af00      	add	r7, sp, #0
}
 8006b12:	bf00      	nop
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bc80      	pop	{r7}
 8006b18:	4770      	bx	lr

08006b1a <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8006b1a:	b480      	push	{r7}
 8006b1c:	b083      	sub	sp, #12
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	4603      	mov	r3, r0
 8006b22:	603a      	str	r2, [r7, #0]
 8006b24:	71fb      	strb	r3, [r7, #7]
 8006b26:	460b      	mov	r3, r1
 8006b28:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr

08006b36 <dcd_connect>:
TU_ATTR_WEAK bool dcd_deinit(uint8_t rhport) {
  (void) rhport;
  return false;
}

TU_ATTR_WEAK void dcd_connect(uint8_t rhport) {
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bc80      	pop	{r7}
 8006b48:	4770      	bx	lr
	...

08006b4c <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8006b50:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <tud_mounted+0x1c>)
 8006b52:	785b      	ldrb	r3, [r3, #1]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	bf14      	ite	ne
 8006b5a:	2301      	movne	r3, #1
 8006b5c:	2300      	moveq	r3, #0
 8006b5e:	b2db      	uxtb	r3, r3
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bc80      	pop	{r7}
 8006b66:	4770      	bx	lr
 8006b68:	20000534 	.word	0x20000534

08006b6c <tud_suspended>:

bool tud_suspended(void) {
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <tud_suspended+0x20>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	bf14      	ite	ne
 8006b7e:	2301      	movne	r3, #1
 8006b80:	2300      	moveq	r3, #0
 8006b82:	b2db      	uxtb	r3, r3
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr
 8006b8c:	20000534 	.word	0x20000534

08006b90 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8006b90:	b480      	push	{r7}
 8006b92:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8006b94:	4b05      	ldr	r3, [pc, #20]	; (8006bac <tud_inited+0x1c>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2bff      	cmp	r3, #255	; 0xff
 8006b9a:	bf14      	ite	ne
 8006b9c:	2301      	movne	r3, #1
 8006b9e:	2300      	moveq	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc80      	pop	{r7}
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	20000054 	.word	0x20000054

08006bb0 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08c      	sub	sp, #48	; 0x30
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	6039      	str	r1, [r7, #0]
 8006bba:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8006bbc:	f7ff ffe8 	bl	8006b90 <tud_inited>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e09c      	b.n	8006d04 <tud_rhport_init+0x154>
  }
  TU_ASSERT(rh_init);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <tud_rhport_init+0x36>
 8006bd0:	4b4e      	ldr	r3, [pc, #312]	; (8006d0c <tud_rhport_init+0x15c>)
 8006bd2:	61bb      	str	r3, [r7, #24]
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d000      	beq.n	8006be2 <tud_rhport_init+0x32>
 8006be0:	be00      	bkpt	0x0000
 8006be2:	2300      	movs	r3, #0
 8006be4:	e08e      	b.n	8006d04 <tud_rhport_init+0x154>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8006be6:	2234      	movs	r2, #52	; 0x34
 8006be8:	2100      	movs	r1, #0
 8006bea:	4849      	ldr	r0, [pc, #292]	; (8006d10 <tud_rhport_init+0x160>)
 8006bec:	f004 fa22 	bl	800b034 <memset>
  _usbd_queued_setup = 0;
 8006bf0:	4b48      	ldr	r3, [pc, #288]	; (8006d14 <tud_rhport_init+0x164>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	4b48      	ldr	r3, [pc, #288]	; (8006d18 <tud_rhport_init+0x168>)
 8006bf8:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8006bfa:	bf00      	nop
 8006bfc:	4b47      	ldr	r3, [pc, #284]	; (8006d1c <tud_rhport_init+0x16c>)
 8006bfe:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	3304      	adds	r3, #4
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff fdcc 	bl	80067a2 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8006c0a:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8006c0c:	4a44      	ldr	r2, [pc, #272]	; (8006d20 <tud_rhport_init+0x170>)
 8006c0e:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8006c10:	4b43      	ldr	r3, [pc, #268]	; (8006d20 <tud_rhport_init+0x170>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10a      	bne.n	8006c2e <tud_rhport_init+0x7e>
 8006c18:	4b3c      	ldr	r3, [pc, #240]	; (8006d0c <tud_rhport_init+0x15c>)
 8006c1a:	61fb      	str	r3, [r7, #28]
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d000      	beq.n	8006c2a <tud_rhport_init+0x7a>
 8006c28:	be00      	bkpt	0x0000
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e06a      	b.n	8006d04 <tud_rhport_init+0x154>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8006c2e:	4b3d      	ldr	r3, [pc, #244]	; (8006d24 <tud_rhport_init+0x174>)
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8006c34:	483c      	ldr	r0, [pc, #240]	; (8006d28 <tud_rhport_init+0x178>)
 8006c36:	f3af 8000 	nop.w
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	4a3b      	ldr	r2, [pc, #236]	; (8006d2c <tud_rhport_init+0x17c>)
 8006c3e:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006c40:	2300      	movs	r3, #0
 8006c42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006c46:	e039      	b.n	8006cbc <tud_rhport_init+0x10c>
 8006c48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c4c:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8006c52:	4b35      	ldr	r3, [pc, #212]	; (8006d28 <tud_rhport_init+0x178>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	7bfa      	ldrb	r2, [r7, #15]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d206      	bcs.n	8006c6a <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8006c5c:	4b33      	ldr	r3, [pc, #204]	; (8006d2c <tud_rhport_init+0x17c>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	015b      	lsls	r3, r3, #5
 8006c64:	4413      	add	r3, r2
 8006c66:	60bb      	str	r3, [r7, #8]
 8006c68:	e00c      	b.n	8006c84 <tud_rhport_init+0xd4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006c6a:	4b2f      	ldr	r3, [pc, #188]	; (8006d28 <tud_rhport_init+0x178>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	7bfa      	ldrb	r2, [r7, #15]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d807      	bhi.n	8006c84 <tud_rhport_init+0xd4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	4a2c      	ldr	r2, [pc, #176]	; (8006d28 <tud_rhport_init+0x178>)
 8006c78:	7812      	ldrb	r2, [r2, #0]
 8006c7a:	1a9b      	subs	r3, r3, r2
 8006c7c:	015b      	lsls	r3, r3, #5
 8006c7e:	4a2c      	ldr	r2, [pc, #176]	; (8006d30 <tud_rhport_init+0x180>)
 8006c80:	4413      	add	r3, r2
 8006c82:	60bb      	str	r3, [r7, #8]
  return driver;
 8006c84:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
    TU_ASSERT(driver && driver->init);
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <tud_rhport_init+0xe6>
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <tud_rhport_init+0xfc>
 8006c96:	4b1d      	ldr	r3, [pc, #116]	; (8006d0c <tud_rhport_init+0x15c>)
 8006c98:	623b      	str	r3, [r7, #32]
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d000      	beq.n	8006ca8 <tud_rhport_init+0xf8>
 8006ca6:	be00      	bkpt	0x0000
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e02b      	b.n	8006d04 <tud_rhport_init+0x154>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006cb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006cbc:	4b1a      	ldr	r3, [pc, #104]	; (8006d28 <tud_rhport_init+0x178>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d9bf      	bls.n	8006c48 <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 8006cc8:	4a1a      	ldr	r2, [pc, #104]	; (8006d34 <tud_rhport_init+0x184>)
 8006cca:	79fb      	ldrb	r3, [r7, #7]
 8006ccc:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8006cce:	79fb      	ldrb	r3, [r7, #7]
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f001 fdc0 	bl	8008858 <dcd_init>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	f083 0301 	eor.w	r3, r3, #1
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00a      	beq.n	8006cfa <tud_rhport_init+0x14a>
 8006ce4:	4b09      	ldr	r3, [pc, #36]	; (8006d0c <tud_rhport_init+0x15c>)
 8006ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d000      	beq.n	8006cf6 <tud_rhport_init+0x146>
 8006cf4:	be00      	bkpt	0x0000
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e004      	b.n	8006d04 <tud_rhport_init+0x154>
  dcd_int_enable(rhport);
 8006cfa:	79fb      	ldrb	r3, [r7, #7]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 fd6d 	bl	80087dc <dcd_int_enable>

  return true;
 8006d02:	2301      	movs	r3, #1
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3730      	adds	r7, #48	; 0x30
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	e000edf0 	.word	0xe000edf0
 8006d10:	20000534 	.word	0x20000534
 8006d14:	20000568 	.word	0x20000568
 8006d18:	20000058 	.word	0x20000058
 8006d1c:	2000005c 	.word	0x2000005c
 8006d20:	20000634 	.word	0x20000634
 8006d24:	00000000 	.word	0x00000000
 8006d28:	20000570 	.word	0x20000570
 8006d2c:	2000056c 	.word	0x2000056c
 8006d30:	0800b1cc 	.word	0x0800b1cc
 8006d34:	20000054 	.word	0x20000054

08006d38 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006d42:	2300      	movs	r3, #0
 8006d44:	77fb      	strb	r3, [r7, #31]
 8006d46:	e033      	b.n	8006db0 <configuration_reset+0x78>
 8006d48:	7ffb      	ldrb	r3, [r7, #31]
 8006d4a:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8006d50:	4b24      	ldr	r3, [pc, #144]	; (8006de4 <configuration_reset+0xac>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	7cfa      	ldrb	r2, [r7, #19]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d206      	bcs.n	8006d68 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8006d5a:	4b23      	ldr	r3, [pc, #140]	; (8006de8 <configuration_reset+0xb0>)
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	7cfb      	ldrb	r3, [r7, #19]
 8006d60:	015b      	lsls	r3, r3, #5
 8006d62:	4413      	add	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	e00c      	b.n	8006d82 <configuration_reset+0x4a>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006d68:	4b1e      	ldr	r3, [pc, #120]	; (8006de4 <configuration_reset+0xac>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	7cfa      	ldrb	r2, [r7, #19]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d807      	bhi.n	8006d82 <configuration_reset+0x4a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006d72:	7cfb      	ldrb	r3, [r7, #19]
 8006d74:	4a1b      	ldr	r2, [pc, #108]	; (8006de4 <configuration_reset+0xac>)
 8006d76:	7812      	ldrb	r2, [r2, #0]
 8006d78:	1a9b      	subs	r3, r3, r2
 8006d7a:	015b      	lsls	r3, r3, #5
 8006d7c:	4a1b      	ldr	r2, [pc, #108]	; (8006dec <configuration_reset+0xb4>)
 8006d7e:	4413      	add	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]
  return driver;
 8006d82:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8006d84:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d109      	bne.n	8006da0 <configuration_reset+0x68>
 8006d8c:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <configuration_reset+0xb8>)
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d01e      	beq.n	8006dda <configuration_reset+0xa2>
 8006d9c:	be00      	bkpt	0x0000
 8006d9e:	e01c      	b.n	8006dda <configuration_reset+0xa2>
    driver->reset(rhport);
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	79fa      	ldrb	r2, [r7, #7]
 8006da6:	4610      	mov	r0, r2
 8006da8:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006daa:	7ffb      	ldrb	r3, [r7, #31]
 8006dac:	3301      	adds	r3, #1
 8006dae:	77fb      	strb	r3, [r7, #31]
 8006db0:	4b0c      	ldr	r3, [pc, #48]	; (8006de4 <configuration_reset+0xac>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	7ffa      	ldrb	r2, [r7, #31]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d9c6      	bls.n	8006d48 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8006dba:	2234      	movs	r2, #52	; 0x34
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	480d      	ldr	r0, [pc, #52]	; (8006df4 <configuration_reset+0xbc>)
 8006dc0:	f004 f938 	bl	800b034 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8006dc4:	2210      	movs	r2, #16
 8006dc6:	21ff      	movs	r1, #255	; 0xff
 8006dc8:	480b      	ldr	r0, [pc, #44]	; (8006df8 <configuration_reset+0xc0>)
 8006dca:	f004 f933 	bl	800b034 <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8006dce:	2210      	movs	r2, #16
 8006dd0:	21ff      	movs	r1, #255	; 0xff
 8006dd2:	480a      	ldr	r0, [pc, #40]	; (8006dfc <configuration_reset+0xc4>)
 8006dd4:	f004 f92e 	bl	800b034 <memset>
 8006dd8:	e000      	b.n	8006ddc <configuration_reset+0xa4>
    TU_ASSERT(driver,);
 8006dda:	bf00      	nop
}
 8006ddc:	3720      	adds	r7, #32
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20000570 	.word	0x20000570
 8006de8:	2000056c 	.word	0x2000056c
 8006dec:	0800b1cc 	.word	0x0800b1cc
 8006df0:	e000edf0 	.word	0xe000edf0
 8006df4:	20000534 	.word	0x20000534
 8006df8:	20000538 	.word	0x20000538
 8006dfc:	20000548 	.word	0x20000548

08006e00 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8006e0a:	79fb      	ldrb	r3, [r7, #7]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff ff93 	bl	8006d38 <configuration_reset>
  usbd_control_reset();
 8006e12:	f001 fbbb 	bl	800858c <usbd_control_reset>
}
 8006e16:	bf00      	nop
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8006e20:	b590      	push	{r4, r7, lr}
 8006e22:	b093      	sub	sp, #76	; 0x4c
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8006e2c:	f7ff feb0 	bl	8006b90 <tud_inited>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f083 0301 	eor.w	r3, r3, #1
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f040 8189 	bne.w	8007150 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8006e3e:	4bb1      	ldr	r3, [pc, #708]	; (8007104 <tud_task_ext+0x2e4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	633b      	str	r3, [r7, #48]	; 0x30
 8006e44:	f107 030c 	add.w	r3, r7, #12
 8006e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	62bb      	str	r3, [r7, #40]	; 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2000      	movs	r0, #0
 8006e54:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	3304      	adds	r3, #4
 8006e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7ff fc39 	bl	80066d4 <tu_fifo_read>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  qhdl->interrupt_set(true);
 8006e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2001      	movs	r0, #1
 8006e6e:	4798      	blx	r3

  return success;
 8006e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e74:	f083 0301 	eor.w	r3, r3, #1
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f040 816a 	bne.w	8007154 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 8006e80:	7b7b      	ldrb	r3, [r7, #13]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	2b07      	cmp	r3, #7
 8006e86:	f200 814b 	bhi.w	8007120 <tud_task_ext+0x300>
 8006e8a:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <tud_task_ext+0x70>)
 8006e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e90:	08006eb1 	.word	0x08006eb1
 8006e94:	08006ec1 	.word	0x08006ec1
 8006e98:	080070d3 	.word	0x080070d3
 8006e9c:	08007085 	.word	0x08007085
 8006ea0:	080070af 	.word	0x080070af
 8006ea4:	08006ecf 	.word	0x08006ecf
 8006ea8:	08006f7f 	.word	0x08006f7f
 8006eac:	080070c3 	.word	0x080070c3
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8006eb0:	7b3b      	ldrb	r3, [r7, #12]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7ff ffa4 	bl	8006e00 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8006eb8:	7c3a      	ldrb	r2, [r7, #16]
 8006eba:	4b93      	ldr	r3, [pc, #588]	; (8007108 <tud_task_ext+0x2e8>)
 8006ebc:	709a      	strb	r2, [r3, #2]
        break;
 8006ebe:	e146      	b.n	800714e <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8006ec0:	7b3b      	ldrb	r3, [r7, #12]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff ff9c 	bl	8006e00 <usbd_reset>
        tud_umount_cb();
 8006ec8:	f7ff fe11 	bl	8006aee <tud_umount_cb>
        break;
 8006ecc:	e13f      	b.n	800714e <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8006ece:	4b8f      	ldr	r3, [pc, #572]	; (800710c <tud_task_ext+0x2ec>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10a      	bne.n	8006eee <tud_task_ext+0xce>
 8006ed8:	4b8d      	ldr	r3, [pc, #564]	; (8007110 <tud_task_ext+0x2f0>)
 8006eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 8137 	beq.w	8007158 <tud_task_ext+0x338>
 8006eea:	be00      	bkpt	0x0000
 8006eec:	e134      	b.n	8007158 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 8006eee:	4b87      	ldr	r3, [pc, #540]	; (800710c <tud_task_ext+0x2ec>)
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	4b84      	ldr	r3, [pc, #528]	; (800710c <tud_task_ext+0x2ec>)
 8006efa:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8006efc:	4b83      	ldr	r3, [pc, #524]	; (800710c <tud_task_ext+0x2ec>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f040 8116 	bne.w	8007134 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8006f08:	4a7f      	ldr	r2, [pc, #508]	; (8007108 <tud_task_ext+0x2e8>)
 8006f0a:	7813      	ldrb	r3, [r2, #0]
 8006f0c:	f043 0301 	orr.w	r3, r3, #1
 8006f10:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8006f12:	4a7d      	ldr	r2, [pc, #500]	; (8007108 <tud_task_ext+0x2e8>)
 8006f14:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8006f18:	f36f 0300 	bfc	r3, #0, #1
 8006f1c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8006f20:	4a79      	ldr	r2, [pc, #484]	; (8007108 <tud_task_ext+0x2e8>)
 8006f22:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8006f26:	f36f 0382 	bfc	r3, #2, #1
 8006f2a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8006f2e:	4a76      	ldr	r2, [pc, #472]	; (8007108 <tud_task_ext+0x2e8>)
 8006f30:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8006f34:	f36f 0300 	bfc	r3, #0, #1
 8006f38:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8006f3c:	4a72      	ldr	r2, [pc, #456]	; (8007108 <tud_task_ext+0x2e8>)
 8006f3e:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8006f42:	f36f 0382 	bfc	r3, #2, #1
 8006f46:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8006f4a:	7b3a      	ldrb	r2, [r7, #12]
 8006f4c:	f107 030c 	add.w	r3, r7, #12
 8006f50:	3304      	adds	r3, #4
 8006f52:	4619      	mov	r1, r3
 8006f54:	4610      	mov	r0, r2
 8006f56:	f000 f91f 	bl	8007198 <process_control_request>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	f083 0301 	eor.w	r3, r3, #1
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 80e8 	beq.w	8007138 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8006f68:	7b3b      	ldrb	r3, [r7, #12]
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f003 fa35 	bl	800a3dc <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8006f72:	7b3b      	ldrb	r3, [r7, #12]
 8006f74:	2180      	movs	r1, #128	; 0x80
 8006f76:	4618      	mov	r0, r3
 8006f78:	f003 fa30 	bl	800a3dc <dcd_edpt_stall>
        }
        break;
 8006f7c:	e0dc      	b.n	8007138 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8006f7e:	7c3b      	ldrb	r3, [r7, #16]
 8006f80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006f84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006f88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006f8c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f94:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 8006f96:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006f9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006f9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006fa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fa6:	09db      	lsrs	r3, r3, #7
 8006fa8:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 8006faa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8006fae:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8006fb2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006fb6:	4954      	ldr	r1, [pc, #336]	; (8007108 <tud_task_ext+0x2e8>)
 8006fb8:	0052      	lsls	r2, r2, #1
 8006fba:	440a      	add	r2, r1
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f103 0220 	add.w	r2, r3, #32
 8006fc2:	7913      	ldrb	r3, [r2, #4]
 8006fc4:	f36f 0300 	bfc	r3, #0, #1
 8006fc8:	7113      	strb	r3, [r2, #4]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8006fca:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8006fce:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006fd2:	494d      	ldr	r1, [pc, #308]	; (8007108 <tud_task_ext+0x2e8>)
 8006fd4:	0052      	lsls	r2, r2, #1
 8006fd6:	440a      	add	r2, r1
 8006fd8:	4413      	add	r3, r2
 8006fda:	f103 0220 	add.w	r2, r3, #32
 8006fde:	7913      	ldrb	r3, [r2, #4]
 8006fe0:	f36f 0382 	bfc	r3, #2, #1
 8006fe4:	7113      	strb	r3, [r2, #4]

        if (0 == epnum) {
 8006fe6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d107      	bne.n	8006ffe <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 8006fee:	7b38      	ldrb	r0, [r7, #12]
 8006ff0:	7c7a      	ldrb	r2, [r7, #17]
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8006ff8:	f001 fafc 	bl	80085f4 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8006ffc:	e0a7      	b.n	800714e <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8006ffe:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8007002:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007006:	4940      	ldr	r1, [pc, #256]	; (8007108 <tud_task_ext+0x2e8>)
 8007008:	0052      	lsls	r2, r2, #1
 800700a:	440a      	add	r2, r1
 800700c:	4413      	add	r3, r2
 800700e:	3314      	adds	r3, #20
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  usbd_class_driver_t const * driver = NULL;
 8007016:	2300      	movs	r3, #0
 8007018:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 800701a:	4b3e      	ldr	r3, [pc, #248]	; (8007114 <tud_task_ext+0x2f4>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007022:	429a      	cmp	r2, r3
 8007024:	d207      	bcs.n	8007036 <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 8007026:	4b3c      	ldr	r3, [pc, #240]	; (8007118 <tud_task_ext+0x2f8>)
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800702e:	015b      	lsls	r3, r3, #5
 8007030:	4413      	add	r3, r2
 8007032:	623b      	str	r3, [r7, #32]
 8007034:	e00e      	b.n	8007054 <tud_task_ext+0x234>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007036:	4b37      	ldr	r3, [pc, #220]	; (8007114 <tud_task_ext+0x2f4>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800703e:	429a      	cmp	r2, r3
 8007040:	d808      	bhi.n	8007054 <tud_task_ext+0x234>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007042:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007046:	4a33      	ldr	r2, [pc, #204]	; (8007114 <tud_task_ext+0x2f4>)
 8007048:	7812      	ldrb	r2, [r2, #0]
 800704a:	1a9b      	subs	r3, r3, r2
 800704c:	015b      	lsls	r3, r3, #5
 800704e:	4a33      	ldr	r2, [pc, #204]	; (800711c <tud_task_ext+0x2fc>)
 8007050:	4413      	add	r3, r2
 8007052:	623b      	str	r3, [r7, #32]
  return driver;
 8007054:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8007056:	643b      	str	r3, [r7, #64]	; 0x40
          TU_ASSERT(driver,);
 8007058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800705a:	2b00      	cmp	r3, #0
 800705c:	d109      	bne.n	8007072 <tud_task_ext+0x252>
 800705e:	4b2c      	ldr	r3, [pc, #176]	; (8007110 <tud_task_ext+0x2f0>)
 8007060:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d076      	beq.n	800715c <tud_task_ext+0x33c>
 800706e:	be00      	bkpt	0x0000
 8007070:	e074      	b.n	800715c <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8007072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007074:	699c      	ldr	r4, [r3, #24]
 8007076:	7b38      	ldrb	r0, [r7, #12]
 8007078:	7c7a      	ldrb	r2, [r7, #17]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8007080:	47a0      	blx	r4
        break;
 8007082:	e064      	b.n	800714e <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 8007084:	4b20      	ldr	r3, [pc, #128]	; (8007108 <tud_task_ext+0x2e8>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d054      	beq.n	800713c <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8007092:	4b1d      	ldr	r3, [pc, #116]	; (8007108 <tud_task_ext+0x2e8>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	bf14      	ite	ne
 80070a0:	2301      	movne	r3, #1
 80070a2:	2300      	moveq	r3, #0
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7ff fd27 	bl	8006afa <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80070ac:	e046      	b.n	800713c <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 80070ae:	4b16      	ldr	r3, [pc, #88]	; (8007108 <tud_task_ext+0x2e8>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d041      	beq.n	8007140 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 80070bc:	f7ff fd27 	bl	8006b0e <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80070c0:	e03e      	b.n	8007140 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d03d      	beq.n	8007144 <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	4610      	mov	r0, r2
 80070ce:	4798      	blx	r3
        }
        break;
 80070d0:	e038      	b.n	8007144 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 80070d2:	4b0d      	ldr	r3, [pc, #52]	; (8007108 <tud_task_ext+0x2e8>)
 80070d4:	78db      	ldrb	r3, [r3, #3]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	61fb      	str	r3, [r7, #28]
 80070da:	2300      	movs	r3, #0
 80070dc:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80070de:	7efb      	ldrb	r3, [r7, #27]
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	fa22 f303 	lsr.w	r3, r2, r3
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bf14      	ite	ne
 80070ee:	2301      	movne	r3, #1
 80070f0:	2300      	moveq	r3, #0
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d027      	beq.n	8007148 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff fccf 	bl	8006a9e <tud_sof_cb>
        }
      break;
 8007100:	e022      	b.n	8007148 <tud_task_ext+0x328>
 8007102:	bf00      	nop
 8007104:	20000634 	.word	0x20000634
 8007108:	20000534 	.word	0x20000534
 800710c:	20000568 	.word	0x20000568
 8007110:	e000edf0 	.word	0xe000edf0
 8007114:	20000570 	.word	0x20000570
 8007118:	2000056c 	.word	0x2000056c
 800711c:	0800b1cc 	.word	0x0800b1cc

      default:
        TU_BREAKPOINT();
 8007120:	4b10      	ldr	r3, [pc, #64]	; (8007164 <tud_task_ext+0x344>)
 8007122:	637b      	str	r3, [r7, #52]	; 0x34
 8007124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00d      	beq.n	800714c <tud_task_ext+0x32c>
 8007130:	be00      	bkpt	0x0000
        break;
 8007132:	e00b      	b.n	800714c <tud_task_ext+0x32c>
          break;
 8007134:	bf00      	nop
 8007136:	e682      	b.n	8006e3e <tud_task_ext+0x1e>
        break;
 8007138:	bf00      	nop
 800713a:	e680      	b.n	8006e3e <tud_task_ext+0x1e>
        break;
 800713c:	bf00      	nop
 800713e:	e67e      	b.n	8006e3e <tud_task_ext+0x1e>
        break;
 8007140:	bf00      	nop
 8007142:	e67c      	b.n	8006e3e <tud_task_ext+0x1e>
        break;
 8007144:	bf00      	nop
 8007146:	e67a      	b.n	8006e3e <tud_task_ext+0x1e>
      break;
 8007148:	bf00      	nop
 800714a:	e678      	b.n	8006e3e <tud_task_ext+0x1e>
        break;
 800714c:	bf00      	nop
  while (1) {
 800714e:	e676      	b.n	8006e3e <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8007150:	bf00      	nop
 8007152:	e004      	b.n	800715e <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8007154:	bf00      	nop
 8007156:	e002      	b.n	800715e <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8007158:	bf00      	nop
 800715a:	e000      	b.n	800715e <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 800715c:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 800715e:	374c      	adds	r7, #76	; 0x4c
 8007160:	46bd      	mov	sp, r7
 8007162:	bd90      	pop	{r4, r7, pc}
 8007164:	e000edf0 	.word	0xe000edf0

08007168 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	4618      	mov	r0, r3
 800717c:	f001 fa12 	bl	80085a4 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	7bf8      	ldrb	r0, [r7, #15]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	2101      	movs	r1, #1
 800718a:	4798      	blx	r3
 800718c:	4603      	mov	r3, r0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 8007198:	b580      	push	{r7, lr}
 800719a:	b09a      	sub	sp, #104	; 0x68
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	6039      	str	r1, [r7, #0]
 80071a2:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80071a4:	2000      	movs	r0, #0
 80071a6:	f001 f9fd 	bl	80085a4 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b60      	cmp	r3, #96	; 0x60
 80071b6:	d10a      	bne.n	80071ce <process_control_request+0x36>
 80071b8:	4ba4      	ldr	r3, [pc, #656]	; (800744c <process_control_request+0x2b4>)
 80071ba:	633b      	str	r3, [r7, #48]	; 0x30
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d000      	beq.n	80071ca <process_control_request+0x32>
 80071c8:	be00      	bkpt	0x0000
 80071ca:	2300      	movs	r3, #0
 80071cc:	e2b9      	b.n	8007742 <process_control_request+0x5aa>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b40      	cmp	r3, #64	; 0x40
 80071da:	d10a      	bne.n	80071f2 <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 80071dc:	489c      	ldr	r0, [pc, #624]	; (8007450 <process_control_request+0x2b8>)
 80071de:	f001 f9e1 	bl	80085a4 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	2101      	movs	r1, #1
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7ff fc96 	bl	8006b1a <tud_vendor_control_xfer_cb>
 80071ee:	4603      	mov	r3, r0
 80071f0:	e2a7      	b.n	8007742 <process_control_request+0x5aa>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	f000 81c9 	beq.w	8007594 <process_control_request+0x3fc>
 8007202:	2b02      	cmp	r3, #2
 8007204:	f300 8290 	bgt.w	8007728 <process_control_request+0x590>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <process_control_request+0x7c>
 800720c:	2b01      	cmp	r3, #1
 800720e:	f000 8151 	beq.w	80074b4 <process_control_request+0x31c>
 8007212:	e289      	b.n	8007728 <process_control_request+0x590>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b20      	cmp	r3, #32
 8007220:	d142      	bne.n	80072a8 <process_control_request+0x110>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	889b      	ldrh	r3, [r3, #4]
 8007226:	b29b      	uxth	r3, r3
 8007228:	85fb      	strh	r3, [r7, #46]	; 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800722a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800722c:	b2db      	uxtb	r3, r3
 800722e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8007232:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007236:	2b0f      	cmp	r3, #15
 8007238:	d901      	bls.n	800723e <process_control_request+0xa6>
 800723a:	2300      	movs	r3, #0
 800723c:	e281      	b.n	8007742 <process_control_request+0x5aa>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800723e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007242:	4a84      	ldr	r2, [pc, #528]	; (8007454 <process_control_request+0x2bc>)
 8007244:	4413      	add	r3, r2
 8007246:	791b      	ldrb	r3, [r3, #4]
 8007248:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  usbd_class_driver_t const * driver = NULL;
 800724c:	2300      	movs	r3, #0
 800724e:	62bb      	str	r3, [r7, #40]	; 0x28
  if ( drvid < _app_driver_count ) {
 8007250:	4b81      	ldr	r3, [pc, #516]	; (8007458 <process_control_request+0x2c0>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8007258:	429a      	cmp	r2, r3
 800725a:	d207      	bcs.n	800726c <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 800725c:	4b7f      	ldr	r3, [pc, #508]	; (800745c <process_control_request+0x2c4>)
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007264:	015b      	lsls	r3, r3, #5
 8007266:	4413      	add	r3, r2
 8007268:	62bb      	str	r3, [r7, #40]	; 0x28
 800726a:	e00e      	b.n	800728a <process_control_request+0xf2>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800726c:	4b7a      	ldr	r3, [pc, #488]	; (8007458 <process_control_request+0x2c0>)
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8007274:	429a      	cmp	r2, r3
 8007276:	d808      	bhi.n	800728a <process_control_request+0xf2>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007278:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800727c:	4a76      	ldr	r2, [pc, #472]	; (8007458 <process_control_request+0x2c0>)
 800727e:	7812      	ldrb	r2, [r2, #0]
 8007280:	1a9b      	subs	r3, r3, r2
 8007282:	015b      	lsls	r3, r3, #5
 8007284:	4a76      	ldr	r2, [pc, #472]	; (8007460 <process_control_request+0x2c8>)
 8007286:	4413      	add	r3, r2
 8007288:	62bb      	str	r3, [r7, #40]	; 0x28
  return driver;
 800728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800728c:	63bb      	str	r3, [r7, #56]	; 0x38
        TU_VERIFY(driver);
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <process_control_request+0x100>
 8007294:	2300      	movs	r3, #0
 8007296:	e254      	b.n	8007742 <process_control_request+0x5aa>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff ff62 	bl	8007168 <invoke_class_control>
 80072a4:	4603      	mov	r3, r0
 80072a6:	e24c      	b.n	8007742 <process_control_request+0x5aa>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <process_control_request+0x134>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 80072b6:	4b65      	ldr	r3, [pc, #404]	; (800744c <process_control_request+0x2b4>)
 80072b8:	643b      	str	r3, [r7, #64]	; 0x40
 80072ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d000      	beq.n	80072c8 <process_control_request+0x130>
 80072c6:	be00      	bkpt	0x0000
        return false;
 80072c8:	2300      	movs	r3, #0
 80072ca:	e23a      	b.n	8007742 <process_control_request+0x5aa>
      }

      switch ( p_request->bRequest ) {
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	785b      	ldrb	r3, [r3, #1]
 80072d0:	2b09      	cmp	r3, #9
 80072d2:	f200 80e2 	bhi.w	800749a <process_control_request+0x302>
 80072d6:	a201      	add	r2, pc, #4	; (adr r2, 80072dc <process_control_request+0x144>)
 80072d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072dc:	08007465 	.word	0x08007465
 80072e0:	08007429 	.word	0x08007429
 80072e4:	0800749b 	.word	0x0800749b
 80072e8:	08007403 	.word	0x08007403
 80072ec:	0800749b 	.word	0x0800749b
 80072f0:	08007305 	.word	0x08007305
 80072f4:	080073e9 	.word	0x080073e9
 80072f8:	0800749b 	.word	0x0800749b
 80072fc:	08007329 	.word	0x08007329
 8007300:	08007341 	.word	0x08007341
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8007304:	6838      	ldr	r0, [r7, #0]
 8007306:	f001 f95b 	bl	80085c0 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	885b      	ldrh	r3, [r3, #2]
 800730e:	b29b      	uxth	r3, r3
 8007310:	b2da      	uxtb	r2, r3
 8007312:	79fb      	ldrb	r3, [r7, #7]
 8007314:	4611      	mov	r1, r2
 8007316:	4618      	mov	r0, r3
 8007318:	f001 fb42 	bl	80089a0 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 800731c:	4a4d      	ldr	r2, [pc, #308]	; (8007454 <process_control_request+0x2bc>)
 800731e:	7813      	ldrb	r3, [r2, #0]
 8007320:	f043 0302 	orr.w	r3, r3, #2
 8007324:	7013      	strb	r3, [r2, #0]
        break;
 8007326:	e0c4      	b.n	80074b2 <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8007328:	4b4a      	ldr	r3, [pc, #296]	; (8007454 <process_control_request+0x2bc>)
 800732a:	785b      	ldrb	r3, [r3, #1]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8007330:	f107 0213 	add.w	r2, r7, #19
 8007334:	79f8      	ldrb	r0, [r7, #7]
 8007336:	2301      	movs	r3, #1
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	f001 f8b7 	bl	80084ac <tud_control_xfer>
        }
        break;
 800733e:	e0b8      	b.n	80074b2 <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	885b      	ldrh	r3, [r3, #2]
 8007344:	b29b      	uxth	r3, r3
 8007346:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 800734a:	4b42      	ldr	r3, [pc, #264]	; (8007454 <process_control_request+0x2bc>)
 800734c:	785b      	ldrb	r3, [r3, #1]
 800734e:	b2db      	uxtb	r3, r3
 8007350:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8007354:	429a      	cmp	r2, r3
 8007356:	d041      	beq.n	80073dc <process_control_request+0x244>
            if ( _usbd_dev.cfg_num ) {
 8007358:	4b3e      	ldr	r3, [pc, #248]	; (8007454 <process_control_request+0x2bc>)
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d014      	beq.n	800738c <process_control_request+0x1f4>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 8007362:	79fb      	ldrb	r3, [r7, #7]
 8007364:	2100      	movs	r1, #0
 8007366:	4618      	mov	r0, r3
 8007368:	f001 faf2 	bl	8008950 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	4618      	mov	r0, r3
 8007370:	f002 fcd8 	bl	8009d24 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8007374:	4b37      	ldr	r3, [pc, #220]	; (8007454 <process_control_request+0x2bc>)
 8007376:	789b      	ldrb	r3, [r3, #2]
 8007378:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              configuration_reset(rhport);
 800737c:	79fb      	ldrb	r3, [r7, #7]
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff fcda 	bl	8006d38 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8007384:	4a33      	ldr	r2, [pc, #204]	; (8007454 <process_control_request+0x2bc>)
 8007386:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800738a:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 800738c:	4a31      	ldr	r2, [pc, #196]	; (8007454 <process_control_request+0x2bc>)
 800738e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007392:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 8007394:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01d      	beq.n	80073d8 <process_control_request+0x240>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 800739c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80073a0:	79fb      	ldrb	r3, [r7, #7]
 80073a2:	4611      	mov	r1, r2
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 f9d5 	bl	8007754 <process_set_config>
 80073aa:	4603      	mov	r3, r0
 80073ac:	f083 0301 	eor.w	r3, r3, #1
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00d      	beq.n	80073d2 <process_control_request+0x23a>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 80073b6:	4b25      	ldr	r3, [pc, #148]	; (800744c <process_control_request+0x2b4>)
 80073b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d000      	beq.n	80073c8 <process_control_request+0x230>
 80073c6:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 80073c8:	4b22      	ldr	r3, [pc, #136]	; (8007454 <process_control_request+0x2bc>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	705a      	strb	r2, [r3, #1]
                return false;
 80073ce:	2300      	movs	r3, #0
 80073d0:	e1b7      	b.n	8007742 <process_control_request+0x5aa>
              }
              tud_mount_cb();
 80073d2:	f7ff fb86 	bl	8006ae2 <tud_mount_cb>
 80073d6:	e001      	b.n	80073dc <process_control_request+0x244>
            } else {
              tud_umount_cb();
 80073d8:	f7ff fb89 	bl	8006aee <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 80073dc:	79fb      	ldrb	r3, [r7, #7]
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fff1 	bl	80083c8 <tud_control_status>
        }
        break;
 80073e6:	e064      	b.n	80074b2 <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80073e8:	79fb      	ldrb	r3, [r7, #7]
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fad5 	bl	800799c <process_get_descriptor>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f083 0301 	eor.w	r3, r3, #1
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d058      	beq.n	80074b0 <process_control_request+0x318>
 80073fe:	2300      	movs	r3, #0
 8007400:	e19f      	b.n	8007742 <process_control_request+0x5aa>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	885b      	ldrh	r3, [r3, #2]
 8007406:	b29b      	uxth	r3, r3
 8007408:	2b01      	cmp	r3, #1
 800740a:	d10b      	bne.n	8007424 <process_control_request+0x28c>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 800740c:	4a11      	ldr	r2, [pc, #68]	; (8007454 <process_control_request+0x2bc>)
 800740e:	7813      	ldrb	r3, [r2, #0]
 8007410:	f043 0308 	orr.w	r3, r3, #8
 8007414:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 8007416:	79fb      	ldrb	r3, [r7, #7]
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	4618      	mov	r0, r3
 800741c:	f000 ffd4 	bl	80083c8 <tud_control_status>
            break;
 8007420:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 8007422:	e046      	b.n	80074b2 <process_control_request+0x31a>
            default: return false;
 8007424:	2300      	movs	r3, #0
 8007426:	e18c      	b.n	8007742 <process_control_request+0x5aa>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	885b      	ldrh	r3, [r3, #2]
 800742c:	b29b      	uxth	r3, r3
 800742e:	2b01      	cmp	r3, #1
 8007430:	d001      	beq.n	8007436 <process_control_request+0x29e>
 8007432:	2300      	movs	r3, #0
 8007434:	e185      	b.n	8007742 <process_control_request+0x5aa>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8007436:	4a07      	ldr	r2, [pc, #28]	; (8007454 <process_control_request+0x2bc>)
 8007438:	7813      	ldrb	r3, [r2, #0]
 800743a:	f36f 03c3 	bfc	r3, #3, #1
 800743e:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 ffbf 	bl	80083c8 <tud_control_status>
        break;
 800744a:	e032      	b.n	80074b2 <process_control_request+0x31a>
 800744c:	e000edf0 	.word	0xe000edf0
 8007450:	08006b1b 	.word	0x08006b1b
 8007454:	20000534 	.word	0x20000534
 8007458:	20000570 	.word	0x20000570
 800745c:	2000056c 	.word	0x2000056c
 8007460:	0800b1cc 	.word	0x0800b1cc

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8007464:	4b94      	ldr	r3, [pc, #592]	; (80076b8 <process_control_request+0x520>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	095b      	lsrs	r3, r3, #5
 800746a:	b2db      	uxtb	r3, r3
 800746c:	b29b      	uxth	r3, r3
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	4b90      	ldr	r3, [pc, #576]	; (80076b8 <process_control_request+0x520>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	089b      	lsrs	r3, r3, #2
 800747a:	b2db      	uxtb	r3, r3
 800747c:	b29b      	uxth	r3, r3
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	b29b      	uxth	r3, r3
 8007484:	4313      	orrs	r3, r2
 8007486:	b29b      	uxth	r3, r3
 8007488:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 800748a:	f107 0210 	add.w	r2, r7, #16
 800748e:	79f8      	ldrb	r0, [r7, #7]
 8007490:	2302      	movs	r3, #2
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	f001 f80a 	bl	80084ac <tud_control_xfer>
          break;
 8007498:	e00b      	b.n	80074b2 <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 800749a:	4b88      	ldr	r3, [pc, #544]	; (80076bc <process_control_request+0x524>)
 800749c:	647b      	str	r3, [r7, #68]	; 0x44
 800749e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d000      	beq.n	80074ac <process_control_request+0x314>
 80074aa:	be00      	bkpt	0x0000
 80074ac:	2300      	movs	r3, #0
 80074ae:	e148      	b.n	8007742 <process_control_request+0x5aa>
        break;
 80074b0:	bf00      	nop
      }
    break;
 80074b2:	e145      	b.n	8007740 <process_control_request+0x5a8>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	889b      	ldrh	r3, [r3, #4]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80074bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80074c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074c8:	2b0f      	cmp	r3, #15
 80074ca:	d901      	bls.n	80074d0 <process_control_request+0x338>
 80074cc:	2300      	movs	r3, #0
 80074ce:	e138      	b.n	8007742 <process_control_request+0x5aa>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80074d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074d4:	4a78      	ldr	r2, [pc, #480]	; (80076b8 <process_control_request+0x520>)
 80074d6:	4413      	add	r3, r2
 80074d8:	791b      	ldrb	r3, [r3, #4]
 80074da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  usbd_class_driver_t const * driver = NULL;
 80074de:	2300      	movs	r3, #0
 80074e0:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 80074e2:	4b77      	ldr	r3, [pc, #476]	; (80076c0 <process_control_request+0x528>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d207      	bcs.n	80074fe <process_control_request+0x366>
    driver = &_app_driver[drvid];
 80074ee:	4b75      	ldr	r3, [pc, #468]	; (80076c4 <process_control_request+0x52c>)
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80074f6:	015b      	lsls	r3, r3, #5
 80074f8:	4413      	add	r3, r2
 80074fa:	623b      	str	r3, [r7, #32]
 80074fc:	e00e      	b.n	800751c <process_control_request+0x384>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80074fe:	4b70      	ldr	r3, [pc, #448]	; (80076c0 <process_control_request+0x528>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8007506:	429a      	cmp	r2, r3
 8007508:	d808      	bhi.n	800751c <process_control_request+0x384>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800750a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800750e:	4a6c      	ldr	r2, [pc, #432]	; (80076c0 <process_control_request+0x528>)
 8007510:	7812      	ldrb	r2, [r2, #0]
 8007512:	1a9b      	subs	r3, r3, r2
 8007514:	015b      	lsls	r3, r3, #5
 8007516:	4a6c      	ldr	r2, [pc, #432]	; (80076c8 <process_control_request+0x530>)
 8007518:	4413      	add	r3, r2
 800751a:	623b      	str	r3, [r7, #32]
  return driver;
 800751c:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800751e:	653b      	str	r3, [r7, #80]	; 0x50
      TU_VERIFY(driver);
 8007520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <process_control_request+0x392>
 8007526:	2300      	movs	r3, #0
 8007528:	e10b      	b.n	8007742 <process_control_request+0x5aa>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 800752a:	79fb      	ldrb	r3, [r7, #7]
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007530:	4618      	mov	r0, r3
 8007532:	f7ff fe19 	bl	8007168 <invoke_class_control>
 8007536:	4603      	mov	r3, r0
 8007538:	f083 0301 	eor.w	r3, r3, #1
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 80fd 	beq.w	800773e <process_control_request+0x5a6>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <process_control_request+0x3be>
 8007552:	2300      	movs	r3, #0
 8007554:	e0f5      	b.n	8007742 <process_control_request+0x5aa>

        switch(p_request->bRequest) {
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	785b      	ldrb	r3, [r3, #1]
 800755a:	3b0a      	subs	r3, #10
 800755c:	2b01      	cmp	r3, #1
 800755e:	d816      	bhi.n	800758e <process_control_request+0x3f6>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8007560:	2000      	movs	r0, #0
 8007562:	f001 f81f 	bl	80085a4 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	785b      	ldrb	r3, [r3, #1]
 800756a:	2b0a      	cmp	r3, #10
 800756c:	d109      	bne.n	8007582 <process_control_request+0x3ea>
              uint8_t alternate = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8007572:	f107 020f 	add.w	r2, r7, #15
 8007576:	79f8      	ldrb	r0, [r7, #7]
 8007578:	2301      	movs	r3, #1
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	f000 ff96 	bl	80084ac <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 8007580:	e007      	b.n	8007592 <process_control_request+0x3fa>
              tud_control_status(rhport, p_request);
 8007582:	79fb      	ldrb	r3, [r7, #7]
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	4618      	mov	r0, r3
 8007588:	f000 ff1e 	bl	80083c8 <tud_control_status>
          break;
 800758c:	e001      	b.n	8007592 <process_control_request+0x3fa>

          default: return false;
 800758e:	2300      	movs	r3, #0
 8007590:	e0d7      	b.n	8007742 <process_control_request+0x5aa>
        }
      }
      break;
 8007592:	e0d4      	b.n	800773e <process_control_request+0x5a6>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	889b      	ldrh	r3, [r3, #4]
 8007598:	b29b      	uxth	r3, r3
 800759a:	83bb      	strh	r3, [r7, #28]
 800759c:	8bbb      	ldrh	r3, [r7, #28]
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80075a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075a8:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80075aa:	7fbb      	ldrb	r3, [r7, #30]
 80075ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b0:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80075b2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80075b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075ba:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80075bc:	7ffb      	ldrb	r3, [r7, #31]
 80075be:	09db      	lsrs	r3, r3, #7
 80075c0:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80075c2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80075c6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80075ca:	2b07      	cmp	r3, #7
 80075cc:	d90a      	bls.n	80075e4 <process_control_request+0x44c>
 80075ce:	4b3b      	ldr	r3, [pc, #236]	; (80076bc <process_control_request+0x524>)
 80075d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80075d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d000      	beq.n	80075e0 <process_control_request+0x448>
 80075de:	be00      	bkpt	0x0000
 80075e0:	2300      	movs	r3, #0
 80075e2:	e0ae      	b.n	8007742 <process_control_request+0x5aa>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80075e4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80075e8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80075ec:	4932      	ldr	r1, [pc, #200]	; (80076b8 <process_control_request+0x520>)
 80075ee:	0052      	lsls	r2, r2, #1
 80075f0:	440a      	add	r2, r1
 80075f2:	4413      	add	r3, r2
 80075f4:	3314      	adds	r3, #20
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 80075fa:	2300      	movs	r3, #0
 80075fc:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 80075fe:	4b30      	ldr	r3, [pc, #192]	; (80076c0 <process_control_request+0x528>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	7efa      	ldrb	r2, [r7, #27]
 8007604:	429a      	cmp	r2, r3
 8007606:	d206      	bcs.n	8007616 <process_control_request+0x47e>
    driver = &_app_driver[drvid];
 8007608:	4b2e      	ldr	r3, [pc, #184]	; (80076c4 <process_control_request+0x52c>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	7efb      	ldrb	r3, [r7, #27]
 800760e:	015b      	lsls	r3, r3, #5
 8007610:	4413      	add	r3, r2
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	e00c      	b.n	8007630 <process_control_request+0x498>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007616:	4b2a      	ldr	r3, [pc, #168]	; (80076c0 <process_control_request+0x528>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	7efa      	ldrb	r2, [r7, #27]
 800761c:	429a      	cmp	r2, r3
 800761e:	d807      	bhi.n	8007630 <process_control_request+0x498>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007620:	7efb      	ldrb	r3, [r7, #27]
 8007622:	4a27      	ldr	r2, [pc, #156]	; (80076c0 <process_control_request+0x528>)
 8007624:	7812      	ldrb	r2, [r2, #0]
 8007626:	1a9b      	subs	r3, r3, r2
 8007628:	015b      	lsls	r3, r3, #5
 800762a:	4a27      	ldr	r2, [pc, #156]	; (80076c8 <process_control_request+0x530>)
 800762c:	4413      	add	r3, r2
 800762e:	617b      	str	r3, [r7, #20]
  return driver;
 8007630:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8007632:	663b      	str	r3, [r7, #96]	; 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00c      	beq.n	800765c <process_control_request+0x4c4>
        // Forward class request to its driver
        TU_VERIFY(driver);
 8007642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <process_control_request+0x4b4>
 8007648:	2300      	movs	r3, #0
 800764a:	e07a      	b.n	8007742 <process_control_request+0x5aa>
        return invoke_class_control(rhport, driver, p_request);
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff fd88 	bl	8007168 <invoke_class_control>
 8007658:	4603      	mov	r3, r0
 800765a:	e072      	b.n	8007742 <process_control_request+0x5aa>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	785b      	ldrb	r3, [r3, #1]
 8007660:	2b03      	cmp	r3, #3
 8007662:	d018      	beq.n	8007696 <process_control_request+0x4fe>
 8007664:	2b03      	cmp	r3, #3
 8007666:	dc52      	bgt.n	800770e <process_control_request+0x576>
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <process_control_request+0x4da>
 800766c:	2b01      	cmp	r3, #1
 800766e:	d012      	beq.n	8007696 <process_control_request+0x4fe>
 8007670:	e04d      	b.n	800770e <process_control_request+0x576>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8007672:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007676:	79fb      	ldrb	r3, [r7, #7]
 8007678:	4611      	mov	r1, r2
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fe5c 	bl	8008338 <usbd_edpt_stalled>
 8007680:	4603      	mov	r3, r0
 8007682:	b29b      	uxth	r3, r3
 8007684:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8007686:	f107 020c 	add.w	r2, r7, #12
 800768a:	79f8      	ldrb	r0, [r7, #7]
 800768c:	2302      	movs	r3, #2
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	f000 ff0c 	bl	80084ac <tud_control_xfer>
          }
          break;
 8007694:	e047      	b.n	8007726 <process_control_request+0x58e>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	885b      	ldrh	r3, [r3, #2]
 800769a:	b29b      	uxth	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d11c      	bne.n	80076da <process_control_request+0x542>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	785b      	ldrb	r3, [r3, #1]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d111      	bne.n	80076cc <process_control_request+0x534>
                usbd_edpt_clear_stall(rhport, ep_addr);
 80076a8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80076ac:	79fb      	ldrb	r3, [r7, #7]
 80076ae:	4611      	mov	r1, r2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 fe03 	bl	80082bc <usbd_edpt_clear_stall>
 80076b6:	e010      	b.n	80076da <process_control_request+0x542>
 80076b8:	20000534 	.word	0x20000534
 80076bc:	e000edf0 	.word	0xe000edf0
 80076c0:	20000570 	.word	0x20000570
 80076c4:	2000056c 	.word	0x2000056c
 80076c8:	0800b1cc 	.word	0x0800b1cc
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 80076cc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80076d0:	79fb      	ldrb	r3, [r7, #7]
 80076d2:	4611      	mov	r1, r2
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fdb3 	bl	8008240 <usbd_edpt_stall>
              }
            }

            if (driver) {
 80076da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d021      	beq.n	8007724 <process_control_request+0x58c>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 80076e0:	79fb      	ldrb	r3, [r7, #7]
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff fd3e 	bl	8007168 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 80076ec:	2000      	movs	r0, #0
 80076ee:	f000 ff59 	bl	80085a4 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 80076f2:	4b16      	ldr	r3, [pc, #88]	; (800774c <process_control_request+0x5b4>)
 80076f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80076f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d110      	bne.n	8007724 <process_control_request+0x58c>
 8007702:	79fb      	ldrb	r3, [r7, #7]
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fe5e 	bl	80083c8 <tud_control_status>
            }
          }
          break;
 800770c:	e00a      	b.n	8007724 <process_control_request+0x58c>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 800770e:	4b10      	ldr	r3, [pc, #64]	; (8007750 <process_control_request+0x5b8>)
 8007710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d000      	beq.n	8007720 <process_control_request+0x588>
 800771e:	be00      	bkpt	0x0000
            return false;
 8007720:	2300      	movs	r3, #0
 8007722:	e00e      	b.n	8007742 <process_control_request+0x5aa>
          break;
 8007724:	bf00      	nop
        }
      }
    }
    break;
 8007726:	e00b      	b.n	8007740 <process_control_request+0x5a8>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 8007728:	4b09      	ldr	r3, [pc, #36]	; (8007750 <process_control_request+0x5b8>)
 800772a:	637b      	str	r3, [r7, #52]	; 0x34
 800772c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d000      	beq.n	800773a <process_control_request+0x5a2>
 8007738:	be00      	bkpt	0x0000
      return false;
 800773a:	2300      	movs	r3, #0
 800773c:	e001      	b.n	8007742 <process_control_request+0x5aa>
      break;
 800773e:	bf00      	nop
  }

  return true;
 8007740:	2301      	movs	r3, #1
}
 8007742:	4618      	mov	r0, r3
 8007744:	3768      	adds	r7, #104	; 0x68
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20000534 	.word	0x20000534
 8007750:	e000edf0 	.word	0xe000edf0

08007754 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b096      	sub	sp, #88	; 0x58
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	460a      	mov	r2, r1
 800775e:	71fb      	strb	r3, [r7, #7]
 8007760:	4613      	mov	r3, r2
 8007762:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8007764:	79bb      	ldrb	r3, [r7, #6]
 8007766:	3b01      	subs	r3, #1
 8007768:	b2db      	uxtb	r3, r3
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe f902 	bl	8005974 <tud_descriptor_configuration_cb>
 8007770:	64f8      	str	r0, [r7, #76]	; 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8007772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <process_set_config+0x2c>
 8007778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800777a:	785b      	ldrb	r3, [r3, #1]
 800777c:	2b02      	cmp	r3, #2
 800777e:	d00a      	beq.n	8007796 <process_set_config+0x42>
 8007780:	4b80      	ldr	r3, [pc, #512]	; (8007984 <process_set_config+0x230>)
 8007782:	623b      	str	r3, [r7, #32]
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b00      	cmp	r3, #0
 800778e:	d000      	beq.n	8007792 <process_set_config+0x3e>
 8007790:	be00      	bkpt	0x0000
 8007792:	2300      	movs	r3, #0
 8007794:	e0f1      	b.n	800797a <process_set_config+0x226>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8007796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007798:	79db      	ldrb	r3, [r3, #7]
 800779a:	115b      	asrs	r3, r3, #5
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	b2d9      	uxtb	r1, r3
 80077a2:	4a79      	ldr	r2, [pc, #484]	; (8007988 <process_set_config+0x234>)
 80077a4:	7813      	ldrb	r3, [r2, #0]
 80077a6:	f361 1304 	bfi	r3, r1, #4, #1
 80077aa:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 80077ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ae:	79db      	ldrb	r3, [r3, #7]
 80077b0:	119b      	asrs	r3, r3, #6
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	b2d9      	uxtb	r1, r3
 80077b8:	4a73      	ldr	r2, [pc, #460]	; (8007988 <process_set_config+0x234>)
 80077ba:	7813      	ldrb	r3, [r2, #0]
 80077bc:	f361 1345 	bfi	r3, r1, #5, #1
 80077c0:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80077c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c4:	3309      	adds	r3, #9
 80077c6:	657b      	str	r3, [r7, #84]	; 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 80077c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ca:	885b      	ldrh	r3, [r3, #2]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	461a      	mov	r2, r3
 80077d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d2:	4413      	add	r3, r2
 80077d4:	64bb      	str	r3, [r7, #72]	; 0x48

  while( p_desc < desc_end )
 80077d6:	e0ca      	b.n	800796e <process_set_config+0x21a>
  {
    uint8_t assoc_itf_count = 1;
 80077d8:	2301      	movs	r3, #1
 80077da:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80077de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077e0:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	3301      	adds	r3, #1
 80077e6:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 80077e8:	2b0b      	cmp	r3, #11
 80077ea:	d10f      	bne.n	800780c <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 80077ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077ee:	647b      	str	r3, [r7, #68]	; 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 80077f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077f2:	78db      	ldrb	r3, [r3, #3]
 80077f4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80077f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077fa:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 800780a:	657b      	str	r3, [r7, #84]	; 0x54
 800780c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800780e:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	3301      	adds	r3, #1
 8007814:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8007816:	2b04      	cmp	r3, #4
 8007818:	d00a      	beq.n	8007830 <process_set_config+0xdc>
 800781a:	4b5a      	ldr	r3, [pc, #360]	; (8007984 <process_set_config+0x230>)
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d000      	beq.n	800782c <process_set_config+0xd8>
 800782a:	be00      	bkpt	0x0000
 800782c:	2300      	movs	r3, #0
 800782e:	e0a4      	b.n	800797a <process_set_config+0x226>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8007830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007832:	643b      	str	r3, [r7, #64]	; 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8007834:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 800783c:	2300      	movs	r3, #0
 800783e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8007842:	e07c      	b.n	800793e <process_set_config+0x1ea>
 8007844:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8007848:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 800784a:	2300      	movs	r3, #0
 800784c:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 800784e:	4b4f      	ldr	r3, [pc, #316]	; (800798c <process_set_config+0x238>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	7bfa      	ldrb	r2, [r7, #15]
 8007854:	429a      	cmp	r2, r3
 8007856:	d206      	bcs.n	8007866 <process_set_config+0x112>
    driver = &_app_driver[drvid];
 8007858:	4b4d      	ldr	r3, [pc, #308]	; (8007990 <process_set_config+0x23c>)
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	015b      	lsls	r3, r3, #5
 8007860:	4413      	add	r3, r2
 8007862:	60bb      	str	r3, [r7, #8]
 8007864:	e00c      	b.n	8007880 <process_set_config+0x12c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007866:	4b49      	ldr	r3, [pc, #292]	; (800798c <process_set_config+0x238>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	7bfa      	ldrb	r2, [r7, #15]
 800786c:	429a      	cmp	r2, r3
 800786e:	d807      	bhi.n	8007880 <process_set_config+0x12c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	4a46      	ldr	r2, [pc, #280]	; (800798c <process_set_config+0x238>)
 8007874:	7812      	ldrb	r2, [r2, #0]
 8007876:	1a9b      	subs	r3, r3, r2
 8007878:	015b      	lsls	r3, r3, #5
 800787a:	4a46      	ldr	r2, [pc, #280]	; (8007994 <process_set_config+0x240>)
 800787c:	4413      	add	r3, r2
 800787e:	60bb      	str	r3, [r7, #8]
  return driver;
 8007880:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8007882:	63bb      	str	r3, [r7, #56]	; 0x38
      TU_ASSERT(driver);
 8007884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10a      	bne.n	80078a0 <process_set_config+0x14c>
 800788a:	4b3e      	ldr	r3, [pc, #248]	; (8007984 <process_set_config+0x230>)
 800788c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d000      	beq.n	800789c <process_set_config+0x148>
 800789a:	be00      	bkpt	0x0000
 800789c:	2300      	movs	r3, #0
 800789e:	e06c      	b.n	800797a <process_set_config+0x226>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80078a6:	79f8      	ldrb	r0, [r7, #7]
 80078a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078aa:	4798      	blx	r3
 80078ac:	4603      	mov	r3, r0
 80078ae:	86fb      	strh	r3, [r7, #54]	; 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80078b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80078b2:	2b08      	cmp	r3, #8
 80078b4:	d93e      	bls.n	8007934 <process_set_config+0x1e0>
 80078b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80078b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d83a      	bhi.n	8007934 <process_set_config+0x1e0>
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80078be:	2300      	movs	r3, #0
 80078c0:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 80078c4:	e024      	b.n	8007910 <process_set_config+0x1bc>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80078c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c8:	789a      	ldrb	r2, [r3, #2]
 80078ca:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80078ce:	4413      	add	r3, r2
 80078d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80078d4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80078d8:	4a2b      	ldr	r2, [pc, #172]	; (8007988 <process_set_config+0x234>)
 80078da:	4413      	add	r3, r2
 80078dc:	791b      	ldrb	r3, [r3, #4]
 80078de:	2bff      	cmp	r3, #255	; 0xff
 80078e0:	d00a      	beq.n	80078f8 <process_set_config+0x1a4>
 80078e2:	4b28      	ldr	r3, [pc, #160]	; (8007984 <process_set_config+0x230>)
 80078e4:	633b      	str	r3, [r7, #48]	; 0x30
 80078e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d000      	beq.n	80078f4 <process_set_config+0x1a0>
 80078f2:	be00      	bkpt	0x0000
 80078f4:	2300      	movs	r3, #0
 80078f6:	e040      	b.n	800797a <process_set_config+0x226>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 80078f8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80078fc:	4a22      	ldr	r2, [pc, #136]	; (8007988 <process_set_config+0x234>)
 80078fe:	4413      	add	r3, r2
 8007900:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8007904:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8007906:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800790a:	3301      	adds	r3, #1
 800790c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8007910:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8007914:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007918:	429a      	cmp	r2, r3
 800791a:	d3d4      	bcc.n	80078c6 <process_set_config+0x172>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 800791c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8007920:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007924:	481c      	ldr	r0, [pc, #112]	; (8007998 <process_set_config+0x244>)
 8007926:	f003 f9ad 	bl	800ac84 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 800792a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800792c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800792e:	4413      	add	r3, r2
 8007930:	657b      	str	r3, [r7, #84]	; 0x54

        break; // exit driver find loop
 8007932:	e00b      	b.n	800794c <process_set_config+0x1f8>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8007934:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8007938:	3301      	adds	r3, #1
 800793a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800793e:	4b13      	ldr	r3, [pc, #76]	; (800798c <process_set_config+0x238>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8007946:	429a      	cmp	r2, r3
 8007948:	f67f af7c 	bls.w	8007844 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 800794c:	4b0f      	ldr	r3, [pc, #60]	; (800798c <process_set_config+0x238>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8007954:	429a      	cmp	r2, r3
 8007956:	d90a      	bls.n	800796e <process_set_config+0x21a>
 8007958:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <process_set_config+0x230>)
 800795a:	62bb      	str	r3, [r7, #40]	; 0x28
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d000      	beq.n	800796a <process_set_config+0x216>
 8007968:	be00      	bkpt	0x0000
 800796a:	2300      	movs	r3, #0
 800796c:	e005      	b.n	800797a <process_set_config+0x226>
  while( p_desc < desc_end )
 800796e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007972:	429a      	cmp	r2, r3
 8007974:	f4ff af30 	bcc.w	80077d8 <process_set_config+0x84>
  }

  return true;
 8007978:	2301      	movs	r3, #1
}
 800797a:	4618      	mov	r0, r3
 800797c:	3758      	adds	r7, #88	; 0x58
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	e000edf0 	.word	0xe000edf0
 8007988:	20000534 	.word	0x20000534
 800798c:	20000570 	.word	0x20000570
 8007990:	2000056c 	.word	0x2000056c
 8007994:	0800b1cc 	.word	0x0800b1cc
 8007998:	20000548 	.word	0x20000548

0800799c <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b094      	sub	sp, #80	; 0x50
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	6039      	str	r1, [r7, #0]
 80079a6:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	885b      	ldrh	r3, [r3, #2]
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80079b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079b2:	0a1b      	lsrs	r3, r3, #8
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	885b      	ldrh	r3, [r3, #2]
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80079c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 80079cc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80079d0:	3b01      	subs	r3, #1
 80079d2:	2b0e      	cmp	r3, #14
 80079d4:	f200 80b6 	bhi.w	8007b44 <process_get_descriptor+0x1a8>
 80079d8:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <process_get_descriptor+0x44>)
 80079da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079de:	bf00      	nop
 80079e0:	08007a1d 	.word	0x08007a1d
 80079e4:	08007a81 	.word	0x08007a81
 80079e8:	08007ae7 	.word	0x08007ae7
 80079ec:	08007b45 	.word	0x08007b45
 80079f0:	08007b45 	.word	0x08007b45
 80079f4:	08007b1d 	.word	0x08007b1d
 80079f8:	08007a81 	.word	0x08007a81
 80079fc:	08007b45 	.word	0x08007b45
 8007a00:	08007b45 	.word	0x08007b45
 8007a04:	08007b45 	.word	0x08007b45
 8007a08:	08007b45 	.word	0x08007b45
 8007a0c:	08007b45 	.word	0x08007b45
 8007a10:	08007b45 	.word	0x08007b45
 8007a14:	08007b45 	.word	0x08007b45
 8007a18:	08007a4f 	.word	0x08007a4f
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8007a1c:	f7fd ff92 	bl	8005944 <tud_descriptor_device_cb>
 8007a20:	62f8      	str	r0, [r7, #44]	; 0x2c
      TU_ASSERT(desc_device);
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10a      	bne.n	8007a3e <process_get_descriptor+0xa2>
 8007a28:	4b49      	ldr	r3, [pc, #292]	; (8007b50 <process_get_descriptor+0x1b4>)
 8007a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d000      	beq.n	8007a3a <process_get_descriptor+0x9e>
 8007a38:	be00      	bkpt	0x0000
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	e083      	b.n	8007b46 <process_get_descriptor+0x1aa>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8007a3e:	79f8      	ldrb	r0, [r7, #7]
 8007a40:	2312      	movs	r3, #18
 8007a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	f000 fd31 	bl	80084ac <tud_control_xfer>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	e07b      	b.n	8007b46 <process_get_descriptor+0x1aa>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8007a4e:	f7ff f82f 	bl	8006ab0 <tud_descriptor_bos_cb>
 8007a52:	4603      	mov	r3, r0
 8007a54:	647b      	str	r3, [r7, #68]	; 0x44
      TU_VERIFY(desc_bos);
 8007a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <process_get_descriptor+0xc4>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e072      	b.n	8007b46 <process_get_descriptor+0x1aa>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8007a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a62:	3302      	adds	r3, #2
 8007a64:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8007a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007a74:	79f8      	ldrb	r0, [r7, #7]
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	f000 fd18 	bl	80084ac <tud_control_xfer>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	e062      	b.n	8007b46 <process_get_descriptor+0x1aa>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8007a80:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d114      	bne.n	8007ab2 <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8007a88:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fd ff71 	bl	8005974 <tud_descriptor_configuration_cb>
 8007a92:	4603      	mov	r3, r0
 8007a94:	64fb      	str	r3, [r7, #76]	; 0x4c
        TU_ASSERT(desc_config);
 8007a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d116      	bne.n	8007aca <process_get_descriptor+0x12e>
 8007a9c:	4b2c      	ldr	r3, [pc, #176]	; (8007b50 <process_get_descriptor+0x1b4>)
 8007a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d000      	beq.n	8007aae <process_get_descriptor+0x112>
 8007aac:	be00      	bkpt	0x0000
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e049      	b.n	8007b46 <process_get_descriptor+0x1aa>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8007ab2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7ff f808 	bl	8006acc <tud_descriptor_other_speed_configuration_cb>
 8007abc:	4603      	mov	r3, r0
 8007abe:	64fb      	str	r3, [r7, #76]	; 0x4c
        TU_VERIFY(desc_config);
 8007ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <process_get_descriptor+0x12e>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e03d      	b.n	8007b46 <process_get_descriptor+0x1aa>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8007aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007acc:	3302      	adds	r3, #2
 8007ace:	61fb      	str	r3, [r7, #28]
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8007ad6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ad8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007ada:	79f8      	ldrb	r0, [r7, #7]
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	f000 fce5 	bl	80084ac <tud_control_xfer>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	e02f      	b.n	8007b46 <process_get_descriptor+0x1aa>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	889b      	ldrh	r3, [r3, #4]
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007af0:	4611      	mov	r1, r2
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fd ff4c 	bl	8005990 <tud_descriptor_string_cb>
 8007af8:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_str);
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <process_get_descriptor+0x168>
 8007b00:	2300      	movs	r3, #0
 8007b02:	e020      	b.n	8007b46 <process_get_descriptor+0x1aa>
 8007b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b06:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	79f8      	ldrb	r0, [r7, #7]
 8007b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	f000 fcca 	bl	80084ac <tud_control_xfer>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	e014      	b.n	8007b46 <process_get_descriptor+0x1aa>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8007b1c:	f7fe ffcf 	bl	8006abe <tud_descriptor_device_qualifier_cb>
 8007b20:	63f8      	str	r0, [r7, #60]	; 0x3c
      TU_VERIFY(desc_qualifier);
 8007b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <process_get_descriptor+0x190>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	e00c      	b.n	8007b46 <process_get_descriptor+0x1aa>
 8007b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	79f8      	ldrb	r0, [r7, #7]
 8007b38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	f000 fcb6 	bl	80084ac <tud_control_xfer>
 8007b40:	4603      	mov	r3, r0
 8007b42:	e000      	b.n	8007b46 <process_get_descriptor+0x1aa>
    }
    // break; // unreachable

    default: return false;
 8007b44:	2300      	movs	r3, #0
  }
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3750      	adds	r7, #80	; 0x50
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	e000edf0 	.word	0xe000edf0

08007b54 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b0a0      	sub	sp, #128	; 0x80
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8007b60:	2300      	movs	r3, #0
 8007b62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  switch (event->event_id) {
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	785b      	ldrb	r3, [r3, #1]
 8007b6a:	3b02      	subs	r3, #2
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	f200 8173 	bhi.w	8007e58 <dcd_event_handler+0x304>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <dcd_event_handler+0x24>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007b8d 	.word	0x08007b8d
 8007b7c:	08007bfd 	.word	0x08007bfd
 8007b80:	08007bb9 	.word	0x08007bb9
 8007b84:	08007bdb 	.word	0x08007bdb
 8007b88:	08007e25 	.word	0x08007e25
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8007b8c:	4aab      	ldr	r2, [pc, #684]	; (8007e3c <dcd_event_handler+0x2e8>)
 8007b8e:	7813      	ldrb	r3, [r2, #0]
 8007b90:	f36f 0300 	bfc	r3, #0, #1
 8007b94:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8007b96:	4aa9      	ldr	r2, [pc, #676]	; (8007e3c <dcd_event_handler+0x2e8>)
 8007b98:	7813      	ldrb	r3, [r2, #0]
 8007b9a:	f36f 0341 	bfc	r3, #1, #1
 8007b9e:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8007ba0:	4ba6      	ldr	r3, [pc, #664]	; (8007e3c <dcd_event_handler+0x2e8>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8007ba6:	4aa5      	ldr	r2, [pc, #660]	; (8007e3c <dcd_event_handler+0x2e8>)
 8007ba8:	7813      	ldrb	r3, [r2, #0]
 8007baa:	f36f 0382 	bfc	r3, #2, #1
 8007bae:	7013      	strb	r3, [r2, #0]
      send = true;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      break;
 8007bb6:	e158      	b.n	8007e6a <dcd_event_handler+0x316>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8007bb8:	4ba0      	ldr	r3, [pc, #640]	; (8007e3c <dcd_event_handler+0x2e8>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 814c 	beq.w	8007e60 <dcd_event_handler+0x30c>
        _usbd_dev.suspended = 1;
 8007bc8:	4a9c      	ldr	r2, [pc, #624]	; (8007e3c <dcd_event_handler+0x2e8>)
 8007bca:	7813      	ldrb	r3, [r2, #0]
 8007bcc:	f043 0304 	orr.w	r3, r3, #4
 8007bd0:	7013      	strb	r3, [r2, #0]
        send = true;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      }
      break;
 8007bd8:	e142      	b.n	8007e60 <dcd_event_handler+0x30c>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8007bda:	4b98      	ldr	r3, [pc, #608]	; (8007e3c <dcd_event_handler+0x2e8>)
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 813d 	beq.w	8007e64 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 0;
 8007bea:	4a94      	ldr	r2, [pc, #592]	; (8007e3c <dcd_event_handler+0x2e8>)
 8007bec:	7813      	ldrb	r3, [r2, #0]
 8007bee:	f36f 0382 	bfc	r3, #2, #1
 8007bf2:	7013      	strb	r3, [r2, #0]
        send = true;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      }
      break;
 8007bfa:	e133      	b.n	8007e64 <dcd_event_handler+0x310>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8007c02:	e038      	b.n	8007c76 <dcd_event_handler+0x122>
 8007c04:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8007c08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  usbd_class_driver_t const * driver = NULL;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	673b      	str	r3, [r7, #112]	; 0x70
  if ( drvid < _app_driver_count ) {
 8007c10:	4b8b      	ldr	r3, [pc, #556]	; (8007e40 <dcd_event_handler+0x2ec>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d207      	bcs.n	8007c2c <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8007c1c:	4b89      	ldr	r3, [pc, #548]	; (8007e44 <dcd_event_handler+0x2f0>)
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007c24:	015b      	lsls	r3, r3, #5
 8007c26:	4413      	add	r3, r2
 8007c28:	673b      	str	r3, [r7, #112]	; 0x70
 8007c2a:	e00e      	b.n	8007c4a <dcd_event_handler+0xf6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007c2c:	4b84      	ldr	r3, [pc, #528]	; (8007e40 <dcd_event_handler+0x2ec>)
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d808      	bhi.n	8007c4a <dcd_event_handler+0xf6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007c38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007c3c:	4a80      	ldr	r2, [pc, #512]	; (8007e40 <dcd_event_handler+0x2ec>)
 8007c3e:	7812      	ldrb	r2, [r2, #0]
 8007c40:	1a9b      	subs	r3, r3, r2
 8007c42:	015b      	lsls	r3, r3, #5
 8007c44:	4a80      	ldr	r2, [pc, #512]	; (8007e48 <dcd_event_handler+0x2f4>)
 8007c46:	4413      	add	r3, r2
 8007c48:	673b      	str	r3, [r7, #112]	; 0x70
  return driver;
 8007c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8007c4c:	67bb      	str	r3, [r7, #120]	; 0x78
        if (driver && driver->sof) {
 8007c4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <dcd_event_handler+0x118>
 8007c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d007      	beq.n	8007c6c <dcd_event_handler+0x118>
          driver->sof(event->rhport, event->sof.frame_count);
 8007c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7810      	ldrb	r0, [r2, #0]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	6852      	ldr	r2, [r2, #4]
 8007c68:	4611      	mov	r1, r2
 8007c6a:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007c6c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8007c70:	3301      	adds	r3, #1
 8007c72:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8007c76:	4b72      	ldr	r3, [pc, #456]	; (8007e40 <dcd_event_handler+0x2ec>)
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d9c0      	bls.n	8007c04 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8007c82:	4b6e      	ldr	r3, [pc, #440]	; (8007e3c <dcd_event_handler+0x2e8>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d05a      	beq.n	8007d46 <dcd_event_handler+0x1f2>
        _usbd_dev.suspended = 0;
 8007c90:	4a6a      	ldr	r2, [pc, #424]	; (8007e3c <dcd_event_handler+0x2e8>)
 8007c92:	7813      	ldrb	r3, [r2, #0]
 8007c94:	f36f 0382 	bfc	r3, #2, #1
 8007c98:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8007c9a:	f107 0314 	add.w	r3, r7, #20
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	605a      	str	r2, [r3, #4]
 8007ca4:	609a      	str	r2, [r3, #8]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	753b      	strb	r3, [r7, #20]
 8007cac:	2305      	movs	r3, #5
 8007cae:	757b      	strb	r3, [r7, #21]
 8007cb0:	f107 0314 	add.w	r3, r7, #20
 8007cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cb6:	78fb      	ldrb	r3, [r7, #3]
 8007cb8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007cbc:	4b63      	ldr	r3, [pc, #396]	; (8007e4c <dcd_event_handler+0x2f8>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	667b      	str	r3, [r7, #100]	; 0x64
 8007cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8007cc6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8007cca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8007cce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cd2:	f083 0301 	eor.w	r3, r3, #1
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d003      	beq.n	8007ce4 <dcd_event_handler+0x190>
    qhdl->interrupt_set(false);
 8007cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8007ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe fd16 	bl	800671c <tu_fifo_write>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

  if (!in_isr) {
 8007cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cfa:	f083 0301 	eor.w	r3, r3, #1
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <dcd_event_handler+0x1b8>
    qhdl->interrupt_set(true);
 8007d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2001      	movs	r0, #1
 8007d0a:	4798      	blx	r3
  }

  return success;
 8007d0c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8007d10:	f083 0301 	eor.w	r3, r3, #1
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d009      	beq.n	8007d2e <dcd_event_handler+0x1da>
 8007d1a:	4b4d      	ldr	r3, [pc, #308]	; (8007e50 <dcd_event_handler+0x2fc>)
 8007d1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00c      	beq.n	8007d44 <dcd_event_handler+0x1f0>
 8007d2a:	be00      	bkpt	0x0000
 8007d2c:	e00a      	b.n	8007d44 <dcd_event_handler+0x1f0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8007d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d30:	7818      	ldrb	r0, [r3, #0]
 8007d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d34:	785b      	ldrb	r3, [r3, #1]
 8007d36:	4619      	mov	r1, r3
 8007d38:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	f7fe fea1 	bl	8006a84 <tud_event_hook_cb>
  return true;
 8007d42:	e000      	b.n	8007d46 <dcd_event_handler+0x1f2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007d44:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8007d46:	4b3d      	ldr	r3, [pc, #244]	; (8007e3c <dcd_event_handler+0x2e8>)
 8007d48:	78db      	ldrb	r3, [r3, #3]
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	657b      	str	r3, [r7, #84]	; 0x54
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8007d54:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007d58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bf14      	ite	ne
 8007d66:	2301      	movne	r3, #1
 8007d68:	2300      	moveq	r3, #0
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d07b      	beq.n	8007e68 <dcd_event_handler+0x314>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8007d70:	f107 0308 	add.w	r3, r7, #8
 8007d74:	2200      	movs	r2, #0
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	605a      	str	r2, [r3, #4]
 8007d7a:	609a      	str	r2, [r3, #8]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	723b      	strb	r3, [r7, #8]
 8007d82:	2303      	movs	r3, #3
 8007d84:	727b      	strb	r3, [r7, #9]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	f107 0308 	add.w	r3, r7, #8
 8007d90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d92:	78fb      	ldrb	r3, [r7, #3]
 8007d94:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007d98:	4b2c      	ldr	r3, [pc, #176]	; (8007e4c <dcd_event_handler+0x2f8>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da0:	643b      	str	r3, [r7, #64]	; 0x40
 8007da2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007da6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (!in_isr) {
 8007daa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007dae:	f083 0301 	eor.w	r3, r3, #1
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <dcd_event_handler+0x26c>
    qhdl->interrupt_set(false);
 8007db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8007dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fe fca8 	bl	800671c <tu_fifo_write>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (!in_isr) {
 8007dd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007dd6:	f083 0301 	eor.w	r3, r3, #1
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <dcd_event_handler+0x294>
    qhdl->interrupt_set(true);
 8007de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2001      	movs	r0, #1
 8007de6:	4798      	blx	r3
  return success;
 8007de8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007dec:	f083 0301 	eor.w	r3, r3, #1
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d009      	beq.n	8007e0a <dcd_event_handler+0x2b6>
 8007df6:	4b16      	ldr	r3, [pc, #88]	; (8007e50 <dcd_event_handler+0x2fc>)
 8007df8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00c      	beq.n	8007e20 <dcd_event_handler+0x2cc>
 8007e06:	be00      	bkpt	0x0000
 8007e08:	e00a      	b.n	8007e20 <dcd_event_handler+0x2cc>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8007e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e0c:	7818      	ldrb	r0, [r3, #0]
 8007e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e10:	785b      	ldrb	r3, [r3, #1]
 8007e12:	4619      	mov	r1, r3
 8007e14:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007e18:	461a      	mov	r2, r3
 8007e1a:	f7fe fe33 	bl	8006a84 <tud_event_hook_cb>
  return true;
 8007e1e:	e000      	b.n	8007e22 <dcd_event_handler+0x2ce>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007e20:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8007e22:	e021      	b.n	8007e68 <dcd_event_handler+0x314>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8007e24:	4b0b      	ldr	r3, [pc, #44]	; (8007e54 <dcd_event_handler+0x300>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <dcd_event_handler+0x300>)
 8007e30:	701a      	strb	r2, [r3, #0]
      send = true;
 8007e32:	2301      	movs	r3, #1
 8007e34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      break;
 8007e38:	e017      	b.n	8007e6a <dcd_event_handler+0x316>
 8007e3a:	bf00      	nop
 8007e3c:	20000534 	.word	0x20000534
 8007e40:	20000570 	.word	0x20000570
 8007e44:	2000056c 	.word	0x2000056c
 8007e48:	0800b1cc 	.word	0x0800b1cc
 8007e4c:	20000634 	.word	0x20000634
 8007e50:	e000edf0 	.word	0xe000edf0
 8007e54:	20000568 	.word	0x20000568

    default:
      send = true;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      break;
 8007e5e:	e004      	b.n	8007e6a <dcd_event_handler+0x316>
      break;
 8007e60:	bf00      	nop
 8007e62:	e002      	b.n	8007e6a <dcd_event_handler+0x316>
      break;
 8007e64:	bf00      	nop
 8007e66:	e000      	b.n	8007e6a <dcd_event_handler+0x316>
      break;
 8007e68:	bf00      	nop
  }

  if (send) {
 8007e6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d049      	beq.n	8007f06 <dcd_event_handler+0x3b2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	637b      	str	r3, [r7, #52]	; 0x34
 8007e76:	78fb      	ldrb	r3, [r7, #3]
 8007e78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007e7c:	4b24      	ldr	r3, [pc, #144]	; (8007f10 <dcd_event_handler+0x3bc>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (!in_isr) {
 8007e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e92:	f083 0301 	eor.w	r3, r3, #1
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <dcd_event_handler+0x350>
    qhdl->interrupt_set(false);
 8007e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fc36 	bl	800671c <tu_fifo_write>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if (!in_isr) {
 8007eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eba:	f083 0301 	eor.w	r3, r3, #1
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d003      	beq.n	8007ecc <dcd_event_handler+0x378>
    qhdl->interrupt_set(true);
 8007ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2001      	movs	r0, #1
 8007eca:	4798      	blx	r3
  return success;
 8007ecc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ed0:	f083 0301 	eor.w	r3, r3, #1
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d009      	beq.n	8007eee <dcd_event_handler+0x39a>
 8007eda:	4b0e      	ldr	r3, [pc, #56]	; (8007f14 <dcd_event_handler+0x3c0>)
 8007edc:	623b      	str	r3, [r7, #32]
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00c      	beq.n	8007f04 <dcd_event_handler+0x3b0>
 8007eea:	be00      	bkpt	0x0000
 8007eec:	e00a      	b.n	8007f04 <dcd_event_handler+0x3b0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8007eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef0:	7818      	ldrb	r0, [r3, #0]
 8007ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef4:	785b      	ldrb	r3, [r3, #1]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007efc:	461a      	mov	r2, r3
 8007efe:	f7fe fdc1 	bl	8006a84 <tud_event_hook_cb>
  return true;
 8007f02:	e000      	b.n	8007f06 <dcd_event_handler+0x3b2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007f04:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 8007f06:	bf00      	nop
 8007f08:	3780      	adds	r7, #128	; 0x80
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000634 	.word	0x20000634
 8007f14:	e000edf0 	.word	0xe000edf0

08007f18 <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 8007f28:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <usbd_int_set+0x30>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f000 fc55 	bl	80087dc <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 8007f32:	e004      	b.n	8007f3e <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8007f34:	4b04      	ldr	r3, [pc, #16]	; (8007f48 <usbd_int_set+0x30>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 fc71 	bl	8008820 <dcd_int_disable>
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20000054 	.word	0x20000054

08007f4c <usbd_open_edpt_pair>:
  osal_spin_unlock(&_usbd_spin, in_isr);
}

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08a      	sub	sp, #40	; 0x28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6039      	str	r1, [r7, #0]
 8007f54:	4611      	mov	r1, r2
 8007f56:	461a      	mov	r2, r3
 8007f58:	4603      	mov	r3, r0
 8007f5a:	71fb      	strb	r3, [r7, #7]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	71bb      	strb	r3, [r7, #6]
 8007f60:	4613      	mov	r3, r2
 8007f62:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8007f64:	2300      	movs	r3, #0
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24
 8007f68:	e04d      	b.n	8008006 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	785b      	ldrb	r3, [r3, #1]
 8007f72:	2b05      	cmp	r3, #5
 8007f74:	d108      	bne.n	8007f88 <usbd_open_edpt_pair+0x3c>
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	78db      	ldrb	r3, [r3, #3]
 8007f7a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	461a      	mov	r2, r3
 8007f82:	797b      	ldrb	r3, [r7, #5]
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d00a      	beq.n	8007f9e <usbd_open_edpt_pair+0x52>
 8007f88:	4b23      	ldr	r3, [pc, #140]	; (8008018 <usbd_open_edpt_pair+0xcc>)
 8007f8a:	61bb      	str	r3, [r7, #24]
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d000      	beq.n	8007f9a <usbd_open_edpt_pair+0x4e>
 8007f98:	be00      	bkpt	0x0000
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	e038      	b.n	8008010 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	6a39      	ldr	r1, [r7, #32]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 f83a 	bl	800801c <usbd_edpt_open>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	f083 0301 	eor.w	r3, r3, #1
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00a      	beq.n	8007fca <usbd_open_edpt_pair+0x7e>
 8007fb4:	4b18      	ldr	r3, [pc, #96]	; (8008018 <usbd_open_edpt_pair+0xcc>)
 8007fb6:	61fb      	str	r3, [r7, #28]
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d000      	beq.n	8007fc6 <usbd_open_edpt_pair+0x7a>
 8007fc4:	be00      	bkpt	0x0000
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e022      	b.n	8008010 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	789b      	ldrb	r3, [r3, #2]
 8007fce:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
 8007fd2:	09db      	lsrs	r3, r3, #7
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d104      	bne.n	8007fe4 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	789a      	ldrb	r2, [r3, #2]
 8007fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe0:	701a      	strb	r2, [r3, #0]
 8007fe2:	e003      	b.n	8007fec <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	789a      	ldrb	r2, [r3, #2]
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fea:	701a      	strb	r2, [r3, #0]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8007ffe:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	3301      	adds	r3, #1
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
 8008006:	79bb      	ldrb	r3, [r7, #6]
 8008008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800800a:	429a      	cmp	r2, r3
 800800c:	dbad      	blt.n	8007f6a <usbd_open_edpt_pair+0x1e>
  }

  return true;
 800800e:	2301      	movs	r3, #1
}
 8008010:	4618      	mov	r0, r3
 8008012:	3728      	adds	r7, #40	; 0x28
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	e000edf0 	.word	0xe000edf0

0800801c <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	6039      	str	r1, [r7, #0]
 8008026:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8008028:	4b1c      	ldr	r3, [pc, #112]	; (800809c <usbd_edpt_open+0x80>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	789b      	ldrb	r3, [r3, #2]
 8008032:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008034:	7bfb      	ldrb	r3, [r7, #15]
 8008036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b07      	cmp	r3, #7
 800803e:	d90a      	bls.n	8008056 <usbd_edpt_open+0x3a>
 8008040:	4b17      	ldr	r3, [pc, #92]	; (80080a0 <usbd_edpt_open+0x84>)
 8008042:	613b      	str	r3, [r7, #16]
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	2b00      	cmp	r3, #0
 800804e:	d000      	beq.n	8008052 <usbd_edpt_open+0x36>
 8008050:	be00      	bkpt	0x0000
 8008052:	2300      	movs	r3, #0
 8008054:	e01d      	b.n	8008092 <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 8008056:	4b13      	ldr	r3, [pc, #76]	; (80080a4 <usbd_edpt_open+0x88>)
 8008058:	789b      	ldrb	r3, [r3, #2]
 800805a:	2200      	movs	r2, #0
 800805c:	4619      	mov	r1, r3
 800805e:	6838      	ldr	r0, [r7, #0]
 8008060:	f002 fd78 	bl	800ab54 <tu_edpt_validate>
 8008064:	4603      	mov	r3, r0
 8008066:	f083 0301 	eor.w	r3, r3, #1
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00a      	beq.n	8008086 <usbd_edpt_open+0x6a>
 8008070:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <usbd_edpt_open+0x84>)
 8008072:	617b      	str	r3, [r7, #20]
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b00      	cmp	r3, #0
 800807e:	d000      	beq.n	8008082 <usbd_edpt_open+0x66>
 8008080:	be00      	bkpt	0x0000
 8008082:	2300      	movs	r3, #0
 8008084:	e005      	b.n	8008092 <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	4618      	mov	r0, r3
 800808c:	f001 fd22 	bl	8009ad4 <dcd_edpt_open>
 8008090:	4603      	mov	r3, r0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20000054 	.word	0x20000054
 80080a0:	e000edf0 	.word	0xe000edf0
 80080a4:	20000534 	.word	0x20000534

080080a8 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	460a      	mov	r2, r1
 80080b2:	71fb      	strb	r3, [r7, #7]
 80080b4:	4613      	mov	r3, r2
 80080b6:	71bb      	strb	r3, [r7, #6]
 80080b8:	79bb      	ldrb	r3, [r7, #6]
 80080ba:	73bb      	strb	r3, [r7, #14]
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c2:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80080c4:	75fb      	strb	r3, [r7, #23]
 80080c6:	79bb      	ldrb	r3, [r7, #6]
 80080c8:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
 80080cc:	09db      	lsrs	r3, r3, #7
 80080ce:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80080d0:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80080d2:	7dfa      	ldrb	r2, [r7, #23]
 80080d4:	7dbb      	ldrb	r3, [r7, #22]
 80080d6:	0052      	lsls	r2, r2, #1
 80080d8:	4413      	add	r3, r2
 80080da:	3320      	adds	r3, #32
 80080dc:	4a06      	ldr	r2, [pc, #24]	; (80080f8 <usbd_edpt_claim+0x50>)
 80080de:	4413      	add	r3, r2
 80080e0:	3304      	adds	r3, #4
 80080e2:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 80080e4:	2100      	movs	r1, #0
 80080e6:	6938      	ldr	r0, [r7, #16]
 80080e8:	f002 fcfa 	bl	800aae0 <tu_edpt_claim>
 80080ec:	4603      	mov	r3, r0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20000534 	.word	0x20000534

080080fc <usbd_edpt_xfer>:
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];

  return tu_edpt_release(ep_state, _usbd_mutex);
}

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	603a      	str	r2, [r7, #0]
 8008104:	461a      	mov	r2, r3
 8008106:	4603      	mov	r3, r0
 8008108:	71fb      	strb	r3, [r7, #7]
 800810a:	460b      	mov	r3, r1
 800810c:	71bb      	strb	r3, [r7, #6]
 800810e:	4613      	mov	r3, r2
 8008110:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8008112:	4b32      	ldr	r3, [pc, #200]	; (80081dc <usbd_edpt_xfer+0xe0>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	71fb      	strb	r3, [r7, #7]
 8008118:	79bb      	ldrb	r3, [r7, #6]
 800811a:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800811c:	7abb      	ldrb	r3, [r7, #10]
 800811e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008122:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008124:	75fb      	strb	r3, [r7, #23]
 8008126:	79bb      	ldrb	r3, [r7, #6]
 8008128:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800812a:	7afb      	ldrb	r3, [r7, #11]
 800812c:	09db      	lsrs	r3, r3, #7
 800812e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008130:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8008132:	7dfa      	ldrb	r2, [r7, #23]
 8008134:	7dbb      	ldrb	r3, [r7, #22]
 8008136:	492a      	ldr	r1, [pc, #168]	; (80081e0 <usbd_edpt_xfer+0xe4>)
 8008138:	0052      	lsls	r2, r2, #1
 800813a:	440a      	add	r2, r1
 800813c:	4413      	add	r3, r2
 800813e:	3320      	adds	r3, #32
 8008140:	791b      	ldrb	r3, [r3, #4]
 8008142:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00a      	beq.n	8008162 <usbd_edpt_xfer+0x66>
 800814c:	4b25      	ldr	r3, [pc, #148]	; (80081e4 <usbd_edpt_xfer+0xe8>)
 800814e:	60fb      	str	r3, [r7, #12]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b00      	cmp	r3, #0
 800815a:	d000      	beq.n	800815e <usbd_edpt_xfer+0x62>
 800815c:	be00      	bkpt	0x0000
 800815e:	2300      	movs	r3, #0
 8008160:	e038      	b.n	80081d4 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8008162:	7dfa      	ldrb	r2, [r7, #23]
 8008164:	7dbb      	ldrb	r3, [r7, #22]
 8008166:	491e      	ldr	r1, [pc, #120]	; (80081e0 <usbd_edpt_xfer+0xe4>)
 8008168:	0052      	lsls	r2, r2, #1
 800816a:	440a      	add	r2, r1
 800816c:	4413      	add	r3, r2
 800816e:	f103 0220 	add.w	r2, r3, #32
 8008172:	7913      	ldrb	r3, [r2, #4]
 8008174:	f043 0301 	orr.w	r3, r3, #1
 8008178:	7113      	strb	r3, [r2, #4]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 800817a:	88bb      	ldrh	r3, [r7, #4]
 800817c:	79b9      	ldrb	r1, [r7, #6]
 800817e:	79f8      	ldrb	r0, [r7, #7]
 8008180:	683a      	ldr	r2, [r7, #0]
 8008182:	f002 f8ed 	bl	800a360 <dcd_edpt_xfer>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <usbd_edpt_xfer+0x94>
    return true;
 800818c:	2301      	movs	r3, #1
 800818e:	e021      	b.n	80081d4 <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008190:	7dfa      	ldrb	r2, [r7, #23]
 8008192:	7dbb      	ldrb	r3, [r7, #22]
 8008194:	4912      	ldr	r1, [pc, #72]	; (80081e0 <usbd_edpt_xfer+0xe4>)
 8008196:	0052      	lsls	r2, r2, #1
 8008198:	440a      	add	r2, r1
 800819a:	4413      	add	r3, r2
 800819c:	f103 0220 	add.w	r2, r3, #32
 80081a0:	7913      	ldrb	r3, [r2, #4]
 80081a2:	f36f 0300 	bfc	r3, #0, #1
 80081a6:	7113      	strb	r3, [r2, #4]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 80081a8:	7dfa      	ldrb	r2, [r7, #23]
 80081aa:	7dbb      	ldrb	r3, [r7, #22]
 80081ac:	490c      	ldr	r1, [pc, #48]	; (80081e0 <usbd_edpt_xfer+0xe4>)
 80081ae:	0052      	lsls	r2, r2, #1
 80081b0:	440a      	add	r2, r1
 80081b2:	4413      	add	r3, r2
 80081b4:	f103 0220 	add.w	r2, r3, #32
 80081b8:	7913      	ldrb	r3, [r2, #4]
 80081ba:	f36f 0382 	bfc	r3, #2, #1
 80081be:	7113      	strb	r3, [r2, #4]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 80081c0:	4b08      	ldr	r3, [pc, #32]	; (80081e4 <usbd_edpt_xfer+0xe8>)
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d000      	beq.n	80081d2 <usbd_edpt_xfer+0xd6>
 80081d0:	be00      	bkpt	0x0000
    return false;
 80081d2:	2300      	movs	r3, #0
  }
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3718      	adds	r7, #24
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	20000054 	.word	0x20000054
 80081e0:	20000534 	.word	0x20000534
 80081e4:	e000edf0 	.word	0xe000edf0

080081e8 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4603      	mov	r3, r0
 80081f0:	460a      	mov	r2, r1
 80081f2:	71fb      	strb	r3, [r7, #7]
 80081f4:	4613      	mov	r3, r2
 80081f6:	71bb      	strb	r3, [r7, #6]
 80081f8:	79bb      	ldrb	r3, [r7, #6]
 80081fa:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80081fc:	7b3b      	ldrb	r3, [r7, #12]
 80081fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008202:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008204:	73fb      	strb	r3, [r7, #15]
 8008206:	79bb      	ldrb	r3, [r7, #6]
 8008208:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800820a:	7b7b      	ldrb	r3, [r7, #13]
 800820c:	09db      	lsrs	r3, r3, #7
 800820e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008210:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 8008212:	7bfa      	ldrb	r2, [r7, #15]
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	4909      	ldr	r1, [pc, #36]	; (800823c <usbd_edpt_busy+0x54>)
 8008218:	0052      	lsls	r2, r2, #1
 800821a:	440a      	add	r2, r1
 800821c:	4413      	add	r3, r2
 800821e:	3320      	adds	r3, #32
 8008220:	791b      	ldrb	r3, [r3, #4]
 8008222:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b00      	cmp	r3, #0
 800822a:	bf14      	ite	ne
 800822c:	2301      	movne	r3, #1
 800822e:	2300      	moveq	r3, #0
 8008230:	b2db      	uxtb	r3, r3
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	bc80      	pop	{r7}
 800823a:	4770      	bx	lr
 800823c:	20000534 	.word	0x20000534

08008240 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	460a      	mov	r2, r1
 800824a:	71fb      	strb	r3, [r7, #7]
 800824c:	4613      	mov	r3, r2
 800824e:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008250:	4b18      	ldr	r3, [pc, #96]	; (80082b4 <usbd_edpt_stall+0x74>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	71fb      	strb	r3, [r7, #7]
 8008256:	79bb      	ldrb	r3, [r7, #6]
 8008258:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800825a:	7b3b      	ldrb	r3, [r7, #12]
 800825c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008260:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008262:	73fb      	strb	r3, [r7, #15]
 8008264:	79bb      	ldrb	r3, [r7, #6]
 8008266:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008268:	7b7b      	ldrb	r3, [r7, #13]
 800826a:	09db      	lsrs	r3, r3, #7
 800826c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800826e:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 8008270:	79ba      	ldrb	r2, [r7, #6]
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	4611      	mov	r1, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f002 f8b0 	bl	800a3dc <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 800827c:	7bfa      	ldrb	r2, [r7, #15]
 800827e:	7bbb      	ldrb	r3, [r7, #14]
 8008280:	490d      	ldr	r1, [pc, #52]	; (80082b8 <usbd_edpt_stall+0x78>)
 8008282:	0052      	lsls	r2, r2, #1
 8008284:	440a      	add	r2, r1
 8008286:	4413      	add	r3, r2
 8008288:	f103 0220 	add.w	r2, r3, #32
 800828c:	7913      	ldrb	r3, [r2, #4]
 800828e:	f043 0302 	orr.w	r3, r3, #2
 8008292:	7113      	strb	r3, [r2, #4]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8008294:	7bfa      	ldrb	r2, [r7, #15]
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	4907      	ldr	r1, [pc, #28]	; (80082b8 <usbd_edpt_stall+0x78>)
 800829a:	0052      	lsls	r2, r2, #1
 800829c:	440a      	add	r2, r1
 800829e:	4413      	add	r3, r2
 80082a0:	f103 0220 	add.w	r2, r3, #32
 80082a4:	7913      	ldrb	r3, [r2, #4]
 80082a6:	f043 0301 	orr.w	r3, r3, #1
 80082aa:	7113      	strb	r3, [r2, #4]
}
 80082ac:	bf00      	nop
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20000054 	.word	0x20000054
 80082b8:	20000534 	.word	0x20000534

080082bc <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	4603      	mov	r3, r0
 80082c4:	460a      	mov	r2, r1
 80082c6:	71fb      	strb	r3, [r7, #7]
 80082c8:	4613      	mov	r3, r2
 80082ca:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80082cc:	4b18      	ldr	r3, [pc, #96]	; (8008330 <usbd_edpt_clear_stall+0x74>)
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	71fb      	strb	r3, [r7, #7]
 80082d2:	79bb      	ldrb	r3, [r7, #6]
 80082d4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80082d6:	7b3b      	ldrb	r3, [r7, #12]
 80082d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082dc:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80082de:	73fb      	strb	r3, [r7, #15]
 80082e0:	79bb      	ldrb	r3, [r7, #6]
 80082e2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80082e4:	7b7b      	ldrb	r3, [r7, #13]
 80082e6:	09db      	lsrs	r3, r3, #7
 80082e8:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80082ea:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 80082ec:	79ba      	ldrb	r2, [r7, #6]
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	4611      	mov	r1, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f002 f8f6 	bl	800a4e4 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 80082f8:	7bfa      	ldrb	r2, [r7, #15]
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	490d      	ldr	r1, [pc, #52]	; (8008334 <usbd_edpt_clear_stall+0x78>)
 80082fe:	0052      	lsls	r2, r2, #1
 8008300:	440a      	add	r2, r1
 8008302:	4413      	add	r3, r2
 8008304:	f103 0220 	add.w	r2, r3, #32
 8008308:	7913      	ldrb	r3, [r2, #4]
 800830a:	f36f 0341 	bfc	r3, #1, #1
 800830e:	7113      	strb	r3, [r2, #4]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008310:	7bfa      	ldrb	r2, [r7, #15]
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	4907      	ldr	r1, [pc, #28]	; (8008334 <usbd_edpt_clear_stall+0x78>)
 8008316:	0052      	lsls	r2, r2, #1
 8008318:	440a      	add	r2, r1
 800831a:	4413      	add	r3, r2
 800831c:	f103 0220 	add.w	r2, r3, #32
 8008320:	7913      	ldrb	r3, [r2, #4]
 8008322:	f36f 0300 	bfc	r3, #0, #1
 8008326:	7113      	strb	r3, [r2, #4]
}
 8008328:	bf00      	nop
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	20000054 	.word	0x20000054
 8008334:	20000534 	.word	0x20000534

08008338 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	4603      	mov	r3, r0
 8008340:	460a      	mov	r2, r1
 8008342:	71fb      	strb	r3, [r7, #7]
 8008344:	4613      	mov	r3, r2
 8008346:	71bb      	strb	r3, [r7, #6]
 8008348:	79bb      	ldrb	r3, [r7, #6]
 800834a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800834c:	7b3b      	ldrb	r3, [r7, #12]
 800834e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008352:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008354:	73fb      	strb	r3, [r7, #15]
 8008356:	79bb      	ldrb	r3, [r7, #6]
 8008358:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800835a:	7b7b      	ldrb	r3, [r7, #13]
 800835c:	09db      	lsrs	r3, r3, #7
 800835e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008360:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8008362:	7bfa      	ldrb	r2, [r7, #15]
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	4909      	ldr	r1, [pc, #36]	; (800838c <usbd_edpt_stalled+0x54>)
 8008368:	0052      	lsls	r2, r2, #1
 800836a:	440a      	add	r2, r1
 800836c:	4413      	add	r3, r2
 800836e:	3320      	adds	r3, #32
 8008370:	791b      	ldrb	r3, [r3, #4]
 8008372:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	bf14      	ite	ne
 800837c:	2301      	movne	r3, #1
 800837e:	2300      	moveq	r3, #0
 8008380:	b2db      	uxtb	r3, r3
}
 8008382:	4618      	mov	r0, r3
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	bc80      	pop	{r7}
 800838a:	4770      	bx	lr
 800838c:	20000534 	.word	0x20000534

08008390 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	6039      	str	r1, [r7, #0]
 800839a:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <status_stage_xact+0x1e>
 80083aa:	2300      	movs	r3, #0
 80083ac:	e000      	b.n	80083b0 <status_stage_xact+0x20>
 80083ae:	2380      	movs	r3, #128	; 0x80
 80083b0:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80083b2:	7bf9      	ldrb	r1, [r7, #15]
 80083b4:	79f8      	ldrb	r0, [r7, #7]
 80083b6:	2300      	movs	r3, #0
 80083b8:	2200      	movs	r2, #0
 80083ba:	f7ff fe9f 	bl	80080fc <usbd_edpt_xfer>
 80083be:	4603      	mov	r3, r0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	4603      	mov	r3, r0
 80083d0:	6039      	str	r1, [r7, #0]
 80083d2:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 80083d4:	4b0b      	ldr	r3, [pc, #44]	; (8008404 <tud_control_status+0x3c>)
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	6810      	ldr	r0, [r2, #0]
 80083da:	6851      	ldr	r1, [r2, #4]
 80083dc:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 80083de:	4b09      	ldr	r3, [pc, #36]	; (8008404 <tud_control_status+0x3c>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80083e4:	4b07      	ldr	r3, [pc, #28]	; (8008404 <tud_control_status+0x3c>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 80083ea:	4b06      	ldr	r3, [pc, #24]	; (8008404 <tud_control_status+0x3c>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 80083f0:	79fb      	ldrb	r3, [r7, #7]
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7ff ffcb 	bl	8008390 <status_stage_xact>
 80083fa:	4603      	mov	r3, r0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	20000638 	.word	0x20000638

08008408 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 8008408:	b580      	push	{r7, lr}
 800840a:	b088      	sub	sp, #32
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8008412:	4b24      	ldr	r3, [pc, #144]	; (80084a4 <data_stage_xact+0x9c>)
 8008414:	899a      	ldrh	r2, [r3, #12]
 8008416:	4b23      	ldr	r3, [pc, #140]	; (80084a4 <data_stage_xact+0x9c>)
 8008418:	89db      	ldrh	r3, [r3, #14]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	b29b      	uxth	r3, r3
 800841e:	837b      	strh	r3, [r7, #26]
 8008420:	2340      	movs	r3, #64	; 0x40
 8008422:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008424:	8b7a      	ldrh	r2, [r7, #26]
 8008426:	8b3b      	ldrh	r3, [r7, #24]
 8008428:	4293      	cmp	r3, r2
 800842a:	bf28      	it	cs
 800842c:	4613      	movcs	r3, r2
 800842e:	b29b      	uxth	r3, r3
 8008430:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8008432:	2300      	movs	r3, #0
 8008434:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 8008436:	4b1b      	ldr	r3, [pc, #108]	; (80084a4 <data_stage_xact+0x9c>)
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01e      	beq.n	8008482 <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 8008444:	2380      	movs	r3, #128	; 0x80
 8008446:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 8008448:	8bbb      	ldrh	r3, [r7, #28]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d019      	beq.n	8008482 <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 800844e:	4b15      	ldr	r3, [pc, #84]	; (80084a4 <data_stage_xact+0x9c>)
 8008450:	689a      	ldr	r2, [r3, #8]
 8008452:	8bbb      	ldrh	r3, [r7, #28]
 8008454:	4914      	ldr	r1, [pc, #80]	; (80084a8 <data_stage_xact+0xa0>)
 8008456:	6179      	str	r1, [r7, #20]
 8008458:	2140      	movs	r1, #64	; 0x40
 800845a:	6139      	str	r1, [r7, #16]
 800845c:	60fa      	str	r2, [r7, #12]
 800845e:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	429a      	cmp	r2, r3
 8008466:	d202      	bcs.n	800846e <data_stage_xact+0x66>
    return -1;
 8008468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800846c:	e005      	b.n	800847a <data_stage_xact+0x72>
  memcpy(dest, src, count);
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	68f9      	ldr	r1, [r7, #12]
 8008472:	6978      	ldr	r0, [r7, #20]
 8008474:	f002 fe0a 	bl	800b08c <memcpy>
  return 0;
 8008478:	2300      	movs	r3, #0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <data_stage_xact+0x7a>
 800847e:	2300      	movs	r3, #0
 8008480:	e00b      	b.n	800849a <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 8008482:	8bbb      	ldrh	r3, [r7, #28]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <data_stage_xact+0x84>
 8008488:	4a07      	ldr	r2, [pc, #28]	; (80084a8 <data_stage_xact+0xa0>)
 800848a:	e000      	b.n	800848e <data_stage_xact+0x86>
 800848c:	2200      	movs	r2, #0
 800848e:	8bbb      	ldrh	r3, [r7, #28]
 8008490:	7ff9      	ldrb	r1, [r7, #31]
 8008492:	79f8      	ldrb	r0, [r7, #7]
 8008494:	f7ff fe32 	bl	80080fc <usbd_edpt_xfer>
 8008498:	4603      	mov	r3, r0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3720      	adds	r7, #32
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20000638 	.word	0x20000638
 80084a8:	2000064c 	.word	0x2000064c

080084ac <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	607a      	str	r2, [r7, #4]
 80084b6:	461a      	mov	r2, r3
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]
 80084bc:	4613      	mov	r3, r2
 80084be:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 80084c0:	4b30      	ldr	r3, [pc, #192]	; (8008584 <tud_control_xfer+0xd8>)
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	6810      	ldr	r0, [r2, #0]
 80084c6:	6851      	ldr	r1, [r2, #4]
 80084c8:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 80084ca:	4a2e      	ldr	r2, [pc, #184]	; (8008584 <tud_control_xfer+0xd8>)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 80084d0:	4b2c      	ldr	r3, [pc, #176]	; (8008584 <tud_control_xfer+0xd8>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	88db      	ldrh	r3, [r3, #6]
 80084da:	b29a      	uxth	r2, r3
 80084dc:	89bb      	ldrh	r3, [r7, #12]
 80084de:	827b      	strh	r3, [r7, #18]
 80084e0:	4613      	mov	r3, r2
 80084e2:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80084e4:	8a7a      	ldrh	r2, [r7, #18]
 80084e6:	8a3b      	ldrh	r3, [r7, #16]
 80084e8:	4293      	cmp	r3, r2
 80084ea:	bf28      	it	cs
 80084ec:	4613      	movcs	r3, r2
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	4b24      	ldr	r3, [pc, #144]	; (8008584 <tud_control_xfer+0xd8>)
 80084f2:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	88db      	ldrh	r3, [r3, #6]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d026      	beq.n	800854c <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 80084fe:	4b21      	ldr	r3, [pc, #132]	; (8008584 <tud_control_xfer+0xd8>)
 8008500:	899b      	ldrh	r3, [r3, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00d      	beq.n	8008522 <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10a      	bne.n	8008522 <tud_control_xfer+0x76>
 800850c:	4b1e      	ldr	r3, [pc, #120]	; (8008588 <tud_control_xfer+0xdc>)
 800850e:	61bb      	str	r3, [r7, #24]
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d000      	beq.n	800851e <tud_control_xfer+0x72>
 800851c:	be00      	bkpt	0x0000
 800851e:	2300      	movs	r3, #0
 8008520:	e02b      	b.n	800857a <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff ff6f 	bl	8008408 <data_stage_xact>
 800852a:	4603      	mov	r3, r0
 800852c:	f083 0301 	eor.w	r3, r3, #1
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d020      	beq.n	8008578 <tud_control_xfer+0xcc>
 8008536:	4b14      	ldr	r3, [pc, #80]	; (8008588 <tud_control_xfer+0xdc>)
 8008538:	617b      	str	r3, [r7, #20]
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	d000      	beq.n	8008548 <tud_control_xfer+0x9c>
 8008546:	be00      	bkpt	0x0000
 8008548:	2300      	movs	r3, #0
 800854a:	e016      	b.n	800857a <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	68b9      	ldr	r1, [r7, #8]
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff ff1d 	bl	8008390 <status_stage_xact>
 8008556:	4603      	mov	r3, r0
 8008558:	f083 0301 	eor.w	r3, r3, #1
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <tud_control_xfer+0xcc>
 8008562:	4b09      	ldr	r3, [pc, #36]	; (8008588 <tud_control_xfer+0xdc>)
 8008564:	61fb      	str	r3, [r7, #28]
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b00      	cmp	r3, #0
 8008570:	d000      	beq.n	8008574 <tud_control_xfer+0xc8>
 8008572:	be00      	bkpt	0x0000
 8008574:	2300      	movs	r3, #0
 8008576:	e000      	b.n	800857a <tud_control_xfer+0xce>
  }

  return true;
 8008578:	2301      	movs	r3, #1
}
 800857a:	4618      	mov	r0, r3
 800857c:	3720      	adds	r7, #32
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20000638 	.word	0x20000638
 8008588:	e000edf0 	.word	0xe000edf0

0800858c <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 800858c:	b580      	push	{r7, lr}
 800858e:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8008590:	2214      	movs	r2, #20
 8008592:	2100      	movs	r1, #0
 8008594:	4802      	ldr	r0, [pc, #8]	; (80085a0 <usbd_control_reset+0x14>)
 8008596:	f002 fd4d 	bl	800b034 <memset>
}
 800859a:	bf00      	nop
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	20000638 	.word	0x20000638

080085a4 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 80085ac:	4a03      	ldr	r2, [pc, #12]	; (80085bc <usbd_control_set_complete_callback+0x18>)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6113      	str	r3, [r2, #16]
}
 80085b2:	bf00      	nop
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr
 80085bc:	20000638 	.word	0x20000638

080085c0 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 80085c8:	4b09      	ldr	r3, [pc, #36]	; (80085f0 <usbd_control_set_request+0x30>)
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	6810      	ldr	r0, [r2, #0]
 80085ce:	6851      	ldr	r1, [r2, #4]
 80085d0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 80085d2:	4b07      	ldr	r3, [pc, #28]	; (80085f0 <usbd_control_set_request+0x30>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80085d8:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <usbd_control_set_request+0x30>)
 80085da:	2200      	movs	r2, #0
 80085dc:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 80085de:	4b04      	ldr	r3, [pc, #16]	; (80085f0 <usbd_control_set_request+0x30>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	819a      	strh	r2, [r3, #12]
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bc80      	pop	{r7}
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	20000638 	.word	0x20000638

080085f4 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	603b      	str	r3, [r7, #0]
 80085fc:	4603      	mov	r3, r0
 80085fe:	71fb      	strb	r3, [r7, #7]
 8008600:	460b      	mov	r3, r1
 8008602:	71bb      	strb	r3, [r7, #6]
 8008604:	4613      	mov	r3, r2
 8008606:	717b      	strb	r3, [r7, #5]
 8008608:	79bb      	ldrb	r3, [r7, #6]
 800860a:	73fb      	strb	r3, [r7, #15]
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	09db      	lsrs	r3, r3, #7
 8008610:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 8008612:	4a4f      	ldr	r2, [pc, #316]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 8008614:	7812      	ldrb	r2, [r2, #0]
 8008616:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800861a:	b2d2      	uxtb	r2, r2
 800861c:	4293      	cmp	r3, r2
 800861e:	d01e      	beq.n	800865e <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <usbd_control_xfer_cb+0x48>
 8008626:	4b4b      	ldr	r3, [pc, #300]	; (8008754 <usbd_control_xfer_cb+0x160>)
 8008628:	613b      	str	r3, [r7, #16]
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	d000      	beq.n	8008638 <usbd_control_xfer_cb+0x44>
 8008636:	be00      	bkpt	0x0000
 8008638:	2300      	movs	r3, #0
 800863a:	e084      	b.n	8008746 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 800863c:	79fb      	ldrb	r3, [r7, #7]
 800863e:	4944      	ldr	r1, [pc, #272]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 8008640:	4618      	mov	r0, r3
 8008642:	f000 ff99 	bl	8009578 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 8008646:	4b42      	ldr	r3, [pc, #264]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d005      	beq.n	800865a <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 800864e:	4b40      	ldr	r3, [pc, #256]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	79f8      	ldrb	r0, [r7, #7]
 8008654:	4a3e      	ldr	r2, [pc, #248]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 8008656:	2103      	movs	r1, #3
 8008658:	4798      	blx	r3
    }

    return true;
 800865a:	2301      	movs	r3, #1
 800865c:	e073      	b.n	8008746 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 800865e:	4b3c      	ldr	r3, [pc, #240]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10c      	bne.n	8008686 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 800866c:	4b38      	ldr	r3, [pc, #224]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <usbd_control_xfer_cb+0x84>
 8008674:	2300      	movs	r3, #0
 8008676:	e066      	b.n	8008746 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 8008678:	4b35      	ldr	r3, [pc, #212]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	4936      	ldr	r1, [pc, #216]	; (8008758 <usbd_control_xfer_cb+0x164>)
 8008680:	4618      	mov	r0, r3
 8008682:	f002 fd03 	bl	800b08c <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8008686:	4b32      	ldr	r3, [pc, #200]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 8008688:	89da      	ldrh	r2, [r3, #14]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	b29b      	uxth	r3, r3
 800868e:	4413      	add	r3, r2
 8008690:	b29a      	uxth	r2, r3
 8008692:	4b2f      	ldr	r3, [pc, #188]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 8008694:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8008696:	4b2e      	ldr	r3, [pc, #184]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	4413      	add	r3, r2
 800869e:	4a2c      	ldr	r2, [pc, #176]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 80086a0:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 80086a2:	4b2b      	ldr	r3, [pc, #172]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 80086a4:	88da      	ldrh	r2, [r3, #6]
 80086a6:	4b2a      	ldr	r3, [pc, #168]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 80086a8:	89db      	ldrh	r3, [r3, #14]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d002      	beq.n	80086b4 <usbd_control_xfer_cb+0xc0>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	2b3f      	cmp	r3, #63	; 0x3f
 80086b2:	d831      	bhi.n	8008718 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 80086b4:	2301      	movs	r3, #1
 80086b6:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 80086b8:	4b25      	ldr	r3, [pc, #148]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d007      	beq.n	80086d0 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 80086c0:	4b23      	ldr	r3, [pc, #140]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	79f8      	ldrb	r0, [r7, #7]
 80086c6:	4a22      	ldr	r2, [pc, #136]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 80086c8:	2102      	movs	r1, #2
 80086ca:	4798      	blx	r3
 80086cc:	4603      	mov	r3, r0
 80086ce:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 80086d0:	7ffb      	ldrb	r3, [r7, #31]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d015      	beq.n	8008702 <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 80086d6:	79fb      	ldrb	r3, [r7, #7]
 80086d8:	491d      	ldr	r1, [pc, #116]	; (8008750 <usbd_control_xfer_cb+0x15c>)
 80086da:	4618      	mov	r0, r3
 80086dc:	f7ff fe58 	bl	8008390 <status_stage_xact>
 80086e0:	4603      	mov	r3, r0
 80086e2:	f083 0301 	eor.w	r3, r3, #1
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d02a      	beq.n	8008742 <usbd_control_xfer_cb+0x14e>
 80086ec:	4b19      	ldr	r3, [pc, #100]	; (8008754 <usbd_control_xfer_cb+0x160>)
 80086ee:	617b      	str	r3, [r7, #20]
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d000      	beq.n	80086fe <usbd_control_xfer_cb+0x10a>
 80086fc:	be00      	bkpt	0x0000
 80086fe:	2300      	movs	r3, #0
 8008700:	e021      	b.n	8008746 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8008702:	79fb      	ldrb	r3, [r7, #7]
 8008704:	2100      	movs	r1, #0
 8008706:	4618      	mov	r0, r3
 8008708:	f001 fe68 	bl	800a3dc <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 800870c:	79fb      	ldrb	r3, [r7, #7]
 800870e:	2180      	movs	r1, #128	; 0x80
 8008710:	4618      	mov	r0, r3
 8008712:	f001 fe63 	bl	800a3dc <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8008716:	e014      	b.n	8008742 <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 8008718:	79fb      	ldrb	r3, [r7, #7]
 800871a:	4618      	mov	r0, r3
 800871c:	f7ff fe74 	bl	8008408 <data_stage_xact>
 8008720:	4603      	mov	r3, r0
 8008722:	f083 0301 	eor.w	r3, r3, #1
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00b      	beq.n	8008744 <usbd_control_xfer_cb+0x150>
 800872c:	4b09      	ldr	r3, [pc, #36]	; (8008754 <usbd_control_xfer_cb+0x160>)
 800872e:	61bb      	str	r3, [r7, #24]
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b00      	cmp	r3, #0
 800873a:	d000      	beq.n	800873e <usbd_control_xfer_cb+0x14a>
 800873c:	be00      	bkpt	0x0000
 800873e:	2300      	movs	r3, #0
 8008740:	e001      	b.n	8008746 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8008742:	bf00      	nop
  }

  return true;
 8008744:	2301      	movs	r3, #1
}
 8008746:	4618      	mov	r0, r3
 8008748:	3720      	adds	r7, #32
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	20000638 	.word	0x20000638
 8008754:	e000edf0 	.word	0xe000edf0
 8008758:	2000064c 	.word	0x2000064c

0800875c <__NVIC_EnableIRQ>:
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800876a:	2b00      	cmp	r3, #0
 800876c:	db0b      	blt.n	8008786 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800876e:	79fb      	ldrb	r3, [r7, #7]
 8008770:	f003 021f 	and.w	r2, r3, #31
 8008774:	4906      	ldr	r1, [pc, #24]	; (8008790 <__NVIC_EnableIRQ+0x34>)
 8008776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800877a:	095b      	lsrs	r3, r3, #5
 800877c:	2001      	movs	r0, #1
 800877e:	fa00 f202 	lsl.w	r2, r0, r2
 8008782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008786:	bf00      	nop
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	bc80      	pop	{r7}
 800878e:	4770      	bx	lr
 8008790:	e000e100 	.word	0xe000e100

08008794 <__NVIC_DisableIRQ>:
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	4603      	mov	r3, r0
 800879c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800879e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	db12      	blt.n	80087cc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	f003 021f 	and.w	r2, r3, #31
 80087ac:	490a      	ldr	r1, [pc, #40]	; (80087d8 <__NVIC_DisableIRQ+0x44>)
 80087ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087b2:	095b      	lsrs	r3, r3, #5
 80087b4:	2001      	movs	r0, #1
 80087b6:	fa00 f202 	lsl.w	r2, r0, r2
 80087ba:	3320      	adds	r3, #32
 80087bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80087c0:	f3bf 8f4f 	dsb	sy
}
 80087c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80087c6:	f3bf 8f6f 	isb	sy
}
 80087ca:	bf00      	nop
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bc80      	pop	{r7}
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	e000e100 	.word	0xe000e100

080087dc <dcd_int_enable>:
    #error Unknown arch in USB driver
  #endif
};
enum { FSDEV_IRQ_NUM = TU_ARRAY_SIZE(fsdev_irq) };

void dcd_int_enable(uint8_t rhport) {
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("dsb 0xF":::"memory");
 80087e6:	f3bf 8f4f 	dsb	sy
}
 80087ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80087ec:	f3bf 8f6f 	isb	sy
}
 80087f0:	bf00      	nop
    NVIC_EnableIRQ(USB_LP_IRQn);
    NVIC_EnableIRQ(USBWakeUp_RMP_IRQn);
  } else
  #endif
  {
    for (uint8_t i = 0; i < FSDEV_IRQ_NUM; i++) {
 80087f2:	2300      	movs	r3, #0
 80087f4:	73fb      	strb	r3, [r7, #15]
 80087f6:	e008      	b.n	800880a <dcd_int_enable+0x2e>
      NVIC_EnableIRQ(fsdev_irq[i]);
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
 80087fa:	4a08      	ldr	r2, [pc, #32]	; (800881c <dcd_int_enable+0x40>)
 80087fc:	56d3      	ldrsb	r3, [r2, r3]
 80087fe:	4618      	mov	r0, r3
 8008800:	f7ff ffac 	bl	800875c <__NVIC_EnableIRQ>
    for (uint8_t i = 0; i < FSDEV_IRQ_NUM; i++) {
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	3301      	adds	r3, #1
 8008808:	73fb      	strb	r3, [r7, #15]
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d9f3      	bls.n	80087f8 <dcd_int_enable+0x1c>
    }
  }
}
 8008810:	bf00      	nop
 8008812:	bf00      	nop
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	0800b1ec 	.word	0x0800b1ec

08008820 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	4603      	mov	r3, r0
 8008828:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ(USB_LP_IRQn);
    NVIC_DisableIRQ(USBWakeUp_RMP_IRQn);
  } else
  #endif
  {
    for (uint8_t i = 0; i < FSDEV_IRQ_NUM; i++) {
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
 800882e:	e008      	b.n	8008842 <dcd_int_disable+0x22>
      NVIC_DisableIRQ(fsdev_irq[i]);
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	4a08      	ldr	r2, [pc, #32]	; (8008854 <dcd_int_disable+0x34>)
 8008834:	56d3      	ldrsb	r3, [r2, r3]
 8008836:	4618      	mov	r0, r3
 8008838:	f7ff ffac 	bl	8008794 <__NVIC_DisableIRQ>
    for (uint8_t i = 0; i < FSDEV_IRQ_NUM; i++) {
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	3301      	adds	r3, #1
 8008840:	73fb      	strb	r3, [r7, #15]
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	2b02      	cmp	r3, #2
 8008846:	d9f3      	bls.n	8008830 <dcd_int_disable+0x10>
    }
  }

  // CMSIS has a membar after disabling interrupts
}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	0800b1ec 	.word	0x0800b1ec

08008858 <dcd_init>:
}

//--------------------------------------------------------------------+
// Controller API
//--------------------------------------------------------------------+
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8008858:	b580      	push	{r7, lr}
 800885a:	b08a      	sub	sp, #40	; 0x28
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	6039      	str	r1, [r7, #0]
 8008862:	71fb      	strb	r3, [r7, #7]
  (void) rh_init;
  // Follow the RM mentions to use a special ordering of PDWN and FRES
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 8008864:	2300      	movs	r3, #0
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	e003      	b.n	8008872 <dcd_init+0x1a>
    asm("NOP");
 800886a:	bf00      	nop
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	3301      	adds	r3, #1
 8008870:	617b      	str	r3, [r7, #20]
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2bc7      	cmp	r3, #199	; 0xc7
 8008876:	d9f8      	bls.n	800886a <dcd_init+0x12>
  }

  // Perform USB peripheral reset
  FSDEV_REG->CNTR = USB_CNTR_FRES | USB_CNTR_PDWN;
 8008878:	4b33      	ldr	r3, [pc, #204]	; (8008948 <dcd_init+0xf0>)
 800887a:	2203      	movs	r2, #3
 800887c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 8008880:	2300      	movs	r3, #0
 8008882:	613b      	str	r3, [r7, #16]
 8008884:	e003      	b.n	800888e <dcd_init+0x36>
    asm("NOP");
 8008886:	bf00      	nop
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	3301      	adds	r3, #1
 800888c:	613b      	str	r3, [r7, #16]
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	2bc7      	cmp	r3, #199	; 0xc7
 8008892:	d9f8      	bls.n	8008886 <dcd_init+0x2e>
  }

  FSDEV_REG->CNTR &= ~USB_CNTR_PDWN;
 8008894:	4b2c      	ldr	r3, [pc, #176]	; (8008948 <dcd_init+0xf0>)
 8008896:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800889a:	b29b      	uxth	r3, r3
 800889c:	4a2a      	ldr	r2, [pc, #168]	; (8008948 <dcd_init+0xf0>)
 800889e:	f023 0302 	bic.w	r3, r3, #2
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40

  // Wait startup time, for F042 and F070, this is <= 1 us.
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 80088a8:	2300      	movs	r3, #0
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	e003      	b.n	80088b6 <dcd_init+0x5e>
    asm("NOP");
 80088ae:	bf00      	nop
  for (volatile uint32_t i = 0; i < 200; i++) { // should be a few us
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3301      	adds	r3, #1
 80088b4:	60fb      	str	r3, [r7, #12]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2bc7      	cmp	r3, #199	; 0xc7
 80088ba:	d9f8      	bls.n	80088ae <dcd_init+0x56>
  }
  FSDEV_REG->CNTR = 0; // Enable USB
 80088bc:	4b22      	ldr	r3, [pc, #136]	; (8008948 <dcd_init+0xf0>)
 80088be:	2200      	movs	r2, #0
 80088c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if !defined(FSDEV_BUS_32BIT)
  // BTABLE register does not exist any more on 32-bit bus devices
  FSDEV_REG->BTABLE = FSDEV_BTABLE_BASE;
 80088c4:	4b20      	ldr	r3, [pc, #128]	; (8008948 <dcd_init+0xf0>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
#endif

  FSDEV_REG->ISTR = 0; // Clear pending interrupts
 80088cc:	4b1e      	ldr	r3, [pc, #120]	; (8008948 <dcd_init+0xf0>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  // Reset endpoints to disabled
  for (uint32_t i = 0; i < FSDEV_EP_COUNT; i++) {
 80088d4:	2300      	movs	r3, #0
 80088d6:	627b      	str	r3, [r7, #36]	; 0x24
 80088d8:	e01b      	b.n	8008912 <dcd_init+0xba>
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	623b      	str	r3, [r7, #32]
 80088de:	2300      	movs	r3, #0
 80088e0:	61fb      	str	r3, [r7, #28]
 80088e2:	2300      	movs	r3, #0
 80088e4:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline uint32_t ep_read(uint32_t ep_id) {
  return FSDEV_REG->ep[ep_id].reg;
}

TU_ATTR_ALWAYS_INLINE static inline void ep_write(uint32_t ep_id, uint32_t value, bool need_exclusive) {
  if (need_exclusive) {
 80088e6:	7efb      	ldrb	r3, [r7, #27]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d002      	beq.n	80088f2 <dcd_init+0x9a>
    dcd_int_disable(0);
 80088ec:	2000      	movs	r0, #0
 80088ee:	f7ff ff97 	bl	8008820 <dcd_int_disable>
  }

  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 80088f2:	4a15      	ldr	r2, [pc, #84]	; (8008948 <dcd_init+0xf0>)
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	b299      	uxth	r1, r3
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]

  if (need_exclusive) {
 80088fe:	7efb      	ldrb	r3, [r7, #27]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <dcd_init+0xb2>
    dcd_int_enable(0);
 8008904:	2000      	movs	r0, #0
 8008906:	f7ff ff69 	bl	80087dc <dcd_int_enable>
  }
}
 800890a:	bf00      	nop
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	3301      	adds	r3, #1
 8008910:	627b      	str	r3, [r7, #36]	; 0x24
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	2b07      	cmp	r3, #7
 8008916:	d9e0      	bls.n	80088da <dcd_init+0x82>
    // This doesn't clear all bits since some bits are "toggle", but does set the type to DISABLED.
    ep_write(i, 0u, false);
  }

  FSDEV_REG->CNTR |= USB_CNTR_RESETM | USB_CNTR_ESOFM | USB_CNTR_CTRM |
 8008918:	4b0b      	ldr	r3, [pc, #44]	; (8008948 <dcd_init+0xf0>)
 800891a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800891e:	b29a      	uxth	r2, r3
 8008920:	4909      	ldr	r1, [pc, #36]	; (8008948 <dcd_init+0xf0>)
 8008922:	4b0a      	ldr	r3, [pc, #40]	; (800894c <dcd_init+0xf4>)
 8008924:	4313      	orrs	r3, r2
 8008926:	b29b      	uxth	r3, r3
 8008928:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
      USB_CNTR_SUSPM | USB_CNTR_WKUPM | USB_CNTR_PMAOVRM;
  handle_bus_reset(rhport);
 800892c:	79fb      	ldrb	r3, [r7, #7]
 800892e:	4618      	mov	r0, r3
 8008930:	f000 f848 	bl	80089c4 <handle_bus_reset>

  // Enable pull-up if supported
  dcd_connect(rhport);
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe f8fd 	bl	8006b36 <dcd_connect>

  return true;
 800893c:	2301      	movs	r3, #1
}
 800893e:	4618      	mov	r0, r3
 8008940:	3728      	adds	r7, #40	; 0x28
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	40005c00 	.word	0x40005c00
 800894c:	ffffdd00 	.word	0xffffdd00

08008950 <dcd_sof_enable>:

void dcd_sof_enable(uint8_t rhport, bool en) {
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	460a      	mov	r2, r1
 800895a:	71fb      	strb	r3, [r7, #7]
 800895c:	4613      	mov	r3, r2
 800895e:	71bb      	strb	r3, [r7, #6]
  (void)rhport;

  if (en) {
 8008960:	79bb      	ldrb	r3, [r7, #6]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <dcd_sof_enable+0x2c>
    FSDEV_REG->CNTR |= USB_CNTR_SOFM;
 8008966:	4b0d      	ldr	r3, [pc, #52]	; (800899c <dcd_sof_enable+0x4c>)
 8008968:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800896c:	b29b      	uxth	r3, r3
 800896e:	4a0b      	ldr	r2, [pc, #44]	; (800899c <dcd_sof_enable+0x4c>)
 8008970:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008974:	b29b      	uxth	r3, r3
 8008976:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
  } else {
    FSDEV_REG->CNTR &= ~USB_CNTR_SOFM;
  }
}
 800897a:	e009      	b.n	8008990 <dcd_sof_enable+0x40>
    FSDEV_REG->CNTR &= ~USB_CNTR_SOFM;
 800897c:	4b07      	ldr	r3, [pc, #28]	; (800899c <dcd_sof_enable+0x4c>)
 800897e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008982:	b29b      	uxth	r3, r3
 8008984:	4a05      	ldr	r2, [pc, #20]	; (800899c <dcd_sof_enable+0x4c>)
 8008986:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800898a:	b29b      	uxth	r3, r3
 800898c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	bc80      	pop	{r7}
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	40005c00 	.word	0x40005c00

080089a0 <dcd_set_address>:

// Receive Set Address request, mcu port must also include status IN response
void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	4603      	mov	r3, r0
 80089a8:	460a      	mov	r2, r1
 80089aa:	71fb      	strb	r3, [r7, #7]
 80089ac:	4613      	mov	r3, r2
 80089ae:	71bb      	strb	r3, [r7, #6]
  (void)dev_addr;

  // Respond with status
  dcd_edpt_xfer(rhport, TUSB_DIR_IN_MASK | 0x00, NULL, 0);
 80089b0:	79f8      	ldrb	r0, [r7, #7]
 80089b2:	2300      	movs	r3, #0
 80089b4:	2200      	movs	r2, #0
 80089b6:	2180      	movs	r1, #128	; 0x80
 80089b8:	f001 fcd2 	bl	800a360 <dcd_edpt_xfer>

  // DCD can only set address after status for this request is complete.
  // do it at dcd_edpt0_status_complete()
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <handle_bus_reset>:

  FSDEV_REG->CNTR |= USB_CNTR_RESUME;
  remoteWakeCountdown = 4u; // required to be 1 to 15 ms, ESOF should trigger every 1ms.
}

static void handle_bus_reset(uint8_t rhport) {
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	4603      	mov	r3, r0
 80089cc:	71fb      	strb	r3, [r7, #7]
  FSDEV_REG->DADDR = 0u; // disable USB Function
 80089ce:	4b19      	ldr	r3, [pc, #100]	; (8008a34 <handle_bus_reset+0x70>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  for (uint32_t i = 0; i < FSDEV_EP_COUNT; i++) {
 80089d6:	2300      	movs	r3, #0
 80089d8:	60fb      	str	r3, [r7, #12]
 80089da:	e019      	b.n	8008a10 <handle_bus_reset+0x4c>
    // Clear EP allocation status
    ep_alloc_status[i].ep_num = 0xFF;
 80089dc:	4a16      	ldr	r2, [pc, #88]	; (8008a38 <handle_bus_reset+0x74>)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	21ff      	movs	r1, #255	; 0xff
 80089e2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    ep_alloc_status[i].ep_type = 0xFF;
 80089e6:	4a14      	ldr	r2, [pc, #80]	; (8008a38 <handle_bus_reset+0x74>)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	22ff      	movs	r2, #255	; 0xff
 80089f0:	705a      	strb	r2, [r3, #1]
    ep_alloc_status[i].allocated[0] = false;
 80089f2:	4a11      	ldr	r2, [pc, #68]	; (8008a38 <handle_bus_reset+0x74>)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	2200      	movs	r2, #0
 80089fc:	709a      	strb	r2, [r3, #2]
    ep_alloc_status[i].allocated[1] = false;
 80089fe:	4a0e      	ldr	r2, [pc, #56]	; (8008a38 <handle_bus_reset+0x74>)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	2200      	movs	r2, #0
 8008a08:	70da      	strb	r2, [r3, #3]
  for (uint32_t i = 0; i < FSDEV_EP_COUNT; i++) {
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b07      	cmp	r3, #7
 8008a14:	d9e2      	bls.n	80089dc <handle_bus_reset+0x18>
  }

  // Reset PMA allocation
  ep_buf_ptr = FSDEV_BTABLE_BASE + 8 * FSDEV_EP_COUNT;
 8008a16:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <handle_bus_reset+0x78>)
 8008a18:	2240      	movs	r2, #64	; 0x40
 8008a1a:	801a      	strh	r2, [r3, #0]

  edpt0_open(rhport); // open control endpoint (both IN & OUT)
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 ff48 	bl	80098b4 <edpt0_open>

  FSDEV_REG->DADDR = USB_DADDR_EF; // Enable USB Function
 8008a24:	4b03      	ldr	r3, [pc, #12]	; (8008a34 <handle_bus_reset+0x70>)
 8008a26:	2280      	movs	r2, #128	; 0x80
 8008a28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8008a2c:	bf00      	nop
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	40005c00 	.word	0x40005c00
 8008a38:	2000078c 	.word	0x2000078c
 8008a3c:	200007ae 	.word	0x200007ae

08008a40 <handle_ctr_tx>:

// Handle CTR interrupt for the TX/IN direction
static void handle_ctr_tx(uint32_t ep_id) {
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b092      	sub	sp, #72	; 0x48
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return FSDEV_REG->ep[ep_id].reg;
 8008a4c:	4a50      	ldr	r2, [pc, #320]	; (8008b90 <handle_ctr_tx+0x150>)
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8008a54:	b29b      	uxth	r3, r3
  uint32_t ep_reg = ep_read(ep_id) | USB_EP_CTR_TX | USB_EP_CTR_RX;
 8008a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a5e:	647b      	str	r3, [r7, #68]	; 0x44

  uint8_t const ep_num = ep_reg & USB_EPADDR_FIELD;
 8008a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	f003 030f 	and.w	r3, r3, #15
 8008a68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a74:	2301      	movs	r3, #1
 8008a76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  return &xfer_status[epnum][dir];
 8008a7a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008a7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008a82:	0052      	lsls	r2, r2, #1
 8008a84:	4413      	add	r3, r2
 8008a86:	011b      	lsls	r3, r3, #4
 8008a88:	4a42      	ldr	r2, [pc, #264]	; (8008b94 <handle_ctr_tx+0x154>)
 8008a8a:	4413      	add	r3, r2
  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, TUSB_DIR_IN);
 8008a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a90:	637b      	str	r3, [r7, #52]	; 0x34
TU_ATTR_ALWAYS_INLINE static inline void ep_change_dtog(uint32_t* reg, tusb_dir_t dir, uint8_t state) {
  *reg ^= (state << (USB_EP_DTOG_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
}

TU_ATTR_ALWAYS_INLINE static inline bool ep_is_iso(uint32_t reg) {
  return (reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS;
 8008a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a9c:	bf0c      	ite	eq
 8008a9e:	2301      	moveq	r3, #1
 8008aa0:	2300      	movne	r3, #0
 8008aa2:	b2db      	uxtb	r3, r3

  if (ep_is_iso(ep_reg)) {
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d03c      	beq.n	8008b22 <handle_ctr_tx+0xe2>
    // Ignore spurious interrupts that we don't schedule
    // host can send IN token while there is no data to send, since ISO does not have NAK
    // this will result to zero length packet --> trigger interrupt (which cannot be masked)
    if (!xfer->iso_in_sending) {
 8008aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aaa:	7bdb      	ldrb	r3, [r3, #15]
 8008aac:	f083 0301 	eor.w	r3, r3, #1
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d167      	bne.n	8008b86 <handle_ctr_tx+0x146>
      return;
    }
    xfer->iso_in_sending = false;
 8008ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab8:	2200      	movs	r2, #0
 8008aba:	73da      	strb	r2, [r3, #15]
    uint8_t buf_id = (ep_reg & USB_EP_DTOG_TX) ? 0 : 1;
 8008abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	bf0c      	ite	eq
 8008ac6:	2301      	moveq	r3, #1
 8008ac8:	2300      	movne	r3, #0
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ad4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008adc:	2300      	movs	r3, #0
 8008ade:	84bb      	strh	r3, [r7, #36]	; 0x24
#ifdef FSDEV_BUS_32BIT
  uint32_t count_addr = FSDEV_BTABLE->ep32[ep_id][buf_id].count_addr;
  count_addr = (count_addr & ~0x03FF0000u) | ((byte_count & 0x3FFu) << 16);
  FSDEV_BTABLE->ep32[ep_id][buf_id].count_addr = count_addr;
#else
  uint16_t cnt = FSDEV_BTABLE->ep16[ep_id][buf_id].count;
 8008ae0:	492d      	ldr	r1, [pc, #180]	; (8008b98 <handle_ctr_tx+0x158>)
 8008ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ae8:	0052      	lsls	r2, r2, #1
 8008aea:	4413      	add	r3, r2
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	440b      	add	r3, r1
 8008af0:	889b      	ldrh	r3, [r3, #4]
 8008af2:	847b      	strh	r3, [r7, #34]	; 0x22
  cnt = (cnt & ~0x3FFU) | (byte_count & 0x3FFU);
 8008af4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008af6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008afa:	f023 0303 	bic.w	r3, r3, #3
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	847b      	strh	r3, [r7, #34]	; 0x22
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = cnt;
 8008b0c:	4922      	ldr	r1, [pc, #136]	; (8008b98 <handle_ctr_tx+0x158>)
 8008b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b14:	0052      	lsls	r2, r2, #1
 8008b16:	4413      	add	r3, r2
 8008b18:	00db      	lsls	r3, r3, #3
 8008b1a:	440b      	add	r3, r1
 8008b1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008b1e:	809a      	strh	r2, [r3, #4]
#endif
}
 8008b20:	bf00      	nop
    btable_set_count(ep_id, buf_id, 0);
  }

  if (xfer->total_len != xfer->queued_len) {
 8008b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b24:	891a      	ldrh	r2, [r3, #8]
 8008b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b28:	895b      	ldrh	r3, [r3, #10]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d006      	beq.n	8008b3c <handle_ctr_tx+0xfc>
    dcd_transmit_packet(xfer, ep_id);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	4619      	mov	r1, r3
 8008b34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008b36:	f001 f949 	bl	8009dcc <dcd_transmit_packet>
 8008b3a:	e025      	b.n	8008b88 <handle_ctr_tx+0x148>
  } else {
    dcd_event_xfer_complete(0, ep_num | TUSB_DIR_IN_MASK, xfer->queued_len, XFER_RESULT_SUCCESS, true);
 8008b3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b48:	895b      	ldrh	r3, [r3, #10]
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	f887 1021 	strb.w	r1, [r7, #33]	; 0x21
 8008b50:	f887 2020 	strb.w	r2, [r7, #32]
 8008b54:	61fb      	str	r3, [r7, #28]
 8008b56:	2300      	movs	r3, #0
 8008b58:	76fb      	strb	r3, [r7, #27]
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	76bb      	strb	r3, [r7, #26]
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8008b5e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008b62:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8008b64:	2307      	movs	r3, #7
 8008b66:	737b      	strb	r3, [r7, #13]
  event.xfer_complete.ep_addr = ep_addr;
 8008b68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b6c:	743b      	strb	r3, [r7, #16]
  event.xfer_complete.len     = xferred_bytes;
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	617b      	str	r3, [r7, #20]
  event.xfer_complete.result  = result;
 8008b72:	7efb      	ldrb	r3, [r7, #27]
 8008b74:	747b      	strb	r3, [r7, #17]
  dcd_event_handler(&event, in_isr);
 8008b76:	7eba      	ldrb	r2, [r7, #26]
 8008b78:	f107 030c 	add.w	r3, r7, #12
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fe ffe8 	bl	8007b54 <dcd_event_handler>
}
 8008b84:	e000      	b.n	8008b88 <handle_ctr_tx+0x148>
      return;
 8008b86:	bf00      	nop
  }
}
 8008b88:	3748      	adds	r7, #72	; 0x48
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	40005c00 	.word	0x40005c00
 8008b94:	2000068c 	.word	0x2000068c
 8008b98:	40006000 	.word	0x40006000

08008b9c <handle_ctr_setup>:

static void handle_ctr_setup(uint32_t ep_id) {
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b0a2      	sub	sp, #136	; 0x88
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ba8:	2301      	movs	r3, #1
 8008baa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  count = FSDEV_BTABLE->ep16[ep_id][buf_id].count;
 8008bae:	497b      	ldr	r1, [pc, #492]	; (8008d9c <handle_ctr_setup+0x200>)
 8008bb0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008bb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bb6:	0052      	lsls	r2, r2, #1
 8008bb8:	4413      	add	r3, r2
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	440b      	add	r3, r1
 8008bbe:	889b      	ldrh	r3, [r3, #4]
 8008bc0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  return count & 0x3FFU;
 8008bc4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bcc:	b29b      	uxth	r3, r3
  uint16_t rx_count = btable_get_count(ep_id, BTABLE_BUF_RX);
 8008bce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	667b      	str	r3, [r7, #100]	; 0x64
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  return FSDEV_BTABLE->ep16[ep_id][buf_id].addr;
 8008bdc:	496f      	ldr	r1, [pc, #444]	; (8008d9c <handle_ctr_setup+0x200>)
 8008bde:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8008be2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008be4:	0052      	lsls	r2, r2, #1
 8008be6:	4413      	add	r3, r2
 8008be8:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8008bec:	b29b      	uxth	r3, r3
  uint16_t rx_addr = btable_get_addr(ep_id, BTABLE_BUF_RX);
 8008bee:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
  uint8_t setup_packet[8] TU_ATTR_ALIGNED(4);

  dcd_read_packet_memory(setup_packet, rx_addr, rx_count);
 8008bf2:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8008bf6:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 8008bfa:	f107 0318 	add.w	r3, r7, #24
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f001 fd7f 	bl	800a702 <dcd_read_packet_memory>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  uint32_t reg = FSDEV_REG->ep[ep_id].reg;
 8008c0e:	4a64      	ldr	r2, [pc, #400]	; (8008da0 <handle_ctr_setup+0x204>)
 8008c10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c12:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	677b      	str	r3, [r7, #116]	; 0x74
  reg |= USB_EP_CTR_TX | USB_EP_CTR_RX;
 8008c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c24:	677b      	str	r3, [r7, #116]	; 0x74
  reg &= USB_EPREG_MASK;
 8008c26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008c28:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	677b      	str	r3, [r7, #116]	; 0x74
  reg &= ~(1 << (USB_EP_CTR_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8008c30:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d102      	bne.n	8008c3e <handle_ctr_setup+0xa2>
 8008c38:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8008c3c:	e001      	b.n	8008c42 <handle_ctr_setup+0xa6>
 8008c3e:	f46f 4300 	mvn.w	r3, #32768	; 0x8000
 8008c42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008c44:	4013      	ands	r3, r2
 8008c46:	677b      	str	r3, [r7, #116]	; 0x74
 8008c48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c4a:	673b      	str	r3, [r7, #112]	; 0x70
 8008c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c50:	2300      	movs	r3, #0
 8008c52:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  if (need_exclusive) {
 8008c56:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d002      	beq.n	8008c64 <handle_ctr_setup+0xc8>
    dcd_int_disable(0);
 8008c5e:	2000      	movs	r0, #0
 8008c60:	f7ff fdde 	bl	8008820 <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 8008c64:	4a4e      	ldr	r2, [pc, #312]	; (8008da0 <handle_ctr_setup+0x204>)
 8008c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c68:	b299      	uxth	r1, r3
 8008c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c6c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 8008c70:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d002      	beq.n	8008c7e <handle_ctr_setup+0xe2>
    dcd_int_enable(0);
 8008c78:	2000      	movs	r0, #0
 8008c7a:	f7ff fdaf 	bl	80087dc <dcd_int_enable>
}
 8008c7e:	bf00      	nop
}
 8008c80:	bf00      	nop

  // Clear CTR RX if another setup packet arrived before this, it will be discarded
  ep_write_clear_ctr(ep_id, TUSB_DIR_OUT);

  // Setup packet should always be 8 bytes. If not, we probably missed the packet
  if (rx_count == 8) {
 8008c82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008c86:	2b08      	cmp	r3, #8
 8008c88:	d11c      	bne.n	8008cc4 <handle_ctr_setup+0x128>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008c90:	f107 0318 	add.w	r3, r7, #24
 8008c94:	653b      	str	r3, [r7, #80]	; 0x50
 8008c96:	2301      	movs	r3, #1
 8008c98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  event.rhport = rhport;
 8008c9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ca0:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 8008ca2:	2306      	movs	r3, #6
 8008ca4:	727b      	strb	r3, [r7, #9]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8008ca6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ca8:	f107 030c 	add.w	r3, r7, #12
 8008cac:	6810      	ldr	r0, [r2, #0]
 8008cae:	6851      	ldr	r1, [r2, #4]
 8008cb0:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8008cb2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8008cb6:	f107 0308 	add.w	r3, r7, #8
 8008cba:	4611      	mov	r1, r2
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe ff49 	bl	8007b54 <dcd_event_handler>
}
 8008cc2:	e067      	b.n	8008d94 <handle_ctr_setup+0x1f8>
    dcd_event_setup_received(0, (uint8_t*) setup_packet, true);
    // Hardware should reset EP0 RX/TX to NAK and both toggle to 1
  } else {
    // Missed setup packet !!!
    TU_BREAKPOINT();
 8008cc4:	4b37      	ldr	r3, [pc, #220]	; (8008da4 <handle_ctr_setup+0x208>)
 8008cc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008cca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d000      	beq.n	8008cda <handle_ctr_setup+0x13e>
 8008cd8:	be00      	bkpt	0x0000
 8008cda:	2300      	movs	r3, #0
 8008cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cde:	2301      	movs	r3, #1
 8008ce0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008ce4:	2308      	movs	r3, #8
 8008ce6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008cea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008cee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008cf2:	f107 0317 	add.w	r3, r7, #23
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cf8:	f107 0316 	add.w	r3, r7, #22
 8008cfc:	63bb      	str	r3, [r7, #56]	; 0x38
/* Aligned buffer size according to hardware */
TU_ATTR_ALWAYS_INLINE static inline uint16_t pma_align_buffer_size(uint16_t size, uint8_t* blsize, uint8_t* num_block) {
  /* The STM32 full speed USB peripheral supports only a limited set of
   * buffer sizes given by the RX buffer entry format in the USB_BTABLE. */
  uint16_t block_in_bytes;
  if (size > 62) {
 8008cfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008d02:	2b3e      	cmp	r3, #62	; 0x3e
 8008d04:	d914      	bls.n	8008d30 <handle_ctr_setup+0x194>
    block_in_bytes = 32;
 8008d06:	2320      	movs	r3, #32
 8008d08:	86fb      	strh	r3, [r7, #54]	; 0x36
    *blsize = 1;
 8008d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 8008d10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008d14:	633b      	str	r3, [r7, #48]	; 0x30
 8008d16:	2320      	movs	r3, #32
 8008d18:	62fb      	str	r3, [r7, #44]	; 0x2c
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8008d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1e:	4413      	add	r3, r2
 8008d20:	1e5a      	subs	r2, r3, #1
 8008d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2c:	701a      	strb	r2, [r3, #0]
 8008d2e:	e013      	b.n	8008d58 <handle_ctr_setup+0x1bc>
  } else {
    block_in_bytes = 2;
 8008d30:	2302      	movs	r3, #2
 8008d32:	86fb      	strh	r3, [r7, #54]	; 0x36
    *blsize = 0;
 8008d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d36:	2200      	movs	r2, #0
 8008d38:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 8008d3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d40:	2302      	movs	r3, #2
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
 8008d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	4413      	add	r3, r2
 8008d4a:	1e5a      	subs	r2, r3, #1
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d56:	701a      	strb	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline void btable_set_rx_bufsize(uint32_t ep_id, uint8_t buf_id, uint16_t wCount) {
  uint8_t blsize, num_block;
  (void) pma_align_buffer_size(wCount, &blsize, &num_block);

  /* Encode into register. When BLSIZE==1, we need to subtract 1 block count */
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 8008d58:	7dfb      	ldrb	r3, [r7, #23]
 8008d5a:	03db      	lsls	r3, r3, #15
 8008d5c:	b21a      	sxth	r2, r3
 8008d5e:	7dbb      	ldrb	r3, [r7, #22]
 8008d60:	4619      	mov	r1, r3
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
 8008d64:	1acb      	subs	r3, r1, r3
 8008d66:	029b      	lsls	r3, r3, #10
 8008d68:	b21b      	sxth	r3, r3
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	b21b      	sxth	r3, r3
 8008d6e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (bl_nb == 0) {
 8008d70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d102      	bne.n	8008d7c <handle_ctr_setup+0x1e0>
    // zlp but 0 is invalid value, set blsize to 1 (32 bytes)
    // Note: lower value can cause PMAOVR on setup with ch32v203
    bl_nb = 1 << 15;
 8008d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d7a:	847b      	strh	r3, [r7, #34]	; 0x22
#ifdef FSDEV_BUS_32BIT
  uint32_t count_addr = FSDEV_BTABLE->ep32[ep_id][buf_id].count_addr;
  count_addr = (bl_nb << 16) | (count_addr & 0x0000FFFFu);
  FSDEV_BTABLE->ep32[ep_id][buf_id].count_addr = count_addr;
#else
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 8008d7c:	4907      	ldr	r1, [pc, #28]	; (8008d9c <handle_ctr_setup+0x200>)
 8008d7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d84:	0052      	lsls	r2, r2, #1
 8008d86:	4413      	add	r3, r2
 8008d88:	00db      	lsls	r3, r3, #3
 8008d8a:	440b      	add	r3, r1
 8008d8c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008d8e:	809a      	strh	r2, [r3, #4]
#endif

}
 8008d90:	bf00      	nop
}
 8008d92:	bf00      	nop
    edpt0_prepare_setup();
  }
}
 8008d94:	bf00      	nop
 8008d96:	3788      	adds	r7, #136	; 0x88
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	40006000 	.word	0x40006000
 8008da0:	40005c00 	.word	0x40005c00
 8008da4:	e000edf0 	.word	0xe000edf0

08008da8 <handle_ctr_rx>:

// Handle CTR interrupt for the RX/OUT direction
static void handle_ctr_rx(uint32_t ep_id) {
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b0b2      	sub	sp, #200	; 0xc8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  return FSDEV_REG->ep[ep_id].reg;
 8008db6:	4aca      	ldr	r2, [pc, #808]	; (80090e0 <handle_ctr_rx+0x338>)
 8008db8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008dbc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8008dc0:	b29b      	uxth	r3, r3
  uint32_t ep_reg = ep_read(ep_id) | USB_EP_CTR_TX | USB_EP_CTR_RX;
 8008dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dca:	623b      	str	r3, [r7, #32]
  uint8_t const ep_num = ep_reg & USB_EPADDR_FIELD;
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f003 030f 	and.w	r3, r3, #15
 8008dd4:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
  bool const is_iso = ep_is_iso(ep_reg);
 8008dd8:	6a3b      	ldr	r3, [r7, #32]
 8008dda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return (reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS;
 8008dde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008de2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dea:	bf0c      	ite	eq
 8008dec:	2301      	moveq	r3, #1
 8008dee:	2300      	movne	r3, #0
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 8008df6:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8008dfa:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
  return &xfer_status[epnum][dir];
 8008e04:	f897 20b9 	ldrb.w	r2, [r7, #185]	; 0xb9
 8008e08:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8008e0c:	0052      	lsls	r2, r2, #1
 8008e0e:	4413      	add	r3, r2
 8008e10:	011b      	lsls	r3, r3, #4
 8008e12:	4ab4      	ldr	r2, [pc, #720]	; (80090e4 <handle_ctr_rx+0x33c>)
 8008e14:	4413      	add	r3, r2
  xfer_ctl_t* xfer = xfer_ctl_ptr(ep_num, TUSB_DIR_OUT);
 8008e16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

  uint8_t buf_id;
  if (is_iso) {
 8008e1a:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00a      	beq.n	8008e38 <handle_ctr_rx+0x90>
    buf_id = (ep_reg & USB_EP_DTOG_RX) ? 0 : 1; // ISO are double buffered
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	bf0c      	ite	eq
 8008e2c:	2301      	moveq	r3, #1
 8008e2e:	2300      	movne	r3, #0
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8008e36:	e002      	b.n	8008e3e <handle_ctr_rx+0x96>
  } else {
    buf_id = BTABLE_BUF_RX;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008e44:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8008e48:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  count = FSDEV_BTABLE->ep16[ep_id][buf_id].count;
 8008e4c:	49a6      	ldr	r1, [pc, #664]	; (80090e8 <handle_ctr_rx+0x340>)
 8008e4e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8008e52:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008e56:	0052      	lsls	r2, r2, #1
 8008e58:	4413      	add	r3, r2
 8008e5a:	00db      	lsls	r3, r3, #3
 8008e5c:	440b      	add	r3, r1
 8008e5e:	889b      	ldrh	r3, [r3, #4]
 8008e60:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
  return count & 0x3FFU;
 8008e64:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8008e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e6c:	b29b      	uxth	r3, r3
  }
  uint16_t const rx_count = btable_get_count(ep_id, buf_id);
 8008e6e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e78:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8008e7c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  return FSDEV_BTABLE->ep16[ep_id][buf_id].addr;
 8008e80:	4999      	ldr	r1, [pc, #612]	; (80090e8 <handle_ctr_rx+0x340>)
 8008e82:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8008e86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008e8a:	0052      	lsls	r2, r2, #1
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8008e92:	b29b      	uxth	r3, r3
  uint16_t pma_addr = (uint16_t) btable_get_addr(ep_id, buf_id);
 8008e94:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc

  if (xfer->ff) {
 8008e98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <handle_ctr_rx+0x110>
    dcd_read_packet_memory_ff(xfer->ff, pma_addr, rx_count);
 8008ea2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008eac:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f001 fd1a 	bl	800a8ea <dcd_read_packet_memory_ff>
 8008eb6:	e00d      	b.n	8008ed4 <handle_ctr_rx+0x12c>
  } else {
    dcd_read_packet_memory(xfer->buffer + xfer->queued_len, pma_addr, rx_count);
 8008eb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ec2:	8952      	ldrh	r2, [r2, #10]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008eca:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f001 fc17 	bl	800a702 <dcd_read_packet_memory>
  }
  xfer->queued_len += rx_count;
 8008ed4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ed8:	895a      	ldrh	r2, [r3, #10]
 8008eda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ede:	4413      	add	r3, r2
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ee6:	815a      	strh	r2, [r3, #10]

  if ((rx_count < xfer->max_packet_size) || (xfer->queued_len >= xfer->total_len)) {
 8008ee8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008eec:	899b      	ldrh	r3, [r3, #12]
 8008eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d308      	bcc.n	8008f08 <handle_ctr_rx+0x160>
 8008ef6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008efa:	895a      	ldrh	r2, [r3, #10]
 8008efc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008f00:	891b      	ldrh	r3, [r3, #8]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	f0c0 80a2 	bcc.w	800904c <handle_ctr_rx+0x2a4>
    // all bytes received or short packet

    // For ch32v203: reset rx bufsize to mps to prevent race condition to cause PMAOVR (occurs with msc write10)
    btable_set_rx_bufsize(ep_id, BTABLE_BUF_RX, xfer->max_packet_size);
 8008f08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008f0c:	899a      	ldrh	r2, [r3, #12]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f14:	2301      	movs	r3, #1
 8008f16:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8008f20:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8008f24:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008f28:	f107 031f 	add.w	r3, r7, #31
 8008f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f30:	f107 031e 	add.w	r3, r7, #30
 8008f34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (size > 62) {
 8008f38:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008f3c:	2b3e      	cmp	r3, #62	; 0x3e
 8008f3e:	d917      	bls.n	8008f70 <handle_ctr_rx+0x1c8>
    block_in_bytes = 32;
 8008f40:	2320      	movs	r3, #32
 8008f42:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    *blsize = 1;
 8008f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 8008f4e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008f52:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f54:	2320      	movs	r3, #32
 8008f56:	677b      	str	r3, [r7, #116]	; 0x74
 8008f58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f5c:	4413      	add	r3, r2
 8008f5e:	1e5a      	subs	r2, r3, #1
 8008f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f6c:	701a      	strb	r2, [r3, #0]
 8008f6e:	e016      	b.n	8008f9e <handle_ctr_rx+0x1f6>
    block_in_bytes = 2;
 8008f70:	2302      	movs	r3, #2
 8008f72:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    *blsize = 0;
 8008f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 8008f7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008f82:	673b      	str	r3, [r7, #112]	; 0x70
 8008f84:	2302      	movs	r3, #2
 8008f86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f88:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f8c:	4413      	add	r3, r2
 8008f8e:	1e5a      	subs	r2, r3, #1
 8008f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f9c:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 8008f9e:	7ffb      	ldrb	r3, [r7, #31]
 8008fa0:	03db      	lsls	r3, r3, #15
 8008fa2:	b21a      	sxth	r2, r3
 8008fa4:	7fbb      	ldrb	r3, [r7, #30]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	7ffb      	ldrb	r3, [r7, #31]
 8008faa:	1acb      	subs	r3, r1, r3
 8008fac:	029b      	lsls	r3, r3, #10
 8008fae:	b21b      	sxth	r3, r3
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	b21b      	sxth	r3, r3
 8008fb4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  if (bl_nb == 0) {
 8008fb8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d103      	bne.n	8008fc8 <handle_ctr_rx+0x220>
    bl_nb = 1 << 15;
 8008fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fc4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 8008fc8:	4947      	ldr	r1, [pc, #284]	; (80090e8 <handle_ctr_rx+0x340>)
 8008fca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008fce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008fd2:	0052      	lsls	r2, r2, #1
 8008fd4:	4413      	add	r3, r2
 8008fd6:	00db      	lsls	r3, r3, #3
 8008fd8:	440b      	add	r3, r1
 8008fda:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8008fde:	809a      	strh	r2, [r3, #4]
}
 8008fe0:	bf00      	nop

    dcd_event_xfer_complete(0, ep_num, xfer->queued_len, XFER_RESULT_SUCCESS, true);
 8008fe2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008fe6:	895b      	ldrh	r3, [r3, #10]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	2300      	movs	r3, #0
 8008fec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8008ff0:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8008ff4:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8008ff8:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009002:	2301      	movs	r3, #1
 8009004:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
  event.rhport = rhport;
 8009008:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800900c:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800900e:	2307      	movs	r3, #7
 8009010:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8009012:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8009016:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8009018:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800901c:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 800901e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009022:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8009024:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8009028:	f107 0310 	add.w	r3, r7, #16
 800902c:	4611      	mov	r1, r2
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe fd90 	bl	8007b54 <dcd_event_handler>
}
 8009034:	bf00      	nop

    // ch32 seems to unconditionally accept ZLP on EP0 OUT, which can incorrectly use queued_len of previous
    // transfer. So reset total_len and queued_len to 0.
    xfer->total_len = xfer->queued_len = 0;
 8009036:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800903a:	2200      	movs	r2, #0
 800903c:	815a      	strh	r2, [r3, #10]
 800903e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009042:	895a      	ldrh	r2, [r3, #10]
 8009044:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009048:	811a      	strh	r2, [r3, #8]
 800904a:	e0bc      	b.n	80091c6 <handle_ctr_rx+0x41e>
  } else {
    // Set endpoint active again for receiving more data. Note that isochronous endpoints stay active always
    if (!is_iso) {
 800904c:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8009050:	f083 0301 	eor.w	r3, r3, #1
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b00      	cmp	r3, #0
 8009058:	d07a      	beq.n	8009150 <handle_ctr_rx+0x3a8>
      uint16_t const cnt = tu_min16(xfer->total_len - xfer->queued_len, xfer->max_packet_size);
 800905a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800905e:	891a      	ldrh	r2, [r3, #8]
 8009060:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009064:	895b      	ldrh	r3, [r3, #10]
 8009066:	1ad3      	subs	r3, r2, r3
 8009068:	b29a      	uxth	r2, r3
 800906a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800906e:	899b      	ldrh	r3, [r3, #12]
 8009070:	87ba      	strh	r2, [r7, #60]	; 0x3c
 8009072:	877b      	strh	r3, [r7, #58]	; 0x3a
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8009074:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8009076:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009078:	4293      	cmp	r3, r2
 800907a:	bf28      	it	cs
 800907c:	4613      	movcs	r3, r2
 800907e:	b29b      	uxth	r3, r3
 8009080:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	667b      	str	r3, [r7, #100]	; 0x64
 8009088:	2301      	movs	r3, #1
 800908a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800908e:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8009092:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8009096:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800909a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800909e:	f107 030f 	add.w	r3, r7, #15
 80090a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80090a4:	f107 030e 	add.w	r3, r7, #14
 80090a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (size > 62) {
 80090aa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80090ae:	2b3e      	cmp	r3, #62	; 0x3e
 80090b0:	d91c      	bls.n	80090ec <handle_ctr_rx+0x344>
    block_in_bytes = 32;
 80090b2:	2320      	movs	r3, #32
 80090b4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    *blsize = 1;
 80090b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090ba:	2201      	movs	r2, #1
 80090bc:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 80090be:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80090c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090c4:	2320      	movs	r3, #32
 80090c6:	64bb      	str	r3, [r7, #72]	; 0x48
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 80090c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090cc:	4413      	add	r3, r2
 80090ce:	1e5a      	subs	r2, r3, #1
 80090d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090da:	701a      	strb	r2, [r3, #0]
 80090dc:	e01b      	b.n	8009116 <handle_ctr_rx+0x36e>
 80090de:	bf00      	nop
 80090e0:	40005c00 	.word	0x40005c00
 80090e4:	2000068c 	.word	0x2000068c
 80090e8:	40006000 	.word	0x40006000
    block_in_bytes = 2;
 80090ec:	2302      	movs	r3, #2
 80090ee:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    *blsize = 0;
 80090f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090f4:	2200      	movs	r2, #0
 80090f6:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 80090f8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80090fc:	647b      	str	r3, [r7, #68]	; 0x44
 80090fe:	2302      	movs	r3, #2
 8009100:	643b      	str	r3, [r7, #64]	; 0x40
 8009102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009106:	4413      	add	r3, r2
 8009108:	1e5a      	subs	r2, r3, #1
 800910a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800910c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009110:	b2da      	uxtb	r2, r3
 8009112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009114:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	03db      	lsls	r3, r3, #15
 800911a:	b21a      	sxth	r2, r3
 800911c:	7bbb      	ldrb	r3, [r7, #14]
 800911e:	4619      	mov	r1, r3
 8009120:	7bfb      	ldrb	r3, [r7, #15]
 8009122:	1acb      	subs	r3, r1, r3
 8009124:	029b      	lsls	r3, r3, #10
 8009126:	b21b      	sxth	r3, r3
 8009128:	4313      	orrs	r3, r2
 800912a:	b21b      	sxth	r3, r3
 800912c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  if (bl_nb == 0) {
 800912e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009130:	2b00      	cmp	r3, #0
 8009132:	d102      	bne.n	800913a <handle_ctr_rx+0x392>
    bl_nb = 1 << 15;
 8009134:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009138:	87fb      	strh	r3, [r7, #62]	; 0x3e
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 800913a:	4925      	ldr	r1, [pc, #148]	; (80091d0 <handle_ctr_rx+0x428>)
 800913c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8009140:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009142:	0052      	lsls	r2, r2, #1
 8009144:	4413      	add	r3, r2
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	440b      	add	r3, r1
 800914a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800914c:	809a      	strh	r2, [r3, #4]
}
 800914e:	bf00      	nop
      btable_set_rx_bufsize(ep_id, BTABLE_BUF_RX, cnt);
    }
    ep_reg &= USB_EPREG_MASK | EP_STAT_MASK(TUSB_DIR_OUT); // will change RX Status, reserved other toggle bits
 8009150:	6a3a      	ldr	r2, [r7, #32]
 8009152:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8009156:	4013      	ands	r3, r2
 8009158:	623b      	str	r3, [r7, #32]
 800915a:	f107 0320 	add.w	r3, r7, #32
 800915e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009160:	2300      	movs	r3, #0
 8009162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009166:	2303      	movs	r3, #3
 8009168:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8009174:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009178:	2a01      	cmp	r2, #1
 800917a:	d101      	bne.n	8009180 <handle_ctr_rx+0x3d8>
 800917c:	2204      	movs	r2, #4
 800917e:	e000      	b.n	8009182 <handle_ctr_rx+0x3da>
 8009180:	220c      	movs	r2, #12
 8009182:	fa01 f202 	lsl.w	r2, r1, r2
 8009186:	405a      	eors	r2, r3
 8009188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918a:	601a      	str	r2, [r3, #0]
}
 800918c:	bf00      	nop
    ep_change_status(&ep_reg, TUSB_DIR_OUT, EP_STAT_VALID);
    ep_write(ep_id, ep_reg, false);
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	637a      	str	r2, [r7, #52]	; 0x34
 8009194:	633b      	str	r3, [r7, #48]	; 0x30
 8009196:	2300      	movs	r3, #0
 8009198:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (need_exclusive) {
 800919c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <handle_ctr_rx+0x402>
    dcd_int_disable(0);
 80091a4:	2000      	movs	r0, #0
 80091a6:	f7ff fb3b 	bl	8008820 <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 80091aa:	4a0a      	ldr	r2, [pc, #40]	; (80091d4 <handle_ctr_rx+0x42c>)
 80091ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ae:	b299      	uxth	r1, r3
 80091b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b2:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 80091b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d002      	beq.n	80091c4 <handle_ctr_rx+0x41c>
    dcd_int_enable(0);
 80091be:	2000      	movs	r0, #0
 80091c0:	f7ff fb0c 	bl	80087dc <dcd_int_enable>
}
 80091c4:	bf00      	nop
  }
}
 80091c6:	bf00      	nop
 80091c8:	37c8      	adds	r7, #200	; 0xc8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	40006000 	.word	0x40006000
 80091d4:	40005c00 	.word	0x40005c00

080091d8 <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport) {
 80091d8:	b580      	push	{r7, lr}
 80091da:	b0a4      	sub	sp, #144	; 0x90
 80091dc:	af00      	add	r7, sp, #0
 80091de:	4603      	mov	r3, r0
 80091e0:	71fb      	strb	r3, [r7, #7]
  uint32_t int_status = FSDEV_REG->ISTR;
 80091e2:	4bbd      	ldr	r3, [pc, #756]	; (80094d8 <dcd_int_handler+0x300>)
 80091e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  /* Put SOF flag at the beginning of ISR in case to get least amount of jitter if it is used for timing purposes */
  if (int_status & USB_ISTR_SOF) {
 80091ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d021      	beq.n	800923e <dcd_int_handler+0x66>
    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_SOF;
 80091fa:	4bb7      	ldr	r3, [pc, #732]	; (80094d8 <dcd_int_handler+0x300>)
 80091fc:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8009200:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    dcd_event_sof(0, FSDEV_REG->FNR & USB_FNR_FN, true);
 8009204:	4bb4      	ldr	r3, [pc, #720]	; (80094d8 <dcd_int_handler+0x300>)
 8009206:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800920a:	b29b      	uxth	r3, r3
 800920c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009210:	2200      	movs	r2, #0
 8009212:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
 8009216:	67bb      	str	r3, [r7, #120]	; 0x78
 8009218:	2301      	movs	r3, #1
 800921a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800921e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009222:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 8009224:	2303      	movs	r3, #3
 8009226:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 8009228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800922a:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800922c:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8009230:	f107 0308 	add.w	r3, r7, #8
 8009234:	4611      	mov	r1, r2
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe fc8c 	bl	8007b54 <dcd_event_handler>
}
 800923c:	bf00      	nop
  }

  if (int_status & USB_ISTR_RESET) {
 800923e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009246:	2b00      	cmp	r3, #0
 8009248:	d023      	beq.n	8009292 <dcd_int_handler+0xba>
    // USBRST is start of reset.
    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_RESET;
 800924a:	4ba3      	ldr	r3, [pc, #652]	; (80094d8 <dcd_int_handler+0x300>)
 800924c:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8009250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    handle_bus_reset(rhport);
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff fbb4 	bl	80089c4 <handle_bus_reset>
 800925c:	2300      	movs	r3, #0
 800925e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8009262:	2300      	movs	r3, #0
 8009264:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8009268:	2301      	movs	r3, #1
 800926a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  event.rhport = rhport;
 800926e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8009272:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_BUS_RESET;
 8009274:	2301      	movs	r3, #1
 8009276:	757b      	strb	r3, [r7, #21]
  event.bus_reset.speed = speed;
 8009278:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800927c:	763b      	strb	r3, [r7, #24]
  dcd_event_handler(&event, in_isr);
 800927e:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8009282:	f107 0314 	add.w	r3, r7, #20
 8009286:	4611      	mov	r1, r2
 8009288:	4618      	mov	r0, r3
 800928a:	f7fe fc63 	bl	8007b54 <dcd_event_handler>
}
 800928e:	bf00      	nop
    dcd_event_bus_reset(0, TUSB_SPEED_FULL, true);
    return; // Don't do the rest of the things here; perhaps they've been cleared?
 8009290:	e16a      	b.n	8009568 <dcd_int_handler+0x390>
  }

  if (int_status & USB_ISTR_WKUP) {
 8009292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800929a:	2b00      	cmp	r3, #0
 800929c:	d032      	beq.n	8009304 <dcd_int_handler+0x12c>
    FSDEV_REG->CNTR &= ~USB_CNTR_LPMODE;
 800929e:	4b8e      	ldr	r3, [pc, #568]	; (80094d8 <dcd_int_handler+0x300>)
 80092a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	4a8c      	ldr	r2, [pc, #560]	; (80094d8 <dcd_int_handler+0x300>)
 80092a8:	f023 0304 	bic.w	r3, r3, #4
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    FSDEV_REG->CNTR &= ~USB_CNTR_FSUSP;
 80092b2:	4b89      	ldr	r3, [pc, #548]	; (80094d8 <dcd_int_handler+0x300>)
 80092b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	4a87      	ldr	r2, [pc, #540]	; (80094d8 <dcd_int_handler+0x300>)
 80092bc:	f023 0308 	bic.w	r3, r3, #8
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40

    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_WKUP;
 80092c6:	4b84      	ldr	r3, [pc, #528]	; (80094d8 <dcd_int_handler+0x300>)
 80092c8:	f64e 72ff 	movw	r2, #61439	; 0xefff
 80092cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80092d0:	2300      	movs	r3, #0
 80092d2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80092d6:	2305      	movs	r3, #5
 80092d8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 80092dc:	2301      	movs	r3, #1
 80092de:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
  event.rhport = rhport;
 80092e2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80092e6:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 80092ea:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80092ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dcd_event_handler(&event, in_isr);
 80092f2:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80092f6:	f107 0320 	add.w	r3, r7, #32
 80092fa:	4611      	mov	r1, r2
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe fc29 	bl	8007b54 <dcd_event_handler>
}
 8009302:	bf00      	nop
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
  }

  if (int_status & USB_ISTR_SUSP) {
 8009304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800930c:	2b00      	cmp	r3, #0
 800930e:	d032      	beq.n	8009376 <dcd_int_handler+0x19e>
    /* Suspend is asserted for both suspend and unplug events. without Vbus monitoring,
     * these events cannot be differentiated, so we only trigger suspend. */

    /* Force low-power mode in the macrocell */
    FSDEV_REG->CNTR |= USB_CNTR_FSUSP;
 8009310:	4b71      	ldr	r3, [pc, #452]	; (80094d8 <dcd_int_handler+0x300>)
 8009312:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009316:	b29b      	uxth	r3, r3
 8009318:	4a6f      	ldr	r2, [pc, #444]	; (80094d8 <dcd_int_handler+0x300>)
 800931a:	f043 0308 	orr.w	r3, r3, #8
 800931e:	b29b      	uxth	r3, r3
 8009320:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    FSDEV_REG->CNTR |= USB_CNTR_LPMODE;
 8009324:	4b6c      	ldr	r3, [pc, #432]	; (80094d8 <dcd_int_handler+0x300>)
 8009326:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800932a:	b29b      	uxth	r3, r3
 800932c:	4a6a      	ldr	r2, [pc, #424]	; (80094d8 <dcd_int_handler+0x300>)
 800932e:	f043 0304 	orr.w	r3, r3, #4
 8009332:	b29b      	uxth	r3, r3
 8009334:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_SUSP;
 8009338:	4b67      	ldr	r3, [pc, #412]	; (80094d8 <dcd_int_handler+0x300>)
 800933a:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 800933e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8009342:	2300      	movs	r3, #0
 8009344:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8009348:	2304      	movs	r3, #4
 800934a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800934e:	2301      	movs	r3, #1
 8009350:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  event.rhport = rhport;
 8009354:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8009358:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  event.event_id = eid;
 800935c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009360:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 8009364:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8009368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800936c:	4611      	mov	r1, r2
 800936e:	4618      	mov	r0, r3
 8009370:	f7fe fbf0 	bl	8007b54 <dcd_event_handler>
}
 8009374:	bf00      	nop
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
  }

  if (int_status & USB_ISTR_ESOF) {
 8009376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800937a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937e:	2b00      	cmp	r3, #0
 8009380:	f000 80d4 	beq.w	800952c <dcd_int_handler+0x354>
    if (remoteWakeCountdown == 1u) {
 8009384:	4b55      	ldr	r3, [pc, #340]	; (80094dc <dcd_int_handler+0x304>)
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d109      	bne.n	80093a0 <dcd_int_handler+0x1c8>
      FSDEV_REG->CNTR &= ~USB_CNTR_RESUME;
 800938c:	4b52      	ldr	r3, [pc, #328]	; (80094d8 <dcd_int_handler+0x300>)
 800938e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009392:	b29b      	uxth	r3, r3
 8009394:	4a50      	ldr	r2, [pc, #320]	; (80094d8 <dcd_int_handler+0x300>)
 8009396:	f023 0310 	bic.w	r3, r3, #16
 800939a:	b29b      	uxth	r3, r3
 800939c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    }
    if (remoteWakeCountdown > 0u) {
 80093a0:	4b4e      	ldr	r3, [pc, #312]	; (80094dc <dcd_int_handler+0x304>)
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d005      	beq.n	80093b4 <dcd_int_handler+0x1dc>
      remoteWakeCountdown--;
 80093a8:	4b4c      	ldr	r3, [pc, #304]	; (80094dc <dcd_int_handler+0x304>)
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	3b01      	subs	r3, #1
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	4b4a      	ldr	r3, [pc, #296]	; (80094dc <dcd_int_handler+0x304>)
 80093b2:	701a      	strb	r2, [r3, #0]
    }
    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_ESOF;
 80093b4:	4b48      	ldr	r3, [pc, #288]	; (80094d8 <dcd_int_handler+0x300>)
 80093b6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80093ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  // loop to handle all pending CTR interrupts
  while (FSDEV_REG->ISTR & USB_ISTR_CTR) {
 80093be:	e0b5      	b.n	800952c <dcd_int_handler+0x354>
    // skip DIR bit, and use CTR TX/RX instead, since there is chance we have both TX/RX completed in one interrupt
    uint32_t const ep_id = FSDEV_REG->ISTR & USB_ISTR_EP_ID;
 80093c0:	4b45      	ldr	r3, [pc, #276]	; (80094d8 <dcd_int_handler+0x300>)
 80093c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	f003 030f 	and.w	r3, r3, #15
 80093cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093d4:	66bb      	str	r3, [r7, #104]	; 0x68
  return FSDEV_REG->ep[ep_id].reg;
 80093d6:	4a40      	ldr	r2, [pc, #256]	; (80094d8 <dcd_int_handler+0x300>)
 80093d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093da:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80093de:	b29b      	uxth	r3, r3
    uint32_t const ep_reg = ep_read(ep_id);
 80093e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    if (ep_reg & USB_EP_CTR_RX) {
 80093e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d04e      	beq.n	800948e <dcd_int_handler+0x2b6>
      while (cycle_count > 0U) {
        cycle_count--; // each count take 3 cycles (1 for sub, jump, and compare)
      }
      #endif

      if (ep_reg & USB_EP_SETUP) {
 80093f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d004      	beq.n	8009406 <dcd_int_handler+0x22e>
        handle_ctr_setup(ep_id); // CTR will be clear after copied setup packet
 80093fc:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8009400:	f7ff fbcc 	bl	8008b9c <handle_ctr_setup>
 8009404:	e043      	b.n	800948e <dcd_int_handler+0x2b6>
 8009406:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800940a:	667b      	str	r3, [r7, #100]	; 0x64
 800940c:	2300      	movs	r3, #0
 800940e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  uint32_t reg = FSDEV_REG->ep[ep_id].reg;
 8009412:	4a31      	ldr	r2, [pc, #196]	; (80094d8 <dcd_int_handler+0x300>)
 8009414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009416:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800941a:	b29b      	uxth	r3, r3
 800941c:	65fb      	str	r3, [r7, #92]	; 0x5c
  reg |= USB_EP_CTR_TX | USB_EP_CTR_RX;
 800941e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009428:	65fb      	str	r3, [r7, #92]	; 0x5c
  reg &= USB_EPREG_MASK;
 800942a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800942c:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8009430:	4013      	ands	r3, r2
 8009432:	65fb      	str	r3, [r7, #92]	; 0x5c
  reg &= ~(1 << (USB_EP_CTR_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8009434:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8009438:	2b01      	cmp	r3, #1
 800943a:	d102      	bne.n	8009442 <dcd_int_handler+0x26a>
 800943c:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8009440:	e001      	b.n	8009446 <dcd_int_handler+0x26e>
 8009442:	f46f 4300 	mvn.w	r3, #32768	; 0x8000
 8009446:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009448:	4013      	ands	r3, r2
 800944a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800944c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800944e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009452:	657b      	str	r3, [r7, #84]	; 0x54
 8009454:	2300      	movs	r3, #0
 8009456:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (need_exclusive) {
 800945a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800945e:	2b00      	cmp	r3, #0
 8009460:	d002      	beq.n	8009468 <dcd_int_handler+0x290>
    dcd_int_disable(0);
 8009462:	2000      	movs	r0, #0
 8009464:	f7ff f9dc 	bl	8008820 <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 8009468:	4a1b      	ldr	r2, [pc, #108]	; (80094d8 <dcd_int_handler+0x300>)
 800946a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800946c:	b299      	uxth	r1, r3
 800946e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009470:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 8009474:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <dcd_int_handler+0x2aa>
    dcd_int_enable(0);
 800947c:	2000      	movs	r0, #0
 800947e:	f7ff f9ad 	bl	80087dc <dcd_int_enable>
}
 8009482:	bf00      	nop
}
 8009484:	bf00      	nop
      } else {
        ep_write_clear_ctr(ep_id, TUSB_DIR_OUT);
        handle_ctr_rx(ep_id);
 8009486:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800948a:	f7ff fc8d 	bl	8008da8 <handle_ctr_rx>
      }
    }

    if (ep_reg & USB_EP_CTR_TX) {
 800948e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009496:	2b00      	cmp	r3, #0
 8009498:	d048      	beq.n	800952c <dcd_int_handler+0x354>
 800949a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800949e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094a0:	2301      	movs	r3, #1
 80094a2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint32_t reg = FSDEV_REG->ep[ep_id].reg;
 80094a6:	4a0c      	ldr	r2, [pc, #48]	; (80094d8 <dcd_int_handler+0x300>)
 80094a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094aa:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	647b      	str	r3, [r7, #68]	; 0x44
  reg |= USB_EP_CTR_TX | USB_EP_CTR_RX;
 80094b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094bc:	647b      	str	r3, [r7, #68]	; 0x44
  reg &= USB_EPREG_MASK;
 80094be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094c0:	f648 738f 	movw	r3, #36751	; 0x8f8f
 80094c4:	4013      	ands	r3, r2
 80094c6:	647b      	str	r3, [r7, #68]	; 0x44
  reg &= ~(1 << (USB_EP_CTR_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 80094c8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d107      	bne.n	80094e0 <dcd_int_handler+0x308>
 80094d0:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80094d4:	e006      	b.n	80094e4 <dcd_int_handler+0x30c>
 80094d6:	bf00      	nop
 80094d8:	40005c00 	.word	0x40005c00
 80094dc:	200007ac 	.word	0x200007ac
 80094e0:	f46f 4300 	mvn.w	r3, #32768	; 0x8000
 80094e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094e6:	4013      	ands	r3, r2
 80094e8:	647b      	str	r3, [r7, #68]	; 0x44
 80094ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ec:	643b      	str	r3, [r7, #64]	; 0x40
 80094ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094f2:	2300      	movs	r3, #0
 80094f4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (need_exclusive) {
 80094f8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <dcd_int_handler+0x32e>
    dcd_int_disable(0);
 8009500:	2000      	movs	r0, #0
 8009502:	f7ff f98d 	bl	8008820 <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 8009506:	4a1a      	ldr	r2, [pc, #104]	; (8009570 <dcd_int_handler+0x398>)
 8009508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800950a:	b299      	uxth	r1, r3
 800950c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800950e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 8009512:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009516:	2b00      	cmp	r3, #0
 8009518:	d002      	beq.n	8009520 <dcd_int_handler+0x348>
    dcd_int_enable(0);
 800951a:	2000      	movs	r0, #0
 800951c:	f7ff f95e 	bl	80087dc <dcd_int_enable>
}
 8009520:	bf00      	nop
}
 8009522:	bf00      	nop
      ep_write_clear_ctr(ep_id, TUSB_DIR_IN);
      handle_ctr_tx(ep_id);
 8009524:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8009528:	f7ff fa8a 	bl	8008a40 <handle_ctr_tx>
  while (FSDEV_REG->ISTR & USB_ISTR_CTR) {
 800952c:	4b10      	ldr	r3, [pc, #64]	; (8009570 <dcd_int_handler+0x398>)
 800952e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009532:	b29b      	uxth	r3, r3
 8009534:	b21b      	sxth	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	f6ff af42 	blt.w	80093c0 <dcd_int_handler+0x1e8>
    }
  }

  if (int_status & USB_ISTR_PMAOVR) {
 800953c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00f      	beq.n	8009568 <dcd_int_handler+0x390>
    TU_BREAKPOINT();
 8009548:	4b0a      	ldr	r3, [pc, #40]	; (8009574 <dcd_int_handler+0x39c>)
 800954a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800954e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	d000      	beq.n	800955e <dcd_int_handler+0x386>
 800955c:	be00      	bkpt	0x0000
    FSDEV_REG->ISTR = (fsdev_bus_t)~USB_ISTR_PMAOVR;
 800955e:	4b04      	ldr	r3, [pc, #16]	; (8009570 <dcd_int_handler+0x398>)
 8009560:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8009564:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8009568:	3790      	adds	r7, #144	; 0x90
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	40005c00 	.word	0x40005c00
 8009574:	e000edf0 	.word	0xe000edf0

08009578 <dcd_edpt0_status_complete>:
// Endpoint API
//--------------------------------------------------------------------+

// Invoked when a control transfer's status stage is complete.
// May help DCD to prepare for next control transfer, this API is optional.
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const *request) {
 8009578:	b480      	push	{r7}
 800957a:	b08f      	sub	sp, #60	; 0x3c
 800957c:	af00      	add	r7, sp, #0
 800957e:	4603      	mov	r3, r0
 8009580:	6039      	str	r1, [r7, #0]
 8009582:	71fb      	strb	r3, [r7, #7]
  (void)rhport;

  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	f003 031f 	and.w	r3, r3, #31
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d118      	bne.n	80095c4 <dcd_edpt0_status_complete+0x4c>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800959a:	b2db      	uxtb	r3, r3
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 800959c:	2b00      	cmp	r3, #0
 800959e:	d111      	bne.n	80095c4 <dcd_edpt0_status_complete+0x4c>
      request->bRequest == TUSB_REQ_SET_ADDRESS) {
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	785b      	ldrb	r3, [r3, #1]
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 80095a4:	2b05      	cmp	r3, #5
 80095a6:	d10d      	bne.n	80095c4 <dcd_edpt0_status_complete+0x4c>
    uint8_t const dev_addr = (uint8_t)request->wValue;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	885b      	ldrh	r3, [r3, #2]
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    FSDEV_REG->DADDR = (USB_DADDR_EF | dev_addr);
 80095b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80095b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	4b2f      	ldr	r3, [pc, #188]	; (800967c <dcd_edpt0_status_complete+0x104>)
 80095be:	b292      	uxth	r2, r2
 80095c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80095c4:	2300      	movs	r3, #0
 80095c6:	633b      	str	r3, [r7, #48]	; 0x30
 80095c8:	2301      	movs	r3, #1
 80095ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80095ce:	2308      	movs	r3, #8
 80095d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80095d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80095d4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80095d6:	f107 0309 	add.w	r3, r7, #9
 80095da:	627b      	str	r3, [r7, #36]	; 0x24
 80095dc:	f107 0308 	add.w	r3, r7, #8
 80095e0:	623b      	str	r3, [r7, #32]
  if (size > 62) {
 80095e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80095e4:	2b3e      	cmp	r3, #62	; 0x3e
 80095e6:	d913      	bls.n	8009610 <dcd_edpt0_status_complete+0x98>
    block_in_bytes = 32;
 80095e8:	2320      	movs	r3, #32
 80095ea:	83fb      	strh	r3, [r7, #30]
    *blsize = 1;
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	2201      	movs	r2, #1
 80095f0:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 80095f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80095f4:	61bb      	str	r3, [r7, #24]
 80095f6:	2320      	movs	r3, #32
 80095f8:	617b      	str	r3, [r7, #20]
 80095fa:	69ba      	ldr	r2, [r7, #24]
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	4413      	add	r3, r2
 8009600:	1e5a      	subs	r2, r3, #1
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	fbb2 f3f3 	udiv	r3, r2, r3
 8009608:	b2da      	uxtb	r2, r3
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	701a      	strb	r2, [r3, #0]
 800960e:	e012      	b.n	8009636 <dcd_edpt0_status_complete+0xbe>
    block_in_bytes = 2;
 8009610:	2302      	movs	r3, #2
 8009612:	83fb      	strh	r3, [r7, #30]
    *blsize = 0;
 8009614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009616:	2200      	movs	r2, #0
 8009618:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 800961a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800961c:	613b      	str	r3, [r7, #16]
 800961e:	2302      	movs	r3, #2
 8009620:	60fb      	str	r3, [r7, #12]
 8009622:	693a      	ldr	r2, [r7, #16]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	4413      	add	r3, r2
 8009628:	1e5a      	subs	r2, r3, #1
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009630:	b2da      	uxtb	r2, r3
 8009632:	6a3b      	ldr	r3, [r7, #32]
 8009634:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 8009636:	7a7b      	ldrb	r3, [r7, #9]
 8009638:	03db      	lsls	r3, r3, #15
 800963a:	b21a      	sxth	r2, r3
 800963c:	7a3b      	ldrb	r3, [r7, #8]
 800963e:	4619      	mov	r1, r3
 8009640:	7a7b      	ldrb	r3, [r7, #9]
 8009642:	1acb      	subs	r3, r1, r3
 8009644:	029b      	lsls	r3, r3, #10
 8009646:	b21b      	sxth	r3, r3
 8009648:	4313      	orrs	r3, r2
 800964a:	b21b      	sxth	r3, r3
 800964c:	817b      	strh	r3, [r7, #10]
  if (bl_nb == 0) {
 800964e:	897b      	ldrh	r3, [r7, #10]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d102      	bne.n	800965a <dcd_edpt0_status_complete+0xe2>
    bl_nb = 1 << 15;
 8009654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009658:	817b      	strh	r3, [r7, #10]
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 800965a:	4909      	ldr	r1, [pc, #36]	; (8009680 <dcd_edpt0_status_complete+0x108>)
 800965c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009662:	0052      	lsls	r2, r2, #1
 8009664:	4413      	add	r3, r2
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	440b      	add	r3, r1
 800966a:	897a      	ldrh	r2, [r7, #10]
 800966c:	809a      	strh	r2, [r3, #4]
}
 800966e:	bf00      	nop
}
 8009670:	bf00      	nop
  }

  edpt0_prepare_setup();
}
 8009672:	bf00      	nop
 8009674:	373c      	adds	r7, #60	; 0x3c
 8009676:	46bd      	mov	sp, r7
 8009678:	bc80      	pop	{r7}
 800967a:	4770      	bx	lr
 800967c:	40005c00 	.word	0x40005c00
 8009680:	40006000 	.word	0x40006000

08009684 <dcd_pma_alloc>:
 * Allocate a section of PMA
 * In case of double buffering, high 16bit is the address of 2nd buffer
 * During failure, TU_ASSERT is used. If this happens, rework/reallocate memory manually.
 */
static uint32_t dcd_pma_alloc(uint16_t len, bool dbuf)
{
 8009684:	b480      	push	{r7}
 8009686:	b08f      	sub	sp, #60	; 0x3c
 8009688:	af00      	add	r7, sp, #0
 800968a:	4603      	mov	r3, r0
 800968c:	460a      	mov	r2, r1
 800968e:	80fb      	strh	r3, [r7, #6]
 8009690:	4613      	mov	r3, r2
 8009692:	717b      	strb	r3, [r7, #5]
 8009694:	88fb      	ldrh	r3, [r7, #6]
 8009696:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009698:	f107 030b 	add.w	r3, r7, #11
 800969c:	627b      	str	r3, [r7, #36]	; 0x24
 800969e:	f107 030a 	add.w	r3, r7, #10
 80096a2:	623b      	str	r3, [r7, #32]
  if (size > 62) {
 80096a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80096a6:	2b3e      	cmp	r3, #62	; 0x3e
 80096a8:	d913      	bls.n	80096d2 <dcd_pma_alloc+0x4e>
    block_in_bytes = 32;
 80096aa:	2320      	movs	r3, #32
 80096ac:	83fb      	strh	r3, [r7, #30]
    *blsize = 1;
 80096ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b0:	2201      	movs	r2, #1
 80096b2:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 80096b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80096b6:	61bb      	str	r3, [r7, #24]
 80096b8:	2320      	movs	r3, #32
 80096ba:	617b      	str	r3, [r7, #20]
 80096bc:	69ba      	ldr	r2, [r7, #24]
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	4413      	add	r3, r2
 80096c2:	1e5a      	subs	r2, r3, #1
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ca:	b2da      	uxtb	r2, r3
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	701a      	strb	r2, [r3, #0]
 80096d0:	e012      	b.n	80096f8 <dcd_pma_alloc+0x74>
    block_in_bytes = 2;
 80096d2:	2302      	movs	r3, #2
 80096d4:	83fb      	strh	r3, [r7, #30]
    *blsize = 0;
 80096d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d8:	2200      	movs	r2, #0
 80096da:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 80096dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80096de:	613b      	str	r3, [r7, #16]
 80096e0:	2302      	movs	r3, #2
 80096e2:	60fb      	str	r3, [r7, #12]
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	4413      	add	r3, r2
 80096ea:	1e5a      	subs	r2, r3, #1
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	6a3b      	ldr	r3, [r7, #32]
 80096f6:	701a      	strb	r2, [r3, #0]
  return (*num_block) * block_in_bytes;
 80096f8:	6a3b      	ldr	r3, [r7, #32]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	8bfa      	ldrh	r2, [r7, #30]
 8009700:	fb02 f303 	mul.w	r3, r2, r3
 8009704:	b29b      	uxth	r3, r3
  uint8_t blsize, num_block;
  uint16_t aligned_len = pma_align_buffer_size(len, &blsize, &num_block);
 8009706:	867b      	strh	r3, [r7, #50]	; 0x32
  (void) blsize;
  (void) num_block;

  uint32_t addr = ep_buf_ptr;
 8009708:	4b18      	ldr	r3, [pc, #96]	; (800976c <dcd_pma_alloc+0xe8>)
 800970a:	881b      	ldrh	r3, [r3, #0]
 800970c:	637b      	str	r3, [r7, #52]	; 0x34
  ep_buf_ptr = (uint16_t)(ep_buf_ptr + aligned_len); // increment buffer pointer
 800970e:	4b17      	ldr	r3, [pc, #92]	; (800976c <dcd_pma_alloc+0xe8>)
 8009710:	881a      	ldrh	r2, [r3, #0]
 8009712:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009714:	4413      	add	r3, r2
 8009716:	b29a      	uxth	r2, r3
 8009718:	4b14      	ldr	r3, [pc, #80]	; (800976c <dcd_pma_alloc+0xe8>)
 800971a:	801a      	strh	r2, [r3, #0]

  if (dbuf) {
 800971c:	797b      	ldrb	r3, [r7, #5]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00c      	beq.n	800973c <dcd_pma_alloc+0xb8>
    addr |= ((uint32_t)ep_buf_ptr) << 16;
 8009722:	4b12      	ldr	r3, [pc, #72]	; (800976c <dcd_pma_alloc+0xe8>)
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	041b      	lsls	r3, r3, #16
 8009728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800972a:	4313      	orrs	r3, r2
 800972c:	637b      	str	r3, [r7, #52]	; 0x34
    ep_buf_ptr = (uint16_t)(ep_buf_ptr + aligned_len); // increment buffer pointer
 800972e:	4b0f      	ldr	r3, [pc, #60]	; (800976c <dcd_pma_alloc+0xe8>)
 8009730:	881a      	ldrh	r2, [r3, #0]
 8009732:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009734:	4413      	add	r3, r2
 8009736:	b29a      	uxth	r2, r3
 8009738:	4b0c      	ldr	r3, [pc, #48]	; (800976c <dcd_pma_alloc+0xe8>)
 800973a:	801a      	strh	r2, [r3, #0]
  }

  // Verify packet buffer is not overflowed
  TU_ASSERT(ep_buf_ptr <= FSDEV_PMA_SIZE, 0xFFFF);
 800973c:	4b0b      	ldr	r3, [pc, #44]	; (800976c <dcd_pma_alloc+0xe8>)
 800973e:	881b      	ldrh	r3, [r3, #0]
 8009740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009744:	d90b      	bls.n	800975e <dcd_pma_alloc+0xda>
 8009746:	4b0a      	ldr	r3, [pc, #40]	; (8009770 <dcd_pma_alloc+0xec>)
 8009748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800974a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	2b00      	cmp	r3, #0
 8009754:	d000      	beq.n	8009758 <dcd_pma_alloc+0xd4>
 8009756:	be00      	bkpt	0x0000
 8009758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800975c:	e000      	b.n	8009760 <dcd_pma_alloc+0xdc>

  return addr;
 800975e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009760:	4618      	mov	r0, r3
 8009762:	373c      	adds	r7, #60	; 0x3c
 8009764:	46bd      	mov	sp, r7
 8009766:	bc80      	pop	{r7}
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	200007ae 	.word	0x200007ae
 8009770:	e000edf0 	.word	0xe000edf0

08009774 <dcd_ep_alloc>:

/***
 * Allocate hardware endpoint
 */
static uint8_t dcd_ep_alloc(uint8_t ep_addr, uint8_t ep_type)
{
 8009774:	b480      	push	{r7}
 8009776:	b087      	sub	sp, #28
 8009778:	af00      	add	r7, sp, #0
 800977a:	4603      	mov	r3, r0
 800977c:	460a      	mov	r2, r1
 800977e:	71fb      	strb	r3, [r7, #7]
 8009780:	4613      	mov	r3, r2
 8009782:	71bb      	strb	r3, [r7, #6]
 8009784:	79fb      	ldrb	r3, [r7, #7]
 8009786:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800978e:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009790:	75bb      	strb	r3, [r7, #22]
 8009792:	79fb      	ldrb	r3, [r7, #7]
 8009794:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009796:	7bfb      	ldrb	r3, [r7, #15]
 8009798:	09db      	lsrs	r3, r3, #7
 800979a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800979c:	757b      	strb	r3, [r7, #21]

  for (uint8_t i = 0; i < FSDEV_EP_COUNT; i++) {
 800979e:	2300      	movs	r3, #0
 80097a0:	75fb      	strb	r3, [r7, #23]
 80097a2:	e070      	b.n	8009886 <dcd_ep_alloc+0x112>
    // Check if already allocated
    if (ep_alloc_status[i].allocated[dir] &&
 80097a4:	7dfa      	ldrb	r2, [r7, #23]
 80097a6:	7d7b      	ldrb	r3, [r7, #21]
 80097a8:	4940      	ldr	r1, [pc, #256]	; (80098ac <dcd_ep_alloc+0x138>)
 80097aa:	0092      	lsls	r2, r2, #2
 80097ac:	440a      	add	r2, r1
 80097ae:	4413      	add	r3, r2
 80097b0:	3302      	adds	r3, #2
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d010      	beq.n	80097da <dcd_ep_alloc+0x66>
        ep_alloc_status[i].ep_type == ep_type &&
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	4a3c      	ldr	r2, [pc, #240]	; (80098ac <dcd_ep_alloc+0x138>)
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	785b      	ldrb	r3, [r3, #1]
    if (ep_alloc_status[i].allocated[dir] &&
 80097c2:	79ba      	ldrb	r2, [r7, #6]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d108      	bne.n	80097da <dcd_ep_alloc+0x66>
        ep_alloc_status[i].ep_num == epnum) {
 80097c8:	7dfb      	ldrb	r3, [r7, #23]
 80097ca:	4a38      	ldr	r2, [pc, #224]	; (80098ac <dcd_ep_alloc+0x138>)
 80097cc:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
        ep_alloc_status[i].ep_type == ep_type &&
 80097d0:	7dba      	ldrb	r2, [r7, #22]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d101      	bne.n	80097da <dcd_ep_alloc+0x66>
      return i;
 80097d6:	7dfb      	ldrb	r3, [r7, #23]
 80097d8:	e062      	b.n	80098a0 <dcd_ep_alloc+0x12c>
    }

    // If EP of current direction is not allocated
    // Except for ISO endpoint, both direction should be free
    if (!ep_alloc_status[i].allocated[dir] &&
 80097da:	7dfa      	ldrb	r2, [r7, #23]
 80097dc:	7d7b      	ldrb	r3, [r7, #21]
 80097de:	4933      	ldr	r1, [pc, #204]	; (80098ac <dcd_ep_alloc+0x138>)
 80097e0:	0092      	lsls	r2, r2, #2
 80097e2:	440a      	add	r2, r1
 80097e4:	4413      	add	r3, r2
 80097e6:	3302      	adds	r3, #2
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	f083 0301 	eor.w	r3, r3, #1
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d045      	beq.n	8009880 <dcd_ep_alloc+0x10c>
 80097f4:	79bb      	ldrb	r3, [r7, #6]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d110      	bne.n	800981c <dcd_ep_alloc+0xa8>
        (ep_type != TUSB_XFER_ISOCHRONOUS || !ep_alloc_status[i].allocated[dir ^ 1])) {
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
 80097fc:	7d7a      	ldrb	r2, [r7, #21]
 80097fe:	f082 0201 	eor.w	r2, r2, #1
 8009802:	b2d2      	uxtb	r2, r2
 8009804:	4611      	mov	r1, r2
 8009806:	4a29      	ldr	r2, [pc, #164]	; (80098ac <dcd_ep_alloc+0x138>)
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	440b      	add	r3, r1
 800980e:	3302      	adds	r3, #2
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	f083 0301 	eor.w	r3, r3, #1
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b00      	cmp	r3, #0
 800981a:	d031      	beq.n	8009880 <dcd_ep_alloc+0x10c>
      // Check if EP number is the same
      if (ep_alloc_status[i].ep_num == 0xFF || ep_alloc_status[i].ep_num == epnum) {
 800981c:	7dfb      	ldrb	r3, [r7, #23]
 800981e:	4a23      	ldr	r2, [pc, #140]	; (80098ac <dcd_ep_alloc+0x138>)
 8009820:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8009824:	2bff      	cmp	r3, #255	; 0xff
 8009826:	d006      	beq.n	8009836 <dcd_ep_alloc+0xc2>
 8009828:	7dfb      	ldrb	r3, [r7, #23]
 800982a:	4a20      	ldr	r2, [pc, #128]	; (80098ac <dcd_ep_alloc+0x138>)
 800982c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8009830:	7dba      	ldrb	r2, [r7, #22]
 8009832:	429a      	cmp	r2, r3
 8009834:	d124      	bne.n	8009880 <dcd_ep_alloc+0x10c>
        // One EP pair has to be the same type
        if (ep_alloc_status[i].ep_type == 0xFF || ep_alloc_status[i].ep_type == ep_type) {
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	4a1c      	ldr	r2, [pc, #112]	; (80098ac <dcd_ep_alloc+0x138>)
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	785b      	ldrb	r3, [r3, #1]
 8009840:	2bff      	cmp	r3, #255	; 0xff
 8009842:	d007      	beq.n	8009854 <dcd_ep_alloc+0xe0>
 8009844:	7dfb      	ldrb	r3, [r7, #23]
 8009846:	4a19      	ldr	r2, [pc, #100]	; (80098ac <dcd_ep_alloc+0x138>)
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4413      	add	r3, r2
 800984c:	785b      	ldrb	r3, [r3, #1]
 800984e:	79ba      	ldrb	r2, [r7, #6]
 8009850:	429a      	cmp	r2, r3
 8009852:	d115      	bne.n	8009880 <dcd_ep_alloc+0x10c>
          ep_alloc_status[i].ep_num = epnum;
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	4915      	ldr	r1, [pc, #84]	; (80098ac <dcd_ep_alloc+0x138>)
 8009858:	7dba      	ldrb	r2, [r7, #22]
 800985a:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
          ep_alloc_status[i].ep_type = ep_type;
 800985e:	7dfb      	ldrb	r3, [r7, #23]
 8009860:	4a12      	ldr	r2, [pc, #72]	; (80098ac <dcd_ep_alloc+0x138>)
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4413      	add	r3, r2
 8009866:	79ba      	ldrb	r2, [r7, #6]
 8009868:	705a      	strb	r2, [r3, #1]
          ep_alloc_status[i].allocated[dir] = true;
 800986a:	7dfa      	ldrb	r2, [r7, #23]
 800986c:	7d7b      	ldrb	r3, [r7, #21]
 800986e:	490f      	ldr	r1, [pc, #60]	; (80098ac <dcd_ep_alloc+0x138>)
 8009870:	0092      	lsls	r2, r2, #2
 8009872:	440a      	add	r2, r1
 8009874:	4413      	add	r3, r2
 8009876:	3302      	adds	r3, #2
 8009878:	2201      	movs	r2, #1
 800987a:	701a      	strb	r2, [r3, #0]

          return i;
 800987c:	7dfb      	ldrb	r3, [r7, #23]
 800987e:	e00f      	b.n	80098a0 <dcd_ep_alloc+0x12c>
  for (uint8_t i = 0; i < FSDEV_EP_COUNT; i++) {
 8009880:	7dfb      	ldrb	r3, [r7, #23]
 8009882:	3301      	adds	r3, #1
 8009884:	75fb      	strb	r3, [r7, #23]
 8009886:	7dfb      	ldrb	r3, [r7, #23]
 8009888:	2b07      	cmp	r3, #7
 800988a:	d98b      	bls.n	80097a4 <dcd_ep_alloc+0x30>
      }
    }
  }

  // Allocation failed
  TU_ASSERT(0);
 800988c:	4b08      	ldr	r3, [pc, #32]	; (80098b0 <dcd_ep_alloc+0x13c>)
 800988e:	613b      	str	r3, [r7, #16]
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0301 	and.w	r3, r3, #1
 8009898:	2b00      	cmp	r3, #0
 800989a:	d000      	beq.n	800989e <dcd_ep_alloc+0x12a>
 800989c:	be00      	bkpt	0x0000
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	371c      	adds	r7, #28
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bc80      	pop	{r7}
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	2000078c 	.word	0x2000078c
 80098b0:	e000edf0 	.word	0xe000edf0

080098b4 <edpt0_open>:

void edpt0_open(uint8_t rhport) {
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b09c      	sub	sp, #112	; 0x70
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	4603      	mov	r3, r0
 80098bc:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dcd_ep_alloc(0x0, TUSB_XFER_CONTROL);
 80098be:	2100      	movs	r1, #0
 80098c0:	2000      	movs	r0, #0
 80098c2:	f7ff ff57 	bl	8009774 <dcd_ep_alloc>
  dcd_ep_alloc(0x80, TUSB_XFER_CONTROL);
 80098c6:	2100      	movs	r1, #0
 80098c8:	2080      	movs	r0, #128	; 0x80
 80098ca:	f7ff ff53 	bl	8009774 <dcd_ep_alloc>

  xfer_status[0][0].max_packet_size = CFG_TUD_ENDPOINT0_SIZE;
 80098ce:	4b7e      	ldr	r3, [pc, #504]	; (8009ac8 <edpt0_open+0x214>)
 80098d0:	2240      	movs	r2, #64	; 0x40
 80098d2:	819a      	strh	r2, [r3, #12]
  xfer_status[0][0].ep_idx = 0;
 80098d4:	4b7c      	ldr	r3, [pc, #496]	; (8009ac8 <edpt0_open+0x214>)
 80098d6:	2200      	movs	r2, #0
 80098d8:	739a      	strb	r2, [r3, #14]

  xfer_status[0][1].max_packet_size = CFG_TUD_ENDPOINT0_SIZE;
 80098da:	4b7b      	ldr	r3, [pc, #492]	; (8009ac8 <edpt0_open+0x214>)
 80098dc:	2240      	movs	r2, #64	; 0x40
 80098de:	839a      	strh	r2, [r3, #28]
  xfer_status[0][1].ep_idx = 0;
 80098e0:	4b79      	ldr	r3, [pc, #484]	; (8009ac8 <edpt0_open+0x214>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	779a      	strb	r2, [r3, #30]

  uint16_t pma_addr0 = dcd_pma_alloc(CFG_TUD_ENDPOINT0_SIZE, false);
 80098e6:	2100      	movs	r1, #0
 80098e8:	2040      	movs	r0, #64	; 0x40
 80098ea:	f7ff fecb 	bl	8009684 <dcd_pma_alloc>
 80098ee:	4603      	mov	r3, r0
 80098f0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t pma_addr1 = dcd_pma_alloc(CFG_TUD_ENDPOINT0_SIZE, false);
 80098f4:	2100      	movs	r1, #0
 80098f6:	2040      	movs	r0, #64	; 0x40
 80098f8:	f7ff fec4 	bl	8009684 <dcd_pma_alloc>
 80098fc:	4603      	mov	r3, r0
 80098fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8009902:	2300      	movs	r3, #0
 8009904:	617b      	str	r3, [r7, #20]
 8009906:	2301      	movs	r3, #1
 8009908:	74fb      	strb	r3, [r7, #19]
 800990a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800990e:	823b      	strh	r3, [r7, #16]
  FSDEV_BTABLE->ep16[ep_id][buf_id].addr = addr;
 8009910:	496e      	ldr	r1, [pc, #440]	; (8009acc <edpt0_open+0x218>)
 8009912:	7cfb      	ldrb	r3, [r7, #19]
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	0052      	lsls	r2, r2, #1
 8009918:	4413      	add	r3, r2
 800991a:	8a3a      	ldrh	r2, [r7, #16]
 800991c:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
}
 8009920:	bf00      	nop
 8009922:	2300      	movs	r3, #0
 8009924:	61fb      	str	r3, [r7, #28]
 8009926:	2300      	movs	r3, #0
 8009928:	76fb      	strb	r3, [r7, #27]
 800992a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800992e:	833b      	strh	r3, [r7, #24]
  FSDEV_BTABLE->ep16[ep_id][buf_id].addr = addr;
 8009930:	4966      	ldr	r1, [pc, #408]	; (8009acc <edpt0_open+0x218>)
 8009932:	7efb      	ldrb	r3, [r7, #27]
 8009934:	69fa      	ldr	r2, [r7, #28]
 8009936:	0052      	lsls	r2, r2, #1
 8009938:	4413      	add	r3, r2
 800993a:	8b3a      	ldrh	r2, [r7, #24]
 800993c:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
}
 8009940:	bf00      	nop
 8009942:	2300      	movs	r3, #0
 8009944:	623b      	str	r3, [r7, #32]
  return FSDEV_REG->ep[ep_id].reg;
 8009946:	4a62      	ldr	r2, [pc, #392]	; (8009ad0 <edpt0_open+0x21c>)
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800994e:	b29b      	uxth	r3, r3

  btable_set_addr(0, BTABLE_BUF_RX, pma_addr0);
  btable_set_addr(0, BTABLE_BUF_TX, pma_addr1);

  uint32_t ep_reg = ep_read(0) & ~USB_EPREG_MASK; // only get toggle bits
 8009950:	f423 430f 	bic.w	r3, r3, #36608	; 0x8f00
 8009954:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
 8009958:	60fb      	str	r3, [r7, #12]
  ep_reg |= USB_EP_CONTROL;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	f107 030c 	add.w	r3, r7, #12
 8009966:	62bb      	str	r3, [r7, #40]	; 0x28
 8009968:	2301      	movs	r3, #1
 800996a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800996e:	2302      	movs	r3, #2
 8009970:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800997c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009980:	2a01      	cmp	r2, #1
 8009982:	d101      	bne.n	8009988 <edpt0_open+0xd4>
 8009984:	2204      	movs	r2, #4
 8009986:	e000      	b.n	800998a <edpt0_open+0xd6>
 8009988:	220c      	movs	r2, #12
 800998a:	fa01 f202 	lsl.w	r2, r1, r2
 800998e:	405a      	eors	r2, r3
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	601a      	str	r2, [r3, #0]
}
 8009994:	bf00      	nop
 8009996:	f107 030c 	add.w	r3, r7, #12
 800999a:	633b      	str	r3, [r7, #48]	; 0x30
 800999c:	2300      	movs	r3, #0
 800999e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80099a2:	2302      	movs	r3, #2
 80099a4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 80099a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80099b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80099b4:	2a01      	cmp	r2, #1
 80099b6:	d101      	bne.n	80099bc <edpt0_open+0x108>
 80099b8:	2204      	movs	r2, #4
 80099ba:	e000      	b.n	80099be <edpt0_open+0x10a>
 80099bc:	220c      	movs	r2, #12
 80099be:	fa01 f202 	lsl.w	r2, r1, r2
 80099c2:	405a      	eors	r2, r3
 80099c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c6:	601a      	str	r2, [r3, #0]
}
 80099c8:	bf00      	nop
 80099ca:	2300      	movs	r3, #0
 80099cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099ce:	2301      	movs	r3, #1
 80099d0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80099d4:	2308      	movs	r3, #8
 80099d6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80099da:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80099de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80099e2:	f107 030b 	add.w	r3, r7, #11
 80099e6:	653b      	str	r3, [r7, #80]	; 0x50
 80099e8:	f107 030a 	add.w	r3, r7, #10
 80099ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (size > 62) {
 80099ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80099f2:	2b3e      	cmp	r3, #62	; 0x3e
 80099f4:	d915      	bls.n	8009a22 <edpt0_open+0x16e>
    block_in_bytes = 32;
 80099f6:	2320      	movs	r3, #32
 80099f8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    *blsize = 1;
 80099fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099fe:	2201      	movs	r2, #1
 8009a00:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 8009a02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009a06:	647b      	str	r3, [r7, #68]	; 0x44
 8009a08:	2320      	movs	r3, #32
 8009a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8009a0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a10:	4413      	add	r3, r2
 8009a12:	1e5a      	subs	r2, r3, #1
 8009a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a1e:	701a      	strb	r2, [r3, #0]
 8009a20:	e014      	b.n	8009a4c <edpt0_open+0x198>
    block_in_bytes = 2;
 8009a22:	2302      	movs	r3, #2
 8009a24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    *blsize = 0;
 8009a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 8009a2e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a34:	2302      	movs	r3, #2
 8009a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3c:	4413      	add	r3, r2
 8009a3e:	1e5a      	subs	r2, r3, #1
 8009a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a4a:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 8009a4c:	7afb      	ldrb	r3, [r7, #11]
 8009a4e:	03db      	lsls	r3, r3, #15
 8009a50:	b21a      	sxth	r2, r3
 8009a52:	7abb      	ldrb	r3, [r7, #10]
 8009a54:	4619      	mov	r1, r3
 8009a56:	7afb      	ldrb	r3, [r7, #11]
 8009a58:	1acb      	subs	r3, r1, r3
 8009a5a:	029b      	lsls	r3, r3, #10
 8009a5c:	b21b      	sxth	r3, r3
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	b21b      	sxth	r3, r3
 8009a62:	86fb      	strh	r3, [r7, #54]	; 0x36
  if (bl_nb == 0) {
 8009a64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d102      	bne.n	8009a70 <edpt0_open+0x1bc>
    bl_nb = 1 << 15;
 8009a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a6e:	86fb      	strh	r3, [r7, #54]	; 0x36
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 8009a70:	4916      	ldr	r1, [pc, #88]	; (8009acc <edpt0_open+0x218>)
 8009a72:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009a76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a78:	0052      	lsls	r2, r2, #1
 8009a7a:	4413      	add	r3, r2
 8009a7c:	00db      	lsls	r3, r3, #3
 8009a7e:	440b      	add	r3, r1
 8009a80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009a82:	809a      	strh	r2, [r3, #4]
}
 8009a84:	bf00      	nop
}
 8009a86:	bf00      	nop
  ep_change_status(&ep_reg, TUSB_DIR_IN, EP_STAT_NAK);
  ep_change_status(&ep_reg, TUSB_DIR_OUT, EP_STAT_NAK);
  // no need to explicitly set DTOG bits since we aren't masked DTOG bit

  edpt0_prepare_setup(); // prepare for setup packet
  ep_write(0, ep_reg, false);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	66ba      	str	r2, [r7, #104]	; 0x68
 8009a8e:	667b      	str	r3, [r7, #100]	; 0x64
 8009a90:	2300      	movs	r3, #0
 8009a92:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  if (need_exclusive) {
 8009a96:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d002      	beq.n	8009aa4 <edpt0_open+0x1f0>
    dcd_int_disable(0);
 8009a9e:	2000      	movs	r0, #0
 8009aa0:	f7fe febe 	bl	8008820 <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 8009aa4:	4a0a      	ldr	r2, [pc, #40]	; (8009ad0 <edpt0_open+0x21c>)
 8009aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aa8:	b299      	uxth	r1, r3
 8009aaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009aac:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 8009ab0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <edpt0_open+0x20a>
    dcd_int_enable(0);
 8009ab8:	2000      	movs	r0, #0
 8009aba:	f7fe fe8f 	bl	80087dc <dcd_int_enable>
}
 8009abe:	bf00      	nop
}
 8009ac0:	bf00      	nop
 8009ac2:	3770      	adds	r7, #112	; 0x70
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	2000068c 	.word	0x2000068c
 8009acc:	40006000 	.word	0x40006000
 8009ad0:	40005c00 	.word	0x40005c00

08009ad4 <dcd_edpt_open>:

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const *desc_ep) {
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b096      	sub	sp, #88	; 0x58
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	4603      	mov	r3, r0
 8009adc:	6039      	str	r1, [r7, #0]
 8009ade:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  uint8_t const ep_addr = desc_ep->bEndpointAddress;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	789b      	ldrb	r3, [r3, #2]
 8009ae4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8009ae8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009aec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009af0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009af8:	b2db      	uxtb	r3, r3
  uint8_t const ep_num = tu_edpt_number(ep_addr);
 8009afa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8009afe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009b06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009b0a:	09db      	lsrs	r3, r3, #7
 8009b0c:	b2db      	uxtb	r3, r3
  tusb_dir_t const dir = tu_edpt_dir(ep_addr);
 8009b0e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8009b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b18:	889b      	ldrh	r3, [r3, #4]
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b20:	b29b      	uxth	r3, r3
  const uint16_t packet_size = tu_edpt_packet_size(desc_ep);
 8009b22:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
  uint8_t const ep_idx = dcd_ep_alloc(ep_addr, desc_ep->bmAttributes.xfer);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	78db      	ldrb	r3, [r3, #3]
 8009b2a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	461a      	mov	r2, r3
 8009b32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b36:	4611      	mov	r1, r2
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7ff fe1b 	bl	8009774 <dcd_ep_alloc>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  TU_ASSERT(ep_idx < FSDEV_EP_COUNT);
 8009b44:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8009b48:	2b07      	cmp	r3, #7
 8009b4a:	d90a      	bls.n	8009b62 <dcd_edpt_open+0x8e>
 8009b4c:	4b71      	ldr	r3, [pc, #452]	; (8009d14 <dcd_edpt_open+0x240>)
 8009b4e:	643b      	str	r3, [r7, #64]	; 0x40
 8009b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d000      	beq.n	8009b5e <dcd_edpt_open+0x8a>
 8009b5c:	be00      	bkpt	0x0000
 8009b5e:	2300      	movs	r3, #0
 8009b60:	e0d3      	b.n	8009d0a <dcd_edpt_open+0x236>

  uint32_t ep_reg = ep_read(ep_idx) & ~USB_EPREG_MASK;
 8009b62:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8009b66:	637b      	str	r3, [r7, #52]	; 0x34
  return FSDEV_REG->ep[ep_id].reg;
 8009b68:	4a6b      	ldr	r2, [pc, #428]	; (8009d18 <dcd_edpt_open+0x244>)
 8009b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	f423 430f 	bic.w	r3, r3, #36608	; 0x8f00
 8009b76:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b80:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009b84:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b8c:	b2db      	uxtb	r3, r3
  ep_reg |= tu_edpt_number(ep_addr) | USB_EP_CTR_TX | USB_EP_CTR_RX;
 8009b8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	60fb      	str	r3, [r7, #12]

  // Set type
  switch (desc_ep->bmAttributes.xfer) {
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	78db      	ldrb	r3, [r3, #3]
 8009ba2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d002      	beq.n	8009bb2 <dcd_edpt_open+0xde>
 8009bac:	2b03      	cmp	r3, #3
 8009bae:	d003      	beq.n	8009bb8 <dcd_edpt_open+0xe4>
 8009bb0:	e007      	b.n	8009bc2 <dcd_edpt_open+0xee>
    case TUSB_XFER_BULK:
      ep_reg |= USB_EP_BULK;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	60fb      	str	r3, [r7, #12]
      break;
 8009bb6:	e00f      	b.n	8009bd8 <dcd_edpt_open+0x104>
    case TUSB_XFER_INTERRUPT:
      ep_reg |= USB_EP_INTERRUPT;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009bbe:	60fb      	str	r3, [r7, #12]
      break;
 8009bc0:	e00a      	b.n	8009bd8 <dcd_edpt_open+0x104>

    default:
      // Note: ISO endpoint should use alloc / active functions
      TU_ASSERT(false);
 8009bc2:	4b54      	ldr	r3, [pc, #336]	; (8009d14 <dcd_edpt_open+0x240>)
 8009bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8009bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0301 	and.w	r3, r3, #1
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d000      	beq.n	8009bd4 <dcd_edpt_open+0x100>
 8009bd2:	be00      	bkpt	0x0000
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	e098      	b.n	8009d0a <dcd_edpt_open+0x236>
  }

  /* Create a packet memory buffer area. */
  uint16_t pma_addr = dcd_pma_alloc(packet_size, false);
 8009bd8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009bdc:	2100      	movs	r1, #0
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7ff fd50 	bl	8009684 <dcd_pma_alloc>
 8009be4:	4603      	mov	r3, r0
 8009be6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  btable_set_addr(ep_idx, dir == TUSB_DIR_IN ? BTABLE_BUF_TX : BTABLE_BUF_RX, pma_addr);
 8009bea:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8009bee:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8009bf2:	2a01      	cmp	r2, #1
 8009bf4:	bf14      	ite	ne
 8009bf6:	2201      	movne	r2, #1
 8009bf8:	2200      	moveq	r2, #0
 8009bfa:	b2d2      	uxtb	r2, r2
 8009bfc:	623b      	str	r3, [r7, #32]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	77fb      	strb	r3, [r7, #31]
 8009c02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c06:	83bb      	strh	r3, [r7, #28]
  FSDEV_BTABLE->ep16[ep_id][buf_id].addr = addr;
 8009c08:	4944      	ldr	r1, [pc, #272]	; (8009d1c <dcd_edpt_open+0x248>)
 8009c0a:	7ffb      	ldrb	r3, [r7, #31]
 8009c0c:	6a3a      	ldr	r2, [r7, #32]
 8009c0e:	0052      	lsls	r2, r2, #1
 8009c10:	4413      	add	r3, r2
 8009c12:	8bba      	ldrh	r2, [r7, #28]
 8009c14:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
}
 8009c18:	bf00      	nop
 8009c1a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8009c1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009c22:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009c26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  return &xfer_status[epnum][dir];
 8009c2a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8009c2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009c32:	0052      	lsls	r2, r2, #1
 8009c34:	4413      	add	r3, r2
 8009c36:	011b      	lsls	r3, r3, #4
 8009c38:	4a39      	ldr	r2, [pc, #228]	; (8009d20 <dcd_edpt_open+0x24c>)
 8009c3a:	4413      	add	r3, r2

  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, dir);
 8009c3c:	64bb      	str	r3, [r7, #72]	; 0x48
  xfer->max_packet_size = packet_size;
 8009c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c40:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8009c44:	819a      	strh	r2, [r3, #12]
  xfer->ep_idx = ep_idx;
 8009c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c48:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8009c4c:	739a      	strb	r2, [r3, #14]
 8009c4e:	f107 030c 	add.w	r3, r7, #12
 8009c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c54:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8009c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8009c6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009c6e:	2a01      	cmp	r2, #1
 8009c70:	d101      	bne.n	8009c76 <dcd_edpt_open+0x1a2>
 8009c72:	2204      	movs	r2, #4
 8009c74:	e000      	b.n	8009c78 <dcd_edpt_open+0x1a4>
 8009c76:	220c      	movs	r2, #12
 8009c78:	fa01 f202 	lsl.w	r2, r1, r2
 8009c7c:	405a      	eors	r2, r3
 8009c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c80:	601a      	str	r2, [r3, #0]
}
 8009c82:	bf00      	nop
 8009c84:	f107 030c 	add.w	r3, r7, #12
 8009c88:	633b      	str	r3, [r7, #48]	; 0x30
 8009c8a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009c92:	2300      	movs	r3, #0
 8009c94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  *reg ^= (state << (USB_EP_DTOG_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8009ca0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009ca4:	2a01      	cmp	r2, #1
 8009ca6:	d101      	bne.n	8009cac <dcd_edpt_open+0x1d8>
 8009ca8:	2206      	movs	r2, #6
 8009caa:	e000      	b.n	8009cae <dcd_edpt_open+0x1da>
 8009cac:	220e      	movs	r2, #14
 8009cae:	fa01 f202 	lsl.w	r2, r1, r2
 8009cb2:	405a      	eors	r2, r3
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	601a      	str	r2, [r3, #0]
}
 8009cb8:	bf00      	nop

  ep_change_status(&ep_reg, dir, EP_STAT_NAK);
  ep_change_dtog(&ep_reg, dir, 0);

  // reserve other direction toggle bits
  if (dir == TUSB_DIR_IN) {
 8009cba:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d104      	bne.n	8009ccc <dcd_edpt_open+0x1f8>
    ep_reg &= ~(USB_EPRX_STAT | USB_EP_DTOG_RX);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	e003      	b.n	8009cd4 <dcd_edpt_open+0x200>
  } else {
    ep_reg &= ~(USB_EPTX_STAT | USB_EP_DTOG_TX);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cd2:	60fb      	str	r3, [r7, #12]
  }

  ep_write(ep_idx, ep_reg, true);
 8009cd4:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	61ba      	str	r2, [r7, #24]
 8009cdc:	617b      	str	r3, [r7, #20]
 8009cde:	2301      	movs	r3, #1
 8009ce0:	74fb      	strb	r3, [r7, #19]
  if (need_exclusive) {
 8009ce2:	7cfb      	ldrb	r3, [r7, #19]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <dcd_edpt_open+0x21a>
    dcd_int_disable(0);
 8009ce8:	2000      	movs	r0, #0
 8009cea:	f7fe fd99 	bl	8008820 <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 8009cee:	4a0a      	ldr	r2, [pc, #40]	; (8009d18 <dcd_edpt_open+0x244>)
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	b299      	uxth	r1, r3
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 8009cfa:	7cfb      	ldrb	r3, [r7, #19]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <dcd_edpt_open+0x232>
    dcd_int_enable(0);
 8009d00:	2000      	movs	r0, #0
 8009d02:	f7fe fd6b 	bl	80087dc <dcd_int_enable>
}
 8009d06:	bf00      	nop

  return true;
 8009d08:	2301      	movs	r3, #1
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3758      	adds	r7, #88	; 0x58
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	e000edf0 	.word	0xe000edf0
 8009d18:	40005c00 	.word	0x40005c00
 8009d1c:	40006000 	.word	0x40006000
 8009d20:	2000068c 	.word	0x2000068c

08009d24 <dcd_edpt_close_all>:

void dcd_edpt_close_all(uint8_t rhport) {
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	71fb      	strb	r3, [r7, #7]
  dcd_int_disable(rhport);
 8009d2e:	79fb      	ldrb	r3, [r7, #7]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fe fd75 	bl	8008820 <dcd_int_disable>

  for (uint32_t i = 1; i < FSDEV_EP_COUNT; i++) {
 8009d36:	2301      	movs	r3, #1
 8009d38:	617b      	str	r3, [r7, #20]
 8009d3a:	e032      	b.n	8009da2 <dcd_edpt_close_all+0x7e>
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	613b      	str	r3, [r7, #16]
 8009d40:	2300      	movs	r3, #0
 8009d42:	60fb      	str	r3, [r7, #12]
 8009d44:	2300      	movs	r3, #0
 8009d46:	72fb      	strb	r3, [r7, #11]
  if (need_exclusive) {
 8009d48:	7afb      	ldrb	r3, [r7, #11]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d002      	beq.n	8009d54 <dcd_edpt_close_all+0x30>
    dcd_int_disable(0);
 8009d4e:	2000      	movs	r0, #0
 8009d50:	f7fe fd66 	bl	8008820 <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 8009d54:	4a1a      	ldr	r2, [pc, #104]	; (8009dc0 <dcd_edpt_close_all+0x9c>)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	b299      	uxth	r1, r3
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 8009d60:	7afb      	ldrb	r3, [r7, #11]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <dcd_edpt_close_all+0x48>
    dcd_int_enable(0);
 8009d66:	2000      	movs	r0, #0
 8009d68:	f7fe fd38 	bl	80087dc <dcd_int_enable>
}
 8009d6c:	bf00      	nop
    // Reset endpoint
    ep_write(i, 0, false);
    // Clear EP allocation status
    ep_alloc_status[i].ep_num = 0xFF;
 8009d6e:	4a15      	ldr	r2, [pc, #84]	; (8009dc4 <dcd_edpt_close_all+0xa0>)
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	21ff      	movs	r1, #255	; 0xff
 8009d74:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    ep_alloc_status[i].ep_type = 0xFF;
 8009d78:	4a12      	ldr	r2, [pc, #72]	; (8009dc4 <dcd_edpt_close_all+0xa0>)
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	22ff      	movs	r2, #255	; 0xff
 8009d82:	705a      	strb	r2, [r3, #1]
    ep_alloc_status[i].allocated[0] = false;
 8009d84:	4a0f      	ldr	r2, [pc, #60]	; (8009dc4 <dcd_edpt_close_all+0xa0>)
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	709a      	strb	r2, [r3, #2]
    ep_alloc_status[i].allocated[1] = false;
 8009d90:	4a0c      	ldr	r2, [pc, #48]	; (8009dc4 <dcd_edpt_close_all+0xa0>)
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	2200      	movs	r2, #0
 8009d9a:	70da      	strb	r2, [r3, #3]
  for (uint32_t i = 1; i < FSDEV_EP_COUNT; i++) {
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	617b      	str	r3, [r7, #20]
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	2b07      	cmp	r3, #7
 8009da6:	d9c9      	bls.n	8009d3c <dcd_edpt_close_all+0x18>
  }

  dcd_int_enable(rhport);
 8009da8:	79fb      	ldrb	r3, [r7, #7]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe fd16 	bl	80087dc <dcd_int_enable>

  // Reset PMA allocation
  ep_buf_ptr = FSDEV_BTABLE_BASE + 8 * CFG_TUD_ENDPPOINT_MAX + 2 * CFG_TUD_ENDPOINT0_SIZE;
 8009db0:	4b05      	ldr	r3, [pc, #20]	; (8009dc8 <dcd_edpt_close_all+0xa4>)
 8009db2:	22c0      	movs	r2, #192	; 0xc0
 8009db4:	801a      	strh	r2, [r3, #0]
}
 8009db6:	bf00      	nop
 8009db8:	3718      	adds	r7, #24
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	40005c00 	.word	0x40005c00
 8009dc4:	2000078c 	.word	0x2000078c
 8009dc8:	200007ae 	.word	0x200007ae

08009dcc <dcd_transmit_packet>:

  return true;
}

// Currently, single-buffered, and only 64 bytes at a time (max)
static void dcd_transmit_packet(xfer_ctl_t *xfer, uint16_t ep_ix) {
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b092      	sub	sp, #72	; 0x48
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	807b      	strh	r3, [r7, #2]
  uint16_t len = tu_min16(xfer->total_len - xfer->queued_len, xfer->max_packet_size);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	891a      	ldrh	r2, [r3, #8]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	895b      	ldrh	r3, [r3, #10]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	899b      	ldrh	r3, [r3, #12]
 8009de8:	86fa      	strh	r2, [r7, #54]	; 0x36
 8009dea:	86bb      	strh	r3, [r7, #52]	; 0x34
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8009dec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009dee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009df0:	4293      	cmp	r3, r2
 8009df2:	bf28      	it	cs
 8009df4:	4613      	movcs	r3, r2
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint32_t ep_reg = ep_read(ep_ix) | USB_EP_CTR_TX | USB_EP_CTR_RX; // reserve CTR
 8009dfc:	887b      	ldrh	r3, [r7, #2]
 8009dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  return FSDEV_REG->ep[ep_id].reg;
 8009e00:	4a61      	ldr	r2, [pc, #388]	; (8009f88 <dcd_transmit_packet+0x1bc>)
 8009e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e04:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e12:	60bb      	str	r3, [r7, #8]

  bool const is_iso = ep_is_iso(ep_reg);
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  return (reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS;
 8009e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e22:	bf0c      	ite	eq
 8009e24:	2301      	moveq	r3, #1
 8009e26:	2300      	movne	r3, #0
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  uint8_t buf_id;
  if (is_iso) {
 8009e2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d007      	beq.n	8009e46 <dcd_transmit_packet+0x7a>
    buf_id = (ep_reg & USB_EP_DTOG_TX) ? 1 : 0;
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	099b      	lsrs	r3, r3, #6
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	f003 0301 	and.w	r3, r3, #1
 8009e40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009e44:	e002      	b.n	8009e4c <dcd_transmit_packet+0x80>
  } else {
    buf_id = BTABLE_BUF_TX;
 8009e46:	2300      	movs	r3, #0
 8009e48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  uint16_t addr_ptr = (uint16_t) btable_get_addr(ep_ix, buf_id);
 8009e4c:	887b      	ldrh	r3, [r7, #2]
 8009e4e:	633b      	str	r3, [r7, #48]	; 0x30
 8009e50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009e54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  return FSDEV_BTABLE->ep16[ep_id][buf_id].addr;
 8009e58:	494c      	ldr	r1, [pc, #304]	; (8009f8c <dcd_transmit_packet+0x1c0>)
 8009e5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e60:	0052      	lsls	r2, r2, #1
 8009e62:	4413      	add	r3, r2
 8009e64:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  if (xfer->ff) {
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d009      	beq.n	8009e8a <dcd_transmit_packet+0xbe>
    dcd_write_packet_memory_ff(xfer->ff, addr_ptr, len);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8009e7e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8009e82:	4618      	mov	r0, r3
 8009e84:	f000 fc8d 	bl	800a7a2 <dcd_write_packet_memory_ff>
 8009e88:	e00b      	b.n	8009ea2 <dcd_transmit_packet+0xd6>
  } else {
    dcd_write_packet_memory(addr_ptr, &(xfer->buffer[xfer->queued_len]), len);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	8952      	ldrh	r2, [r2, #10]
 8009e92:	1899      	adds	r1, r3, r2
 8009e94:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8009e98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 fbd9 	bl	800a654 <dcd_write_packet_memory>
  }
  xfer->queued_len += len;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	895a      	ldrh	r2, [r3, #10]
 8009ea6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009eaa:	4413      	add	r3, r2
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	815a      	strh	r2, [r3, #10]

  btable_set_count(ep_ix, buf_id, len);
 8009eb2:	887b      	ldrh	r3, [r7, #2]
 8009eb4:	623b      	str	r3, [r7, #32]
 8009eb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009eba:	77fb      	strb	r3, [r7, #31]
 8009ebc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009ec0:	83bb      	strh	r3, [r7, #28]
  uint16_t cnt = FSDEV_BTABLE->ep16[ep_id][buf_id].count;
 8009ec2:	4932      	ldr	r1, [pc, #200]	; (8009f8c <dcd_transmit_packet+0x1c0>)
 8009ec4:	7ffb      	ldrb	r3, [r7, #31]
 8009ec6:	6a3a      	ldr	r2, [r7, #32]
 8009ec8:	0052      	lsls	r2, r2, #1
 8009eca:	4413      	add	r3, r2
 8009ecc:	00db      	lsls	r3, r3, #3
 8009ece:	440b      	add	r3, r1
 8009ed0:	889b      	ldrh	r3, [r3, #4]
 8009ed2:	837b      	strh	r3, [r7, #26]
  cnt = (cnt & ~0x3FFU) | (byte_count & 0x3FFU);
 8009ed4:	8b7b      	ldrh	r3, [r7, #26]
 8009ed6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009eda:	f023 0303 	bic.w	r3, r3, #3
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	8bbb      	ldrh	r3, [r7, #28]
 8009ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	837b      	strh	r3, [r7, #26]
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = cnt;
 8009eec:	4927      	ldr	r1, [pc, #156]	; (8009f8c <dcd_transmit_packet+0x1c0>)
 8009eee:	7ffb      	ldrb	r3, [r7, #31]
 8009ef0:	6a3a      	ldr	r2, [r7, #32]
 8009ef2:	0052      	lsls	r2, r2, #1
 8009ef4:	4413      	add	r3, r2
 8009ef6:	00db      	lsls	r3, r3, #3
 8009ef8:	440b      	add	r3, r1
 8009efa:	8b7a      	ldrh	r2, [r7, #26]
 8009efc:	809a      	strh	r2, [r3, #4]
}
 8009efe:	bf00      	nop
 8009f00:	f107 0308 	add.w	r3, r7, #8
 8009f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f06:	2301      	movs	r3, #1
 8009f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8009f1a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009f1e:	2a01      	cmp	r2, #1
 8009f20:	d101      	bne.n	8009f26 <dcd_transmit_packet+0x15a>
 8009f22:	2204      	movs	r2, #4
 8009f24:	e000      	b.n	8009f28 <dcd_transmit_packet+0x15c>
 8009f26:	220c      	movs	r2, #12
 8009f28:	fa01 f202 	lsl.w	r2, r1, r2
 8009f2c:	405a      	eors	r2, r3
 8009f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f30:	601a      	str	r2, [r3, #0]
}
 8009f32:	bf00      	nop
  ep_change_status(&ep_reg, TUSB_DIR_IN, EP_STAT_VALID);

  if (is_iso) {
 8009f34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <dcd_transmit_packet+0x176>
    xfer->iso_in_sending = true;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	73da      	strb	r2, [r3, #15]
  }
  ep_reg &= USB_EPREG_MASK | EP_STAT_MASK(TUSB_DIR_IN); // only change TX Status, reserve other toggle bits
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8009f48:	4013      	ands	r3, r2
 8009f4a:	60bb      	str	r3, [r7, #8]
  ep_write(ep_ix, ep_reg, true);
 8009f4c:	887a      	ldrh	r2, [r7, #2]
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	617a      	str	r2, [r7, #20]
 8009f52:	613b      	str	r3, [r7, #16]
 8009f54:	2301      	movs	r3, #1
 8009f56:	73fb      	strb	r3, [r7, #15]
  if (need_exclusive) {
 8009f58:	7bfb      	ldrb	r3, [r7, #15]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d002      	beq.n	8009f64 <dcd_transmit_packet+0x198>
    dcd_int_disable(0);
 8009f5e:	2000      	movs	r0, #0
 8009f60:	f7fe fc5e 	bl	8008820 <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 8009f64:	4a08      	ldr	r2, [pc, #32]	; (8009f88 <dcd_transmit_packet+0x1bc>)
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	b299      	uxth	r1, r3
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d002      	beq.n	8009f7c <dcd_transmit_packet+0x1b0>
    dcd_int_enable(0);
 8009f76:	2000      	movs	r0, #0
 8009f78:	f7fe fc30 	bl	80087dc <dcd_int_enable>
}
 8009f7c:	bf00      	nop
}
 8009f7e:	bf00      	nop
 8009f80:	3748      	adds	r7, #72	; 0x48
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	40005c00 	.word	0x40005c00
 8009f8c:	40006000 	.word	0x40006000

08009f90 <edpt_xfer>:

static bool edpt_xfer(uint8_t rhport, uint8_t ep_num, tusb_dir_t dir) {
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b0b2      	sub	sp, #200	; 0xc8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	4603      	mov	r3, r0
 8009f98:	71fb      	strb	r3, [r7, #7]
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	71bb      	strb	r3, [r7, #6]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	717b      	strb	r3, [r7, #5]
 8009fa2:	79bb      	ldrb	r3, [r7, #6]
 8009fa4:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8009fa8:	797b      	ldrb	r3, [r7, #5]
 8009faa:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
  return &xfer_status[epnum][dir];
 8009fae:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 8009fb2:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8009fb6:	0052      	lsls	r2, r2, #1
 8009fb8:	4413      	add	r3, r2
 8009fba:	011b      	lsls	r3, r3, #4
 8009fbc:	4aae      	ldr	r2, [pc, #696]	; (800a278 <edpt_xfer+0x2e8>)
 8009fbe:	4413      	add	r3, r2
  (void) rhport;

  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, dir);
 8009fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint8_t const ep_idx = xfer->ep_idx;
 8009fc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fc8:	7b9b      	ldrb	r3, [r3, #14]
 8009fca:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

  if (dir == TUSB_DIR_IN) {
 8009fce:	797b      	ldrb	r3, [r7, #5]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d108      	bne.n	8009fe6 <edpt_xfer+0x56>
    dcd_transmit_packet(xfer, ep_idx);
 8009fd4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	4619      	mov	r1, r3
 8009fdc:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8009fe0:	f7ff fef4 	bl	8009dcc <dcd_transmit_packet>
 8009fe4:	e1b3      	b.n	800a34e <edpt_xfer+0x3be>
  } else {
    uint32_t ep_reg = ep_read(ep_idx) | USB_EP_CTR_TX | USB_EP_CTR_RX; // reserve CTR
 8009fe6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8009fea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return FSDEV_REG->ep[ep_id].reg;
 8009fee:	4aa3      	ldr	r2, [pc, #652]	; (800a27c <edpt_xfer+0x2ec>)
 8009ff0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ff4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a002:	617b      	str	r3, [r7, #20]
    ep_reg &= USB_EPREG_MASK | EP_STAT_MASK(dir);
 800a004:	797b      	ldrb	r3, [r7, #5]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d102      	bne.n	800a010 <edpt_xfer+0x80>
 800a00a:	f648 72bf 	movw	r2, #36799	; 0x8fbf
 800a00e:	e001      	b.n	800a014 <edpt_xfer+0x84>
 800a010:	f64b 728f 	movw	r2, #49039	; 0xbf8f
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	4013      	ands	r3, r2
 800a018:	617b      	str	r3, [r7, #20]

    uint16_t cnt = tu_min16(xfer->total_len, xfer->max_packet_size);
 800a01a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a01e:	891a      	ldrh	r2, [r3, #8]
 800a020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a024:	899b      	ldrh	r3, [r3, #12]
 800a026:	f8a7 20b2 	strh.w	r2, [r7, #178]	; 0xb2
 800a02a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800a02e:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 800a032:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800a036:	4293      	cmp	r3, r2
 800a038:	bf28      	it	cs
 800a03a:	4613      	movcs	r3, r2
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

    if (ep_is_iso(ep_reg)) {
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return (reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS;
 800a048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a04c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a054:	bf0c      	ite	eq
 800a056:	2301      	moveq	r3, #1
 800a058:	2300      	movne	r3, #0
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 80dc 	beq.w	800a21a <edpt_xfer+0x28a>
      btable_set_rx_bufsize(ep_idx, 0, cnt);
 800a062:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800a066:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a06a:	2300      	movs	r3, #0
 800a06c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a070:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800a074:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800a078:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800a07c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800a080:	f107 0311 	add.w	r3, r7, #17
 800a084:	677b      	str	r3, [r7, #116]	; 0x74
 800a086:	f107 0310 	add.w	r3, r7, #16
 800a08a:	673b      	str	r3, [r7, #112]	; 0x70
  if (size > 62) {
 800a08c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a090:	2b3e      	cmp	r3, #62	; 0x3e
 800a092:	d915      	bls.n	800a0c0 <edpt_xfer+0x130>
    block_in_bytes = 32;
 800a094:	2320      	movs	r3, #32
 800a096:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    *blsize = 1;
 800a09a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a09c:	2201      	movs	r2, #1
 800a09e:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 800a0a0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a0a4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0a6:	2320      	movs	r3, #32
 800a0a8:	667b      	str	r3, [r7, #100]	; 0x64
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800a0aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a0ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0ae:	4413      	add	r3, r2
 800a0b0:	1e5a      	subs	r2, r3, #1
 800a0b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0bc:	701a      	strb	r2, [r3, #0]
 800a0be:	e014      	b.n	800a0ea <edpt_xfer+0x15a>
    block_in_bytes = 2;
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    *blsize = 0;
 800a0c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 800a0cc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a0d0:	663b      	str	r3, [r7, #96]	; 0x60
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a0d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0da:	4413      	add	r3, r2
 800a0dc:	1e5a      	subs	r2, r3, #1
 800a0de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0e8:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 800a0ea:	7c7b      	ldrb	r3, [r7, #17]
 800a0ec:	03db      	lsls	r3, r3, #15
 800a0ee:	b21a      	sxth	r2, r3
 800a0f0:	7c3b      	ldrb	r3, [r7, #16]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	7c7b      	ldrb	r3, [r7, #17]
 800a0f6:	1acb      	subs	r3, r1, r3
 800a0f8:	029b      	lsls	r3, r3, #10
 800a0fa:	b21b      	sxth	r3, r3
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	b21b      	sxth	r3, r3
 800a100:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  if (bl_nb == 0) {
 800a104:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d103      	bne.n	800a114 <edpt_xfer+0x184>
    bl_nb = 1 << 15;
 800a10c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a110:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 800a114:	495a      	ldr	r1, [pc, #360]	; (800a280 <edpt_xfer+0x2f0>)
 800a116:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a11a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a11e:	0052      	lsls	r2, r2, #1
 800a120:	4413      	add	r3, r2
 800a122:	00db      	lsls	r3, r3, #3
 800a124:	440b      	add	r3, r1
 800a126:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 800a12a:	809a      	strh	r2, [r3, #4]
}
 800a12c:	bf00      	nop
      btable_set_rx_bufsize(ep_idx, 1, cnt);
 800a12e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800a132:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a136:	2301      	movs	r3, #1
 800a138:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 800a13c:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800a140:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800a144:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800a148:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800a14c:	f107 030f 	add.w	r3, r7, #15
 800a150:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a154:	f107 030e 	add.w	r3, r7, #14
 800a158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (size > 62) {
 800a15c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a160:	2b3e      	cmp	r3, #62	; 0x3e
 800a162:	d91c      	bls.n	800a19e <edpt_xfer+0x20e>
    block_in_bytes = 32;
 800a164:	2320      	movs	r3, #32
 800a166:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    *blsize = 1;
 800a16a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a16e:	2201      	movs	r2, #1
 800a170:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 800a172:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a176:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a17a:	2320      	movs	r3, #32
 800a17c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a180:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a184:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a188:	4413      	add	r3, r2
 800a18a:	1e5a      	subs	r2, r3, #1
 800a18c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a190:	fbb2 f3f3 	udiv	r3, r2, r3
 800a194:	b2da      	uxtb	r2, r3
 800a196:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a19a:	701a      	strb	r2, [r3, #0]
 800a19c:	e01b      	b.n	800a1d6 <edpt_xfer+0x246>
    block_in_bytes = 2;
 800a19e:	2302      	movs	r3, #2
 800a1a0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    *blsize = 0;
 800a1a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 800a1ac:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a1b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a1be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1c2:	4413      	add	r3, r2
 800a1c4:	1e5a      	subs	r2, r3, #1
 800a1c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ce:	b2da      	uxtb	r2, r3
 800a1d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a1d4:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 800a1d6:	7bfb      	ldrb	r3, [r7, #15]
 800a1d8:	03db      	lsls	r3, r3, #15
 800a1da:	b21a      	sxth	r2, r3
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
 800a1e2:	1acb      	subs	r3, r1, r3
 800a1e4:	029b      	lsls	r3, r3, #10
 800a1e6:	b21b      	sxth	r3, r3
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	b21b      	sxth	r3, r3
 800a1ec:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  if (bl_nb == 0) {
 800a1f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d103      	bne.n	800a200 <edpt_xfer+0x270>
    bl_nb = 1 << 15;
 800a1f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1fc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 800a200:	491f      	ldr	r1, [pc, #124]	; (800a280 <edpt_xfer+0x2f0>)
 800a202:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800a206:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a20a:	0052      	lsls	r2, r2, #1
 800a20c:	4413      	add	r3, r2
 800a20e:	00db      	lsls	r3, r3, #3
 800a210:	440b      	add	r3, r1
 800a212:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 800a216:	809a      	strh	r2, [r3, #4]
}
 800a218:	e066      	b.n	800a2e8 <edpt_xfer+0x358>
    } else {
      btable_set_rx_bufsize(ep_idx, BTABLE_BUF_RX, cnt);
 800a21a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800a21e:	657b      	str	r3, [r7, #84]	; 0x54
 800a220:	2301      	movs	r3, #1
 800a222:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800a226:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800a22a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800a22e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a232:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a236:	f107 0313 	add.w	r3, r7, #19
 800a23a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a23c:	f107 0312 	add.w	r3, r7, #18
 800a240:	647b      	str	r3, [r7, #68]	; 0x44
  if (size > 62) {
 800a242:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a246:	2b3e      	cmp	r3, #62	; 0x3e
 800a248:	d91c      	bls.n	800a284 <edpt_xfer+0x2f4>
    block_in_bytes = 32;
 800a24a:	2320      	movs	r3, #32
 800a24c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    *blsize = 1;
 800a250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a252:	2201      	movs	r2, #1
 800a254:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 32);
 800a256:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a25a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a25c:	2320      	movs	r3, #32
 800a25e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a260:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a264:	4413      	add	r3, r2
 800a266:	1e5a      	subs	r2, r3, #1
 800a268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a272:	701a      	strb	r2, [r3, #0]
 800a274:	e01b      	b.n	800a2ae <edpt_xfer+0x31e>
 800a276:	bf00      	nop
 800a278:	2000068c 	.word	0x2000068c
 800a27c:	40005c00 	.word	0x40005c00
 800a280:	40006000 	.word	0x40006000
    block_in_bytes = 2;
 800a284:	2302      	movs	r3, #2
 800a286:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    *blsize = 0;
 800a28a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a28c:	2200      	movs	r2, #0
 800a28e:	701a      	strb	r2, [r3, #0]
    *num_block = tu_div_ceil(size, 2);
 800a290:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a294:	637b      	str	r3, [r7, #52]	; 0x34
 800a296:	2302      	movs	r3, #2
 800a298:	633b      	str	r3, [r7, #48]	; 0x30
 800a29a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29e:	4413      	add	r3, r2
 800a2a0:	1e5a      	subs	r2, r3, #1
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2ac:	701a      	strb	r2, [r3, #0]
  uint16_t bl_nb = (blsize << 15) | ((num_block - blsize) << 10);
 800a2ae:	7cfb      	ldrb	r3, [r7, #19]
 800a2b0:	03db      	lsls	r3, r3, #15
 800a2b2:	b21a      	sxth	r2, r3
 800a2b4:	7cbb      	ldrb	r3, [r7, #18]
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	7cfb      	ldrb	r3, [r7, #19]
 800a2ba:	1acb      	subs	r3, r1, r3
 800a2bc:	029b      	lsls	r3, r3, #10
 800a2be:	b21b      	sxth	r3, r3
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	b21b      	sxth	r3, r3
 800a2c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  if (bl_nb == 0) {
 800a2c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d102      	bne.n	800a2d2 <edpt_xfer+0x342>
    bl_nb = 1 << 15;
 800a2cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  FSDEV_BTABLE->ep16[ep_id][buf_id].count = bl_nb;
 800a2d2:	4921      	ldr	r1, [pc, #132]	; (800a358 <edpt_xfer+0x3c8>)
 800a2d4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a2d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a2da:	0052      	lsls	r2, r2, #1
 800a2dc:	4413      	add	r3, r2
 800a2de:	00db      	lsls	r3, r3, #3
 800a2e0:	440b      	add	r3, r1
 800a2e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a2e4:	809a      	strh	r2, [r3, #4]
}
 800a2e6:	bf00      	nop
 800a2e8:	f107 0314 	add.w	r3, r7, #20
 800a2ec:	61fb      	str	r3, [r7, #28]
 800a2ee:	797b      	ldrb	r3, [r7, #5]
 800a2f0:	76fb      	strb	r3, [r7, #27]
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	76bb      	strb	r3, [r7, #26]
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	7eb9      	ldrb	r1, [r7, #26]
 800a2fc:	7efa      	ldrb	r2, [r7, #27]
 800a2fe:	2a01      	cmp	r2, #1
 800a300:	d101      	bne.n	800a306 <edpt_xfer+0x376>
 800a302:	2204      	movs	r2, #4
 800a304:	e000      	b.n	800a308 <edpt_xfer+0x378>
 800a306:	220c      	movs	r2, #12
 800a308:	fa01 f202 	lsl.w	r2, r1, r2
 800a30c:	405a      	eors	r2, r3
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	601a      	str	r2, [r3, #0]
}
 800a312:	bf00      	nop
    }

    ep_change_status(&ep_reg, dir, EP_STAT_VALID);
    ep_write(ep_idx, ep_reg, true);
 800a314:	f897 20c3 	ldrb.w	r2, [r7, #195]	; 0xc3
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	62ba      	str	r2, [r7, #40]	; 0x28
 800a31c:	627b      	str	r3, [r7, #36]	; 0x24
 800a31e:	2301      	movs	r3, #1
 800a320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (need_exclusive) {
 800a324:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d002      	beq.n	800a332 <edpt_xfer+0x3a2>
    dcd_int_disable(0);
 800a32c:	2000      	movs	r0, #0
 800a32e:	f7fe fa77 	bl	8008820 <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800a332:	4a0a      	ldr	r2, [pc, #40]	; (800a35c <edpt_xfer+0x3cc>)
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	b299      	uxth	r1, r3
 800a338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 800a33e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a342:	2b00      	cmp	r3, #0
 800a344:	d002      	beq.n	800a34c <edpt_xfer+0x3bc>
    dcd_int_enable(0);
 800a346:	2000      	movs	r0, #0
 800a348:	f7fe fa48 	bl	80087dc <dcd_int_enable>
}
 800a34c:	bf00      	nop
  }

  return true;
 800a34e:	2301      	movs	r3, #1
}
 800a350:	4618      	mov	r0, r3
 800a352:	37c8      	adds	r7, #200	; 0xc8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	40006000 	.word	0x40006000
 800a35c:	40005c00 	.word	0x40005c00

0800a360 <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t *buffer, uint16_t total_bytes) {
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	603a      	str	r2, [r7, #0]
 800a368:	461a      	mov	r2, r3
 800a36a:	4603      	mov	r3, r0
 800a36c:	71fb      	strb	r3, [r7, #7]
 800a36e:	460b      	mov	r3, r1
 800a370:	71bb      	strb	r3, [r7, #6]
 800a372:	4613      	mov	r3, r2
 800a374:	80bb      	strh	r3, [r7, #4]
 800a376:	79bb      	ldrb	r3, [r7, #6]
 800a378:	733b      	strb	r3, [r7, #12]
 800a37a:	7b3b      	ldrb	r3, [r7, #12]
 800a37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a380:	b2db      	uxtb	r3, r3
  uint8_t const ep_num = tu_edpt_number(ep_addr);
 800a382:	75fb      	strb	r3, [r7, #23]
 800a384:	79bb      	ldrb	r3, [r7, #6]
 800a386:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a388:	7b7b      	ldrb	r3, [r7, #13]
 800a38a:	09db      	lsrs	r3, r3, #7
 800a38c:	b2db      	uxtb	r3, r3
  tusb_dir_t const dir = tu_edpt_dir(ep_addr);
 800a38e:	75bb      	strb	r3, [r7, #22]
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	73fb      	strb	r3, [r7, #15]
 800a394:	7dbb      	ldrb	r3, [r7, #22]
 800a396:	73bb      	strb	r3, [r7, #14]
  return &xfer_status[epnum][dir];
 800a398:	7bfa      	ldrb	r2, [r7, #15]
 800a39a:	7bbb      	ldrb	r3, [r7, #14]
 800a39c:	0052      	lsls	r2, r2, #1
 800a39e:	4413      	add	r3, r2
 800a3a0:	011b      	lsls	r3, r3, #4
 800a3a2:	4a0d      	ldr	r2, [pc, #52]	; (800a3d8 <dcd_edpt_xfer+0x78>)
 800a3a4:	4413      	add	r3, r2
  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, dir);
 800a3a6:	613b      	str	r3, [r7, #16]

  xfer->buffer = buffer;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	601a      	str	r2, [r3, #0]
  xfer->ff = NULL;
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	88ba      	ldrh	r2, [r7, #4]
 800a3b8:	811a      	strh	r2, [r3, #8]
  xfer->queued_len = 0;
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	815a      	strh	r2, [r3, #10]

  return edpt_xfer(rhport, ep_num, dir);
 800a3c0:	7dba      	ldrb	r2, [r7, #22]
 800a3c2:	7df9      	ldrb	r1, [r7, #23]
 800a3c4:	79fb      	ldrb	r3, [r7, #7]
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7ff fde2 	bl	8009f90 <edpt_xfer>
 800a3cc:	4603      	mov	r3, r0
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3718      	adds	r7, #24
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	2000068c 	.word	0x2000068c

0800a3dc <dcd_edpt_stall>:
  xfer->queued_len = 0;

  return edpt_xfer(rhport, ep_num, dir);
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b08e      	sub	sp, #56	; 0x38
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	460a      	mov	r2, r1
 800a3e6:	71fb      	strb	r3, [r7, #7]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	71bb      	strb	r3, [r7, #6]
 800a3ec:	79bb      	ldrb	r3, [r7, #6]
 800a3ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a3f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a3f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3fa:	b2db      	uxtb	r3, r3
  (void)rhport;
  uint8_t const ep_num = tu_edpt_number(ep_addr);
 800a3fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a400:	79bb      	ldrb	r3, [r7, #6]
 800a402:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a406:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a40a:	09db      	lsrs	r3, r3, #7
 800a40c:	b2db      	uxtb	r3, r3
  tusb_dir_t const dir = tu_edpt_dir(ep_addr);
 800a40e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800a412:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a41a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a41e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  return &xfer_status[epnum][dir];
 800a422:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a426:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a42a:	0052      	lsls	r2, r2, #1
 800a42c:	4413      	add	r3, r2
 800a42e:	011b      	lsls	r3, r3, #4
 800a430:	4a2a      	ldr	r2, [pc, #168]	; (800a4dc <dcd_edpt_stall+0x100>)
 800a432:	4413      	add	r3, r2
  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, dir);
 800a434:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t const ep_idx = xfer->ep_idx;
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a438:	7b9b      	ldrb	r3, [r3, #14]
 800a43a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  uint32_t ep_reg = ep_read(ep_idx) | USB_EP_CTR_TX | USB_EP_CTR_RX; // reserve CTR bits
 800a43e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a442:	62bb      	str	r3, [r7, #40]	; 0x28
  return FSDEV_REG->ep[ep_id].reg;
 800a444:	4a26      	ldr	r2, [pc, #152]	; (800a4e0 <dcd_edpt_stall+0x104>)
 800a446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a448:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a456:	60fb      	str	r3, [r7, #12]
  ep_reg &= USB_EPREG_MASK | EP_STAT_MASK(dir);
 800a458:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d102      	bne.n	800a466 <dcd_edpt_stall+0x8a>
 800a460:	f648 72bf 	movw	r2, #36799	; 0x8fbf
 800a464:	e001      	b.n	800a46a <dcd_edpt_stall+0x8e>
 800a466:	f64b 728f 	movw	r2, #49039	; 0xbf8f
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	4013      	ands	r3, r2
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	f107 030c 	add.w	r3, r7, #12
 800a474:	617b      	str	r3, [r7, #20]
 800a476:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a47a:	74fb      	strb	r3, [r7, #19]
 800a47c:	2301      	movs	r3, #1
 800a47e:	74bb      	strb	r3, [r7, #18]
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	7cb9      	ldrb	r1, [r7, #18]
 800a486:	7cfa      	ldrb	r2, [r7, #19]
 800a488:	2a01      	cmp	r2, #1
 800a48a:	d101      	bne.n	800a490 <dcd_edpt_stall+0xb4>
 800a48c:	2204      	movs	r2, #4
 800a48e:	e000      	b.n	800a492 <dcd_edpt_stall+0xb6>
 800a490:	220c      	movs	r2, #12
 800a492:	fa01 f202 	lsl.w	r2, r1, r2
 800a496:	405a      	eors	r2, r3
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	601a      	str	r2, [r3, #0]
}
 800a49c:	bf00      	nop
  ep_change_status(&ep_reg, dir, EP_STAT_STALL);

  ep_write(ep_idx, ep_reg, true);
 800a49e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	623a      	str	r2, [r7, #32]
 800a4a6:	61fb      	str	r3, [r7, #28]
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	76fb      	strb	r3, [r7, #27]
  if (need_exclusive) {
 800a4ac:	7efb      	ldrb	r3, [r7, #27]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d002      	beq.n	800a4b8 <dcd_edpt_stall+0xdc>
    dcd_int_disable(0);
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	f7fe f9b4 	bl	8008820 <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800a4b8:	4a09      	ldr	r2, [pc, #36]	; (800a4e0 <dcd_edpt_stall+0x104>)
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	b299      	uxth	r1, r3
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 800a4c4:	7efb      	ldrb	r3, [r7, #27]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d002      	beq.n	800a4d0 <dcd_edpt_stall+0xf4>
    dcd_int_enable(0);
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	f7fe f986 	bl	80087dc <dcd_int_enable>
}
 800a4d0:	bf00      	nop
}
 800a4d2:	bf00      	nop
 800a4d4:	3738      	adds	r7, #56	; 0x38
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	2000068c 	.word	0x2000068c
 800a4e0:	40005c00 	.word	0x40005c00

0800a4e4 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b090      	sub	sp, #64	; 0x40
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	460a      	mov	r2, r1
 800a4ee:	71fb      	strb	r3, [r7, #7]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	71bb      	strb	r3, [r7, #6]
 800a4f4:	79bb      	ldrb	r3, [r7, #6]
 800a4f6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800a4fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a4fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a502:	b2db      	uxtb	r3, r3
  (void)rhport;

  uint8_t const ep_num = tu_edpt_number(ep_addr);
 800a504:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a508:	79bb      	ldrb	r3, [r7, #6]
 800a50a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a50e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a512:	09db      	lsrs	r3, r3, #7
 800a514:	b2db      	uxtb	r3, r3
  tusb_dir_t const dir = tu_edpt_dir(ep_addr);
 800a516:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a51a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a51e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a522:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a526:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  return &xfer_status[epnum][dir];
 800a52a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a52e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a532:	0052      	lsls	r2, r2, #1
 800a534:	4413      	add	r3, r2
 800a536:	011b      	lsls	r3, r3, #4
 800a538:	4a44      	ldr	r2, [pc, #272]	; (800a64c <dcd_edpt_clear_stall+0x168>)
 800a53a:	4413      	add	r3, r2
  xfer_ctl_t *xfer = xfer_ctl_ptr(ep_num, dir);
 800a53c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t const ep_idx = xfer->ep_idx;
 800a53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a540:	7b9b      	ldrb	r3, [r3, #14]
 800a542:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  uint32_t ep_reg = ep_read(ep_idx) | USB_EP_CTR_TX | USB_EP_CTR_RX; // reserve CTR bits
 800a546:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a54a:	633b      	str	r3, [r7, #48]	; 0x30
  return FSDEV_REG->ep[ep_id].reg;
 800a54c:	4a40      	ldr	r2, [pc, #256]	; (800a650 <dcd_edpt_clear_stall+0x16c>)
 800a54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a550:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800a554:	b29b      	uxth	r3, r3
 800a556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a55a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a55e:	60bb      	str	r3, [r7, #8]
  ep_reg &= USB_EPREG_MASK | EP_STAT_MASK(dir) | EP_DTOG_MASK(dir);
 800a560:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a564:	2b01      	cmp	r3, #1
 800a566:	d102      	bne.n	800a56e <dcd_edpt_clear_stall+0x8a>
 800a568:	f648 72bf 	movw	r2, #36799	; 0x8fbf
 800a56c:	e001      	b.n	800a572 <dcd_edpt_clear_stall+0x8e>
 800a56e:	f64b 728f 	movw	r2, #49039	; 0xbf8f
 800a572:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a576:	2b01      	cmp	r3, #1
 800a578:	d101      	bne.n	800a57e <dcd_edpt_clear_stall+0x9a>
 800a57a:	2340      	movs	r3, #64	; 0x40
 800a57c:	e001      	b.n	800a582 <dcd_edpt_clear_stall+0x9e>
 800a57e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a582:	431a      	orrs	r2, r3
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	4013      	ands	r3, r2
 800a588:	60bb      	str	r3, [r7, #8]

  if (!ep_is_iso(ep_reg)) {
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	62bb      	str	r3, [r7, #40]	; 0x28
  return (reg & USB_EP_TYPE_MASK) == USB_EP_ISOCHRONOUS;
 800a58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a590:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a598:	bf0c      	ite	eq
 800a59a:	2301      	moveq	r3, #1
 800a59c:	2300      	movne	r3, #0
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	f083 0301 	eor.w	r3, r3, #1
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d01a      	beq.n	800a5e0 <dcd_edpt_clear_stall+0xfc>
 800a5aa:	f107 0308 	add.w	r3, r7, #8
 800a5ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a5b0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a5b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5b8:	2302      	movs	r3, #2
 800a5ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *reg ^= (state << (USB_EPTX_STAT_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800a5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800a5c6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a5ca:	2a01      	cmp	r2, #1
 800a5cc:	d101      	bne.n	800a5d2 <dcd_edpt_clear_stall+0xee>
 800a5ce:	2204      	movs	r2, #4
 800a5d0:	e000      	b.n	800a5d4 <dcd_edpt_clear_stall+0xf0>
 800a5d2:	220c      	movs	r2, #12
 800a5d4:	fa01 f202 	lsl.w	r2, r1, r2
 800a5d8:	405a      	eors	r2, r3
 800a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5dc:	601a      	str	r2, [r3, #0]
}
 800a5de:	bf00      	nop
 800a5e0:	f107 0308 	add.w	r3, r7, #8
 800a5e4:	613b      	str	r3, [r7, #16]
 800a5e6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a5ea:	73fb      	strb	r3, [r7, #15]
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	73bb      	strb	r3, [r7, #14]
  *reg ^= (state << (USB_EP_DTOG_TX_Pos + (dir == TUSB_DIR_IN ? 0 : 8)));
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	7bb9      	ldrb	r1, [r7, #14]
 800a5f6:	7bfa      	ldrb	r2, [r7, #15]
 800a5f8:	2a01      	cmp	r2, #1
 800a5fa:	d101      	bne.n	800a600 <dcd_edpt_clear_stall+0x11c>
 800a5fc:	2206      	movs	r2, #6
 800a5fe:	e000      	b.n	800a602 <dcd_edpt_clear_stall+0x11e>
 800a600:	220e      	movs	r2, #14
 800a602:	fa01 f202 	lsl.w	r2, r1, r2
 800a606:	405a      	eors	r2, r3
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	601a      	str	r2, [r3, #0]
}
 800a60c:	bf00      	nop
    ep_change_status(&ep_reg, dir, EP_STAT_NAK);
  }
  ep_change_dtog(&ep_reg, dir, 0); // Reset to DATA0
  ep_write(ep_idx, ep_reg, true);
 800a60e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	61fa      	str	r2, [r7, #28]
 800a616:	61bb      	str	r3, [r7, #24]
 800a618:	2301      	movs	r3, #1
 800a61a:	75fb      	strb	r3, [r7, #23]
  if (need_exclusive) {
 800a61c:	7dfb      	ldrb	r3, [r7, #23]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d002      	beq.n	800a628 <dcd_edpt_clear_stall+0x144>
    dcd_int_disable(0);
 800a622:	2000      	movs	r0, #0
 800a624:	f7fe f8fc 	bl	8008820 <dcd_int_disable>
  FSDEV_REG->ep[ep_id].reg = (fsdev_bus_t) value;
 800a628:	4a09      	ldr	r2, [pc, #36]	; (800a650 <dcd_edpt_clear_stall+0x16c>)
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	b299      	uxth	r1, r3
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  if (need_exclusive) {
 800a634:	7dfb      	ldrb	r3, [r7, #23]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d002      	beq.n	800a640 <dcd_edpt_clear_stall+0x15c>
    dcd_int_enable(0);
 800a63a:	2000      	movs	r0, #0
 800a63c:	f7fe f8ce 	bl	80087dc <dcd_int_enable>
}
 800a640:	bf00      	nop
}
 800a642:	bf00      	nop
 800a644:	3740      	adds	r7, #64	; 0x40
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	2000068c 	.word	0x2000068c
 800a650:	40005c00 	.word	0x40005c00

0800a654 <dcd_write_packet_memory>:
//--------------------------------------------------------------------+

// Write to packet memory area (PMA) from user memory
// - Packet memory must be either strictly 16-bit or 32-bit depending on FSDEV_BUS_32BIT
// - Uses unaligned for RAM (since M0 cannot access unaligned address)
static bool dcd_write_packet_memory(uint16_t dst, const void *__restrict src, uint16_t nbytes) {
 800a654:	b480      	push	{r7}
 800a656:	b089      	sub	sp, #36	; 0x24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	6039      	str	r1, [r7, #0]
 800a65e:	80fb      	strh	r3, [r7, #6]
 800a660:	4613      	mov	r3, r2
 800a662:	80bb      	strh	r3, [r7, #4]
  if (nbytes == 0) return true;
 800a664:	88bb      	ldrh	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <dcd_write_packet_memory+0x1a>
 800a66a:	2301      	movs	r3, #1
 800a66c:	e044      	b.n	800a6f8 <dcd_write_packet_memory+0xa4>
  uint32_t n_write = nbytes / FSDEV_BUS_SIZE;
 800a66e:	88bb      	ldrh	r3, [r7, #4]
 800a670:	085b      	lsrs	r3, r3, #1
 800a672:	b29b      	uxth	r3, r3
 800a674:	61fb      	str	r3, [r7, #28]

  fsdev_pma_buf_t* pma_buf = PMA_BUF_AT(dst);
 800a676:	88fb      	ldrh	r3, [r7, #6]
 800a678:	005b      	lsls	r3, r3, #1
 800a67a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a67e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a682:	61bb      	str	r3, [r7, #24]
  const uint8_t *src8 = src;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	617b      	str	r3, [r7, #20]

  while (n_write--) {
 800a688:	e00b      	b.n	800a6a2 <dcd_write_packet_memory+0x4e>
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	60bb      	str	r3, [r7, #8]
  return *((uint16_t const *) mem);
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	881a      	ldrh	r2, [r3, #0]
    pma_buf->value = fsdevbus_unaligned_read(src8);
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	801a      	strh	r2, [r3, #0]
    src8 += FSDEV_BUS_SIZE;
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	3302      	adds	r3, #2
 800a69a:	617b      	str	r3, [r7, #20]
    pma_buf++;
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	3304      	adds	r3, #4
 800a6a0:	61bb      	str	r3, [r7, #24]
  while (n_write--) {
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	1e5a      	subs	r2, r3, #1
 800a6a6:	61fa      	str	r2, [r7, #28]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1ee      	bne.n	800a68a <dcd_write_packet_memory+0x36>
  }

  // odd bytes e.g 1 for 16-bit or 1-3 for 32-bit
  uint16_t odd = nbytes & (FSDEV_BUS_SIZE - 1);
 800a6ac:	88bb      	ldrh	r3, [r7, #4]
 800a6ae:	f003 0301 	and.w	r3, r3, #1
 800a6b2:	81fb      	strh	r3, [r7, #14]
  if (odd) {
 800a6b4:	89fb      	ldrh	r3, [r7, #14]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d01d      	beq.n	800a6f6 <dcd_write_packet_memory+0xa2>
    fsdev_bus_t temp = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	827b      	strh	r3, [r7, #18]
    for(uint16_t i = 0; i < odd; i++) {
 800a6be:	2300      	movs	r3, #0
 800a6c0:	823b      	strh	r3, [r7, #16]
 800a6c2:	e011      	b.n	800a6e8 <dcd_write_packet_memory+0x94>
      temp |= *src8++ << (i * 8);
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	1c5a      	adds	r2, r3, #1
 800a6c8:	617a      	str	r2, [r7, #20]
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	8a3b      	ldrh	r3, [r7, #16]
 800a6d0:	00db      	lsls	r3, r3, #3
 800a6d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d6:	b21a      	sxth	r2, r3
 800a6d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	b21b      	sxth	r3, r3
 800a6e0:	827b      	strh	r3, [r7, #18]
    for(uint16_t i = 0; i < odd; i++) {
 800a6e2:	8a3b      	ldrh	r3, [r7, #16]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	823b      	strh	r3, [r7, #16]
 800a6e8:	8a3a      	ldrh	r2, [r7, #16]
 800a6ea:	89fb      	ldrh	r3, [r7, #14]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d3e9      	bcc.n	800a6c4 <dcd_write_packet_memory+0x70>
    }
    pma_buf->value = temp;
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	8a7a      	ldrh	r2, [r7, #18]
 800a6f4:	801a      	strh	r2, [r3, #0]
  }

  return true;
 800a6f6:	2301      	movs	r3, #1
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3724      	adds	r7, #36	; 0x24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bc80      	pop	{r7}
 800a700:	4770      	bx	lr

0800a702 <dcd_read_packet_memory>:

// Read from packet memory area (PMA) to user memory.
// - Packet memory must be either strictly 16-bit or 32-bit depending on FSDEV_BUS_32BIT
// - Uses unaligned for RAM (since M0 cannot access unaligned address)
static bool dcd_read_packet_memory(void *__restrict dst, uint16_t src, uint16_t nbytes) {
 800a702:	b480      	push	{r7}
 800a704:	b089      	sub	sp, #36	; 0x24
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	460b      	mov	r3, r1
 800a70c:	807b      	strh	r3, [r7, #2]
 800a70e:	4613      	mov	r3, r2
 800a710:	803b      	strh	r3, [r7, #0]
  if (nbytes == 0) return true;
 800a712:	883b      	ldrh	r3, [r7, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d101      	bne.n	800a71c <dcd_read_packet_memory+0x1a>
 800a718:	2301      	movs	r3, #1
 800a71a:	e03d      	b.n	800a798 <dcd_read_packet_memory+0x96>
  uint32_t n_read = nbytes / FSDEV_BUS_SIZE;
 800a71c:	883b      	ldrh	r3, [r7, #0]
 800a71e:	085b      	lsrs	r3, r3, #1
 800a720:	b29b      	uxth	r3, r3
 800a722:	61fb      	str	r3, [r7, #28]

  fsdev_pma_buf_t* pma_buf = PMA_BUF_AT(src);
 800a724:	887b      	ldrh	r3, [r7, #2]
 800a726:	005b      	lsls	r3, r3, #1
 800a728:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a72c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800a730:	61bb      	str	r3, [r7, #24]
  uint8_t *dst8 = (uint8_t *)dst;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	617b      	str	r3, [r7, #20]

  while (n_read--) {
 800a736:	e010      	b.n	800a75a <dcd_read_packet_memory+0x58>
    fsdevbus_unaligned_write(dst8, (fsdev_bus_t ) pma_buf->value);
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	881b      	ldrh	r3, [r3, #0]
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	60fb      	str	r3, [r7, #12]
 800a742:	4613      	mov	r3, r2
 800a744:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write16(void *mem, uint16_t value) {
  *((uint16_t *) mem) = value;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	897a      	ldrh	r2, [r7, #10]
 800a74a:	801a      	strh	r2, [r3, #0]
}
 800a74c:	bf00      	nop
    dst8 += FSDEV_BUS_SIZE;
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	3302      	adds	r3, #2
 800a752:	617b      	str	r3, [r7, #20]
    pma_buf++;
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	3304      	adds	r3, #4
 800a758:	61bb      	str	r3, [r7, #24]
  while (n_read--) {
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	1e5a      	subs	r2, r3, #1
 800a75e:	61fa      	str	r2, [r7, #28]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1e9      	bne.n	800a738 <dcd_read_packet_memory+0x36>
  }

  // odd bytes e.g 1 for 16-bit or 1-3 for 32-bit
  uint16_t odd = nbytes & (FSDEV_BUS_SIZE - 1);
 800a764:	883b      	ldrh	r3, [r7, #0]
 800a766:	f003 0301 	and.w	r3, r3, #1
 800a76a:	827b      	strh	r3, [r7, #18]
  if (odd) {
 800a76c:	8a7b      	ldrh	r3, [r7, #18]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d011      	beq.n	800a796 <dcd_read_packet_memory+0x94>
    fsdev_bus_t temp = pma_buf->value;
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	881b      	ldrh	r3, [r3, #0]
 800a776:	823b      	strh	r3, [r7, #16]
    while (odd--) {
 800a778:	e008      	b.n	800a78c <dcd_read_packet_memory+0x8a>
      *dst8++ = (uint8_t) (temp & 0xfful);
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	1c5a      	adds	r2, r3, #1
 800a77e:	617a      	str	r2, [r7, #20]
 800a780:	8a3a      	ldrh	r2, [r7, #16]
 800a782:	b2d2      	uxtb	r2, r2
 800a784:	701a      	strb	r2, [r3, #0]
      temp >>= 8;
 800a786:	8a3b      	ldrh	r3, [r7, #16]
 800a788:	0a1b      	lsrs	r3, r3, #8
 800a78a:	823b      	strh	r3, [r7, #16]
    while (odd--) {
 800a78c:	8a7b      	ldrh	r3, [r7, #18]
 800a78e:	1e5a      	subs	r2, r3, #1
 800a790:	827a      	strh	r2, [r7, #18]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1f1      	bne.n	800a77a <dcd_read_packet_memory+0x78>
    }
  }

  return true;
 800a796:	2301      	movs	r3, #1
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3724      	adds	r7, #36	; 0x24
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bc80      	pop	{r7}
 800a7a0:	4770      	bx	lr

0800a7a2 <dcd_write_packet_memory_ff>:

// Write to PMA from FIFO
static bool dcd_write_packet_memory_ff(tu_fifo_t *ff, uint16_t dst, uint16_t wNBytes) {
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b08e      	sub	sp, #56	; 0x38
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	807b      	strh	r3, [r7, #2]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	803b      	strh	r3, [r7, #0]
  if (wNBytes == 0) return true;
 800a7b2:	883b      	ldrh	r3, [r7, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <dcd_write_packet_memory_ff+0x1a>
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e092      	b.n	800a8e2 <dcd_write_packet_memory_ff+0x140>

  // Since we copy from a ring buffer FIFO, a wrap might occur making it necessary to conduct two copies
  tu_fifo_buffer_info_t info;
  tu_fifo_get_read_info(ff, &info);
 800a7bc:	f107 0310 	add.w	r3, r7, #16
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f7fc f82b 	bl	800681e <tu_fifo_get_read_info>

  uint16_t cnt_lin = tu_min16(wNBytes, info.len_lin);
 800a7c8:	8a3a      	ldrh	r2, [r7, #16]
 800a7ca:	883b      	ldrh	r3, [r7, #0]
 800a7cc:	843b      	strh	r3, [r7, #32]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a7d2:	8c3a      	ldrh	r2, [r7, #32]
 800a7d4:	8bfb      	ldrh	r3, [r7, #30]
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	bf28      	it	cs
 800a7da:	4613      	movcs	r3, r2
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t cnt_wrap = tu_min16(wNBytes - cnt_lin, info.len_wrap);
 800a7e0:	883a      	ldrh	r2, [r7, #0]
 800a7e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	8a7b      	ldrh	r3, [r7, #18]
 800a7ea:	84ba      	strh	r2, [r7, #36]	; 0x24
 800a7ec:	847b      	strh	r3, [r7, #34]	; 0x22
 800a7ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a7f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	bf28      	it	cs
 800a7f6:	4613      	movcs	r3, r2
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const cnt_total = cnt_lin + cnt_wrap;
 800a7fc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a7fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a800:	4413      	add	r3, r2
 800a802:	857b      	strh	r3, [r7, #42]	; 0x2a

  // We want to read from the FIFO and write it into the PMA, if LIN part is ODD and has WRAPPED part,
  // last lin byte will be combined with wrapped part To ensure PMA is always access aligned
  uint16_t lin_even = cnt_lin & ~(FSDEV_BUS_SIZE - 1);
 800a804:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a806:	f023 0301 	bic.w	r3, r3, #1
 800a80a:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t lin_odd = cnt_lin & (FSDEV_BUS_SIZE - 1);
 800a80c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint8_t const *src8 = (uint8_t const*) info.ptr_lin;
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	633b      	str	r3, [r7, #48]	; 0x30

  // write even linear part
  dcd_write_packet_memory(dst, src8, lin_even);
 800a818:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a81a:	887b      	ldrh	r3, [r7, #2]
 800a81c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a81e:	4618      	mov	r0, r3
 800a820:	f7ff ff18 	bl	800a654 <dcd_write_packet_memory>
  dst += lin_even;
 800a824:	887a      	ldrh	r2, [r7, #2]
 800a826:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a828:	4413      	add	r3, r2
 800a82a:	807b      	strh	r3, [r7, #2]
  src8 += lin_even;
 800a82c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a82e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a830:	4413      	add	r3, r2
 800a832:	633b      	str	r3, [r7, #48]	; 0x30

  if (lin_odd == 0) {
 800a834:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a836:	2b00      	cmp	r3, #0
 800a838:	d102      	bne.n	800a840 <dcd_write_packet_memory_ff+0x9e>
    src8 = (uint8_t const*) info.ptr_wrap;
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	633b      	str	r3, [r7, #48]	; 0x30
 800a83e:	e044      	b.n	800a8ca <dcd_write_packet_memory_ff+0x128>
  } else {
    // Combine last linear bytes + first wrapped bytes to form fsdev bus width data
    fsdev_bus_t temp = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	81fb      	strh	r3, [r7, #14]
    uint16_t i;
    for(i = 0; i < lin_odd; i++) {
 800a844:	2300      	movs	r3, #0
 800a846:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a848:	e012      	b.n	800a870 <dcd_write_packet_memory_ff+0xce>
      temp |= *src8++ << (i * 8);
 800a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84c:	1c5a      	adds	r2, r3, #1
 800a84e:	633a      	str	r2, [r7, #48]	; 0x30
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a856:	00db      	lsls	r3, r3, #3
 800a858:	fa02 f303 	lsl.w	r3, r2, r3
 800a85c:	b21a      	sxth	r2, r3
 800a85e:	89fb      	ldrh	r3, [r7, #14]
 800a860:	b21b      	sxth	r3, r3
 800a862:	4313      	orrs	r3, r2
 800a864:	b21b      	sxth	r3, r3
 800a866:	b29b      	uxth	r3, r3
 800a868:	81fb      	strh	r3, [r7, #14]
    for(i = 0; i < lin_odd; i++) {
 800a86a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a86c:	3301      	adds	r3, #1
 800a86e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a870:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a872:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a874:	429a      	cmp	r2, r3
 800a876:	d3e8      	bcc.n	800a84a <dcd_write_packet_memory_ff+0xa8>
    }

    src8 = (uint8_t const*) info.ptr_wrap;
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	633b      	str	r3, [r7, #48]	; 0x30
    for(; i < FSDEV_BUS_SIZE && cnt_wrap > 0; i++, cnt_wrap--) {
 800a87c:	e015      	b.n	800a8aa <dcd_write_packet_memory_ff+0x108>
      temp |= *src8++ << (i * 8);
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	1c5a      	adds	r2, r3, #1
 800a882:	633a      	str	r2, [r7, #48]	; 0x30
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	461a      	mov	r2, r3
 800a888:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a88a:	00db      	lsls	r3, r3, #3
 800a88c:	fa02 f303 	lsl.w	r3, r2, r3
 800a890:	b21a      	sxth	r2, r3
 800a892:	89fb      	ldrh	r3, [r7, #14]
 800a894:	b21b      	sxth	r3, r3
 800a896:	4313      	orrs	r3, r2
 800a898:	b21b      	sxth	r3, r3
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	81fb      	strh	r3, [r7, #14]
    for(; i < FSDEV_BUS_SIZE && cnt_wrap > 0; i++, cnt_wrap--) {
 800a89e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a8a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a8aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d802      	bhi.n	800a8b6 <dcd_write_packet_memory_ff+0x114>
 800a8b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1e3      	bne.n	800a87e <dcd_write_packet_memory_ff+0xdc>
    }

    dcd_write_packet_memory(dst, &temp, FSDEV_BUS_SIZE);
 800a8b6:	f107 010e 	add.w	r1, r7, #14
 800a8ba:	887b      	ldrh	r3, [r7, #2]
 800a8bc:	2202      	movs	r2, #2
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7ff fec8 	bl	800a654 <dcd_write_packet_memory>
    dst += FSDEV_BUS_SIZE;
 800a8c4:	887b      	ldrh	r3, [r7, #2]
 800a8c6:	3302      	adds	r3, #2
 800a8c8:	807b      	strh	r3, [r7, #2]
  }

  // write the rest of the wrapped part
  dcd_write_packet_memory(dst, src8, cnt_wrap);
 800a8ca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a8cc:	887b      	ldrh	r3, [r7, #2]
 800a8ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7ff febf 	bl	800a654 <dcd_write_packet_memory>

  tu_fifo_advance_read_pointer(ff, cnt_total);
 800a8d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f7fb ff88 	bl	80067f0 <tu_fifo_advance_read_pointer>
  return true;
 800a8e0:	2301      	movs	r3, #1
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3738      	adds	r7, #56	; 0x38
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <dcd_read_packet_memory_ff>:

// Read from PMA to FIFO
static bool dcd_read_packet_memory_ff(tu_fifo_t *ff, uint16_t src, uint16_t wNBytes) {
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b08e      	sub	sp, #56	; 0x38
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	807b      	strh	r3, [r7, #2]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	803b      	strh	r3, [r7, #0]
  if (wNBytes == 0) return true;
 800a8fa:	883b      	ldrh	r3, [r7, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <dcd_read_packet_memory_ff+0x1a>
 800a900:	2301      	movs	r3, #1
 800a902:	e084      	b.n	800aa0e <dcd_read_packet_memory_ff+0x124>

  // Since we copy into a ring buffer FIFO, a wrap might occur making it necessary to conduct two copies
  // Check for first linear part
  tu_fifo_buffer_info_t info;
  tu_fifo_get_write_info(ff, &info); // We want to read from the FIFO
 800a904:	f107 0310 	add.w	r3, r7, #16
 800a908:	4619      	mov	r1, r3
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7fc f827 	bl	800695e <tu_fifo_get_write_info>

  uint16_t cnt_lin = tu_min16(wNBytes, info.len_lin);
 800a910:	8a3a      	ldrh	r2, [r7, #16]
 800a912:	883b      	ldrh	r3, [r7, #0]
 800a914:	843b      	strh	r3, [r7, #32]
 800a916:	4613      	mov	r3, r2
 800a918:	83fb      	strh	r3, [r7, #30]
 800a91a:	8c3a      	ldrh	r2, [r7, #32]
 800a91c:	8bfb      	ldrh	r3, [r7, #30]
 800a91e:	4293      	cmp	r3, r2
 800a920:	bf28      	it	cs
 800a922:	4613      	movcs	r3, r2
 800a924:	b29b      	uxth	r3, r3
 800a926:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t cnt_wrap = tu_min16(wNBytes - cnt_lin, info.len_wrap);
 800a928:	883a      	ldrh	r2, [r7, #0]
 800a92a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	b29a      	uxth	r2, r3
 800a930:	8a7b      	ldrh	r3, [r7, #18]
 800a932:	84ba      	strh	r2, [r7, #36]	; 0x24
 800a934:	847b      	strh	r3, [r7, #34]	; 0x22
 800a936:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a938:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a93a:	4293      	cmp	r3, r2
 800a93c:	bf28      	it	cs
 800a93e:	4613      	movcs	r3, r2
 800a940:	b29b      	uxth	r3, r3
 800a942:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t cnt_total = cnt_lin + cnt_wrap;
 800a944:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a946:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a948:	4413      	add	r3, r2
 800a94a:	857b      	strh	r3, [r7, #42]	; 0x2a

  // We want to read from the FIFO and write it into the PMA, if LIN part is ODD and has WRAPPED part,
  // last lin byte will be combined with wrapped part To ensure PMA is always access aligned

  uint16_t lin_even = cnt_lin & ~(FSDEV_BUS_SIZE - 1);
 800a94c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a94e:	f023 0301 	bic.w	r3, r3, #1
 800a952:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t lin_odd = cnt_lin & (FSDEV_BUS_SIZE - 1);
 800a954:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a956:	f003 0301 	and.w	r3, r3, #1
 800a95a:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint8_t *dst8 = (uint8_t *) info.ptr_lin;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	633b      	str	r3, [r7, #48]	; 0x30

  // read even linear part
  dcd_read_packet_memory(dst8, src, lin_even);
 800a960:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a962:	887b      	ldrh	r3, [r7, #2]
 800a964:	4619      	mov	r1, r3
 800a966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a968:	f7ff fecb 	bl	800a702 <dcd_read_packet_memory>
  dst8 += lin_even;
 800a96c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a96e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a970:	4413      	add	r3, r2
 800a972:	633b      	str	r3, [r7, #48]	; 0x30
  src += lin_even;
 800a974:	887a      	ldrh	r2, [r7, #2]
 800a976:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a978:	4413      	add	r3, r2
 800a97a:	807b      	strh	r3, [r7, #2]

  if (lin_odd == 0) {
 800a97c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d102      	bne.n	800a988 <dcd_read_packet_memory_ff+0x9e>
    dst8 = (uint8_t *) info.ptr_wrap;
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	633b      	str	r3, [r7, #48]	; 0x30
 800a986:	e036      	b.n	800a9f6 <dcd_read_packet_memory_ff+0x10c>
  } else {
    // Combine last linear bytes + first wrapped bytes to form fsdev bus width data
    fsdev_bus_t temp;
    dcd_read_packet_memory(&temp, src, FSDEV_BUS_SIZE);
 800a988:	8879      	ldrh	r1, [r7, #2]
 800a98a:	f107 030e 	add.w	r3, r7, #14
 800a98e:	2202      	movs	r2, #2
 800a990:	4618      	mov	r0, r3
 800a992:	f7ff feb6 	bl	800a702 <dcd_read_packet_memory>
    src += FSDEV_BUS_SIZE;
 800a996:	887b      	ldrh	r3, [r7, #2]
 800a998:	3302      	adds	r3, #2
 800a99a:	807b      	strh	r3, [r7, #2]

    uint16_t i;
    for (i = 0; i < lin_odd; i++) {
 800a99c:	2300      	movs	r3, #0
 800a99e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a9a0:	e00c      	b.n	800a9bc <dcd_read_packet_memory_ff+0xd2>
      *dst8++ = (uint8_t) (temp & 0xfful);
 800a9a2:	89f9      	ldrh	r1, [r7, #14]
 800a9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a6:	1c5a      	adds	r2, r3, #1
 800a9a8:	633a      	str	r2, [r7, #48]	; 0x30
 800a9aa:	b2ca      	uxtb	r2, r1
 800a9ac:	701a      	strb	r2, [r3, #0]
      temp >>= 8;
 800a9ae:	89fb      	ldrh	r3, [r7, #14]
 800a9b0:	0a1b      	lsrs	r3, r3, #8
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < lin_odd; i++) {
 800a9b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a9bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a9be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d3ee      	bcc.n	800a9a2 <dcd_read_packet_memory_ff+0xb8>
    }

    dst8 = (uint8_t *) info.ptr_wrap;
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	633b      	str	r3, [r7, #48]	; 0x30
    for (; i < FSDEV_BUS_SIZE && cnt_wrap > 0; i++, cnt_wrap--) {
 800a9c8:	e00f      	b.n	800a9ea <dcd_read_packet_memory_ff+0x100>
      *dst8++ = (uint8_t) (temp & 0xfful);
 800a9ca:	89f9      	ldrh	r1, [r7, #14]
 800a9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ce:	1c5a      	adds	r2, r3, #1
 800a9d0:	633a      	str	r2, [r7, #48]	; 0x30
 800a9d2:	b2ca      	uxtb	r2, r1
 800a9d4:	701a      	strb	r2, [r3, #0]
      temp >>= 8;
 800a9d6:	89fb      	ldrh	r3, [r7, #14]
 800a9d8:	0a1b      	lsrs	r3, r3, #8
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	81fb      	strh	r3, [r7, #14]
    for (; i < FSDEV_BUS_SIZE && cnt_wrap > 0; i++, cnt_wrap--) {
 800a9de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a9e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a9ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d802      	bhi.n	800a9f6 <dcd_read_packet_memory_ff+0x10c>
 800a9f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1e9      	bne.n	800a9ca <dcd_read_packet_memory_ff+0xe0>
    }
  }

  // read the rest of the wrapped part
  dcd_read_packet_memory(dst8, src, cnt_wrap);
 800a9f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a9f8:	887b      	ldrh	r3, [r7, #2]
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9fe:	f7ff fe80 	bl	800a702 <dcd_read_packet_memory>

  tu_fifo_advance_write_pointer(ff, cnt_total);
 800aa02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aa04:	4619      	mov	r1, r3
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7fb fedb 	bl	80067c2 <tu_fifo_advance_write_pointer>
  return true;
 800aa0c:	2301      	movs	r3, #1
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3738      	adds	r7, #56	; 0x38
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
	...

0800aa18 <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b086      	sub	sp, #24
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	4603      	mov	r3, r0
 800aa20:	6039      	str	r1, [r7, #0]
 800aa22:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d11f      	bne.n	800aa6a <tusb_rhport_init+0x52>
    #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
    // init device stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t dev_init = {
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	723b      	strb	r3, [r7, #8]
 800aa2e:	2300      	movs	r3, #0
 800aa30:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT ( tud_rhport_init(TUD_OPT_RHPORT, &dev_init) );
 800aa32:	f107 0308 	add.w	r3, r7, #8
 800aa36:	4619      	mov	r1, r3
 800aa38:	2000      	movs	r0, #0
 800aa3a:	f7fc f8b9 	bl	8006bb0 <tud_rhport_init>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	f083 0301 	eor.w	r3, r3, #1
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00a      	beq.n	800aa60 <tusb_rhport_init+0x48>
 800aa4a:	4b23      	ldr	r3, [pc, #140]	; (800aad8 <tusb_rhport_init+0xc0>)
 800aa4c:	60fb      	str	r3, [r7, #12]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d000      	beq.n	800aa5c <tusb_rhport_init+0x44>
 800aa5a:	be00      	bkpt	0x0000
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	e036      	b.n	800aace <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
 800aa60:	4b1e      	ldr	r3, [pc, #120]	; (800aadc <tusb_rhport_init+0xc4>)
 800aa62:	2201      	movs	r2, #1
 800aa64:	701a      	strb	r2, [r3, #0]
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
    #endif

    return true;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e031      	b.n	800aace <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 800aa6a:	79fb      	ldrb	r3, [r7, #7]
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d803      	bhi.n	800aa78 <tusb_rhport_init+0x60>
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10a      	bne.n	800aa8e <tusb_rhport_init+0x76>
 800aa78:	4b17      	ldr	r3, [pc, #92]	; (800aad8 <tusb_rhport_init+0xc0>)
 800aa7a:	613b      	str	r3, [r7, #16]
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d000      	beq.n	800aa8a <tusb_rhport_init+0x72>
 800aa88:	be00      	bkpt	0x0000
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e01f      	b.n	800aace <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	683a      	ldr	r2, [r7, #0]
 800aa92:	7811      	ldrb	r1, [r2, #0]
 800aa94:	4a11      	ldr	r2, [pc, #68]	; (800aadc <tusb_rhport_init+0xc4>)
 800aa96:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d115      	bne.n	800aacc <tusb_rhport_init+0xb4>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 800aaa0:	79fb      	ldrb	r3, [r7, #7]
 800aaa2:	6839      	ldr	r1, [r7, #0]
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fc f883 	bl	8006bb0 <tud_rhport_init>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	f083 0301 	eor.w	r3, r3, #1
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00a      	beq.n	800aacc <tusb_rhport_init+0xb4>
 800aab6:	4b08      	ldr	r3, [pc, #32]	; (800aad8 <tusb_rhport_init+0xc0>)
 800aab8:	617b      	str	r3, [r7, #20]
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d000      	beq.n	800aac8 <tusb_rhport_init+0xb0>
 800aac6:	be00      	bkpt	0x0000
 800aac8:	2300      	movs	r3, #0
 800aaca:	e000      	b.n	800aace <tusb_rhport_init+0xb6>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800aacc:	2301      	movs	r3, #1
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	e000edf0 	.word	0xe000edf0
 800aadc:	200007b0 	.word	0x200007b0

0800aae0 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d106      	bne.n	800ab06 <tu_edpt_claim+0x26>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <tu_edpt_claim+0x2a>
 800ab06:	2300      	movs	r3, #0
 800ab08:	e01e      	b.n	800ab48 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d108      	bne.n	800ab2a <tu_edpt_claim+0x4a>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <tu_edpt_claim+0x4a>
 800ab26:	2301      	movs	r3, #1
 800ab28:	e000      	b.n	800ab2c <tu_edpt_claim+0x4c>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	73fb      	strb	r3, [r7, #15]
 800ab2e:	7bfb      	ldrb	r3, [r7, #15]
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d004      	beq.n	800ab46 <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	7813      	ldrb	r3, [r2, #0]
 800ab40:	f043 0304 	orr.w	r3, r3, #4
 800ab44:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bc80      	pop	{r7}
 800ab50:	4770      	bx	lr
	...

0800ab54 <tu_edpt_validate>:

  (void) osal_mutex_unlock(mutex);
  return ret;
}

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800ab54:	b480      	push	{r7}
 800ab56:	b08b      	sub	sp, #44	; 0x2c
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	70fb      	strb	r3, [r7, #3]
 800ab60:	4613      	mov	r3, r2
 800ab62:	70bb      	strb	r3, [r7, #2]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	889b      	ldrh	r3, [r3, #4]
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab72:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800ab74:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	78db      	ldrb	r3, [r3, #3]
 800ab7a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d059      	beq.n	800ac38 <tu_edpt_validate+0xe4>
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	dc6e      	bgt.n	800ac66 <tu_edpt_validate+0x112>
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d002      	beq.n	800ab92 <tu_edpt_validate+0x3e>
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d018      	beq.n	800abc2 <tu_edpt_validate+0x6e>
 800ab90:	e069      	b.n	800ac66 <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800ab92:	78fb      	ldrb	r3, [r7, #3]
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d102      	bne.n	800ab9e <tu_edpt_validate+0x4a>
 800ab98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab9c:	e001      	b.n	800aba2 <tu_edpt_validate+0x4e>
 800ab9e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800aba2:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800aba4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aba6:	8a7b      	ldrh	r3, [r7, #18]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d95e      	bls.n	800ac6a <tu_edpt_validate+0x116>
 800abac:	4b34      	ldr	r3, [pc, #208]	; (800ac80 <tu_edpt_validate+0x12c>)
 800abae:	60fb      	str	r3, [r7, #12]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d000      	beq.n	800abbe <tu_edpt_validate+0x6a>
 800abbc:	be00      	bkpt	0x0000
 800abbe:	2300      	movs	r3, #0
 800abc0:	e059      	b.n	800ac76 <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800abc2:	78fb      	ldrb	r3, [r7, #3]
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d10e      	bne.n	800abe6 <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800abc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800abca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abce:	d04e      	beq.n	800ac6e <tu_edpt_validate+0x11a>
 800abd0:	4b2b      	ldr	r3, [pc, #172]	; (800ac80 <tu_edpt_validate+0x12c>)
 800abd2:	617b      	str	r3, [r7, #20]
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 0301 	and.w	r3, r3, #1
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d000      	beq.n	800abe2 <tu_edpt_validate+0x8e>
 800abe0:	be00      	bkpt	0x0000
 800abe2:	2300      	movs	r3, #0
 800abe4:	e047      	b.n	800ac76 <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 800abe6:	78bb      	ldrb	r3, [r7, #2]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00e      	beq.n	800ac0a <tu_edpt_validate+0xb6>
 800abec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800abee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abf2:	d10a      	bne.n	800ac0a <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac00:	711a      	strb	r2, [r3, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 800ac06:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 800ac08:	e031      	b.n	800ac6e <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 800ac0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac0c:	2b08      	cmp	r3, #8
 800ac0e:	d02e      	beq.n	800ac6e <tu_edpt_validate+0x11a>
 800ac10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac12:	2b10      	cmp	r3, #16
 800ac14:	d02b      	beq.n	800ac6e <tu_edpt_validate+0x11a>
 800ac16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac18:	2b20      	cmp	r3, #32
 800ac1a:	d028      	beq.n	800ac6e <tu_edpt_validate+0x11a>
 800ac1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac1e:	2b40      	cmp	r3, #64	; 0x40
 800ac20:	d025      	beq.n	800ac6e <tu_edpt_validate+0x11a>
 800ac22:	4b17      	ldr	r3, [pc, #92]	; (800ac80 <tu_edpt_validate+0x12c>)
 800ac24:	61bb      	str	r3, [r7, #24]
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 0301 	and.w	r3, r3, #1
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d000      	beq.n	800ac34 <tu_edpt_validate+0xe0>
 800ac32:	be00      	bkpt	0x0000
 800ac34:	2300      	movs	r3, #0
 800ac36:	e01e      	b.n	800ac76 <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d102      	bne.n	800ac44 <tu_edpt_validate+0xf0>
 800ac3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac42:	e000      	b.n	800ac46 <tu_edpt_validate+0xf2>
 800ac44:	2340      	movs	r3, #64	; 0x40
 800ac46:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800ac48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ac4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d910      	bls.n	800ac72 <tu_edpt_validate+0x11e>
 800ac50:	4b0b      	ldr	r3, [pc, #44]	; (800ac80 <tu_edpt_validate+0x12c>)
 800ac52:	623b      	str	r3, [r7, #32]
 800ac54:	6a3b      	ldr	r3, [r7, #32]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 0301 	and.w	r3, r3, #1
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d000      	beq.n	800ac62 <tu_edpt_validate+0x10e>
 800ac60:	be00      	bkpt	0x0000
 800ac62:	2300      	movs	r3, #0
 800ac64:	e007      	b.n	800ac76 <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800ac66:	2300      	movs	r3, #0
 800ac68:	e005      	b.n	800ac76 <tu_edpt_validate+0x122>
      break;
 800ac6a:	bf00      	nop
 800ac6c:	e002      	b.n	800ac74 <tu_edpt_validate+0x120>
      break;
 800ac6e:	bf00      	nop
 800ac70:	e000      	b.n	800ac74 <tu_edpt_validate+0x120>
      break;
 800ac72:	bf00      	nop
  }

  return true;
 800ac74:	2301      	movs	r3, #1
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	372c      	adds	r7, #44	; 0x2c
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bc80      	pop	{r7}
 800ac7e:	4770      	bx	lr
 800ac80:	e000edf0 	.word	0xe000edf0

0800ac84 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800ac84:	b480      	push	{r7}
 800ac86:	b08d      	sub	sp, #52	; 0x34
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	4611      	mov	r1, r2
 800ac90:	461a      	mov	r2, r3
 800ac92:	460b      	mov	r3, r1
 800ac94:	80fb      	strh	r3, [r7, #6]
 800ac96:	4613      	mov	r3, r2
 800ac98:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800ac9e:	88fb      	ldrh	r3, [r7, #6]
 800aca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aca2:	4413      	add	r3, r2
 800aca4:	62bb      	str	r3, [r7, #40]	; 0x28

  while (p_desc < desc_end) {
 800aca6:	e027      	b.n	800acf8 <tu_edpt_bind_driver+0x74>
 800aca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acaa:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800acac:	6a3b      	ldr	r3, [r7, #32]
 800acae:	3301      	adds	r3, #1
 800acb0:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800acb2:	2b05      	cmp	r3, #5
 800acb4:	d116      	bne.n	800ace4 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800acb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb8:	789b      	ldrb	r3, [r3, #2]
 800acba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800acbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acc2:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800acc4:	7fbb      	ldrb	r3, [r7, #30]
 800acc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acca:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	4413      	add	r3, r2
 800acd2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800acd6:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800acd8:	7ffa      	ldrb	r2, [r7, #31]
 800acda:	09d2      	lsrs	r2, r2, #7
 800acdc:	b2d2      	uxtb	r2, r2
 800acde:	4611      	mov	r1, r2
 800ace0:	797a      	ldrb	r2, [r7, #5]
 800ace2:	545a      	strb	r2, [r3, r1]
 800ace4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace6:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	461a      	mov	r2, r3
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800acf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (p_desc < desc_end) {
 800acf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d3d3      	bcc.n	800aca8 <tu_edpt_bind_driver+0x24>
  }
}
 800ad00:	bf00      	nop
 800ad02:	bf00      	nop
 800ad04:	3734      	adds	r7, #52	; 0x34
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bc80      	pop	{r7}
 800ad0a:	4770      	bx	lr

0800ad0c <adc_corrector_init>:
static int32_t adc_corrector_scale (const adc_corrector_t *hand, int32_t input,
                                    bool up_limit);

int
adc_corrector_init (adc_corrector_t *hand)
{
 800ad0c:	b590      	push	{r4, r7, lr}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
    hand->center_value = (hand->range_max - hand->range_min);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	899a      	ldrh	r2, [r3, #12]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	89db      	ldrh	r3, [r3, #14]
 800ad1c:	1ad3      	subs	r3, r2, r3
 800ad1e:	b29a      	uxth	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	821a      	strh	r2, [r3, #16]
    hand->center_value >>= ONE;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	8a1b      	ldrh	r3, [r3, #16]
 800ad28:	085b      	lsrs	r3, r3, #1
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	821a      	strh	r2, [r3, #16]
    hand->upper_scale_factor
        = (1.0F * (hand->range_max - hand->center_value))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	899b      	ldrh	r3, [r3, #12]
 800ad34:	461a      	mov	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	8a1b      	ldrh	r3, [r3, #16]
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7f5 fac7 	bl	80002d0 <__aeabi_i2f>
 800ad42:	4604      	mov	r4, r0
          / ((hand->actual_max - hand->deadzone)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	891b      	ldrh	r3, [r3, #8]
 800ad48:	461a      	mov	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	885b      	ldrh	r3, [r3, #2]
 800ad4e:	1ad2      	subs	r2, r2, r3
             - (hand->actual_center + hand->center_deadzone));
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	88db      	ldrh	r3, [r3, #6]
 800ad54:	4619      	mov	r1, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	889b      	ldrh	r3, [r3, #4]
 800ad5a:	440b      	add	r3, r1
 800ad5c:	1ad3      	subs	r3, r2, r3
          / ((hand->actual_max - hand->deadzone)
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7f5 fab6 	bl	80002d0 <__aeabi_i2f>
 800ad64:	4603      	mov	r3, r0
 800ad66:	4619      	mov	r1, r3
 800ad68:	4620      	mov	r0, r4
 800ad6a:	f7f5 fbb9 	bl	80004e0 <__aeabi_fdiv>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	461a      	mov	r2, r3
        = (1.0F * (hand->range_max - hand->center_value))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	615a      	str	r2, [r3, #20]
    hand->lower_scale_factor
        = (1.0F * (hand->range_min - hand->center_value))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	89db      	ldrh	r3, [r3, #14]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	8a1b      	ldrh	r3, [r3, #16]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7f5 faa4 	bl	80002d0 <__aeabi_i2f>
 800ad88:	4604      	mov	r4, r0
          / ((hand->actual_min + hand->deadzone)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	895b      	ldrh	r3, [r3, #10]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	885b      	ldrh	r3, [r3, #2]
 800ad94:	441a      	add	r2, r3
             - (hand->actual_center - hand->center_deadzone));
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	88db      	ldrh	r3, [r3, #6]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	889b      	ldrh	r3, [r3, #4]
 800ada0:	1acb      	subs	r3, r1, r3
 800ada2:	1ad3      	subs	r3, r2, r3
          / ((hand->actual_min + hand->deadzone)
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7f5 fa93 	bl	80002d0 <__aeabi_i2f>
 800adaa:	4603      	mov	r3, r0
 800adac:	4619      	mov	r1, r3
 800adae:	4620      	mov	r0, r4
 800adb0:	f7f5 fb96 	bl	80004e0 <__aeabi_fdiv>
 800adb4:	4603      	mov	r3, r0
 800adb6:	461a      	mov	r2, r3
        = (1.0F * (hand->range_min - hand->center_value))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	619a      	str	r2, [r3, #24]
    return 1;
 800adbc:	2301      	movs	r3, #1
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd90      	pop	{r4, r7, pc}

0800adc6 <adc_corrector_update>:

int32_t
adc_corrector_update (const adc_corrector_t *hand, uint16_t input)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b084      	sub	sp, #16
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	460b      	mov	r3, r1
 800add0:	807b      	strh	r3, [r7, #2]
    int32_t ret = input;
 800add2:	887b      	ldrh	r3, [r7, #2]
 800add4:	60fb      	str	r3, [r7, #12]

    if (ret <= (hand->actual_center - hand->center_deadzone))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	88db      	ldrh	r3, [r3, #6]
 800adda:	461a      	mov	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	889b      	ldrh	r3, [r3, #4]
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	dc06      	bgt.n	800adf6 <adc_corrector_update+0x30>
        {
            ret = adc_corrector_scale (hand, ret, false);
 800ade8:	2200      	movs	r2, #0
 800adea:	68f9      	ldr	r1, [r7, #12]
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 f83d 	bl	800ae6c <adc_corrector_scale>
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	e012      	b.n	800ae1c <adc_corrector_update+0x56>
        }
    else if (ret >= (hand->actual_center + hand->center_deadzone))
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	88db      	ldrh	r3, [r3, #6]
 800adfa:	461a      	mov	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	889b      	ldrh	r3, [r3, #4]
 800ae00:	4413      	add	r3, r2
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	db06      	blt.n	800ae16 <adc_corrector_update+0x50>
        {
            ret = adc_corrector_scale (hand, ret, true);
 800ae08:	2201      	movs	r2, #1
 800ae0a:	68f9      	ldr	r1, [r7, #12]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f82d 	bl	800ae6c <adc_corrector_scale>
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	e002      	b.n	800ae1c <adc_corrector_update+0x56>
        }
    else
        {
            ret = hand->center_value;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	8a1b      	ldrh	r3, [r3, #16]
 800ae1a:	60fb      	str	r3, [r7, #12]
        }

    if (ret < hand->range_min)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	89db      	ldrh	r3, [r3, #14]
 800ae20:	461a      	mov	r2, r3
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	4293      	cmp	r3, r2
 800ae26:	da03      	bge.n	800ae30 <adc_corrector_update+0x6a>
        {
            ret = hand->range_min;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	89db      	ldrh	r3, [r3, #14]
 800ae2c:	60fb      	str	r3, [r7, #12]
 800ae2e:	e008      	b.n	800ae42 <adc_corrector_update+0x7c>
        }
    else if (ret > hand->range_max)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	899b      	ldrh	r3, [r3, #12]
 800ae34:	461a      	mov	r2, r3
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	dd02      	ble.n	800ae42 <adc_corrector_update+0x7c>
        {
            ret = hand->range_max;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	899b      	ldrh	r3, [r3, #12]
 800ae40:	60fb      	str	r3, [r7, #12]
    else
        {
            // nothing
        }

    if ((hand->invert == true) && (ret != hand->center_value))
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	785b      	ldrb	r3, [r3, #1]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00b      	beq.n	800ae62 <adc_corrector_update+0x9c>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	8a1b      	ldrh	r3, [r3, #16]
 800ae4e:	461a      	mov	r2, r3
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d005      	beq.n	800ae62 <adc_corrector_update+0x9c>
        {
            ret = hand->range_max - ret;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	899b      	ldrh	r3, [r3, #12]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	60fb      	str	r3, [r7, #12]
        }

    return ret;
 800ae62:	68fb      	ldr	r3, [r7, #12]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <adc_corrector_scale>:

static int32_t
adc_corrector_scale (const adc_corrector_t *hand, int32_t input, bool up_limit)
{
 800ae6c:	b590      	push	{r4, r7, lr}
 800ae6e:	b087      	sub	sp, #28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	4613      	mov	r3, r2
 800ae78:	71fb      	strb	r3, [r7, #7]
    int32_t output = 0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	617b      	str	r3, [r7, #20]
    if (up_limit == true)
 800ae7e:	79fb      	ldrb	r3, [r7, #7]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d028      	beq.n	800aed6 <adc_corrector_scale+0x6a>
        {
            output = (int32_t) roundf (
                (1.0F * (input - (hand->actual_center + hand->center_deadzone))
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	88db      	ldrh	r3, [r3, #6]
 800ae88:	461a      	mov	r2, r3
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	889b      	ldrh	r3, [r3, #4]
 800ae8e:	4413      	add	r3, r2
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	1ad3      	subs	r3, r2, r3
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7f5 fa1b 	bl	80002d0 <__aeabi_i2f>
 800ae9a:	4602      	mov	r2, r0
                 * hand->upper_scale_factor)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	695b      	ldr	r3, [r3, #20]
 800aea0:	4619      	mov	r1, r3
 800aea2:	4610      	mov	r0, r2
 800aea4:	f7f5 fa68 	bl	8000378 <__aeabi_fmul>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	461c      	mov	r4, r3
                + hand->center_value);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	8a1b      	ldrh	r3, [r3, #16]
            output = (int32_t) roundf (
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7f5 fa0d 	bl	80002d0 <__aeabi_i2f>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	4619      	mov	r1, r3
 800aeba:	4620      	mov	r0, r4
 800aebc:	f7f5 f954 	bl	8000168 <__addsf3>
 800aec0:	4603      	mov	r3, r0
 800aec2:	4618      	mov	r0, r3
 800aec4:	f000 f8f0 	bl	800b0a8 <roundf>
 800aec8:	4603      	mov	r3, r0
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7f5 fba4 	bl	8000618 <__aeabi_f2iz>
 800aed0:	4603      	mov	r3, r0
 800aed2:	617b      	str	r3, [r7, #20]
 800aed4:	e027      	b.n	800af26 <adc_corrector_scale+0xba>
        }
    else
        {
            output = (int32_t) roundf (
                (1.0F * (input - (hand->actual_center - hand->center_deadzone))
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	88db      	ldrh	r3, [r3, #6]
 800aeda:	461a      	mov	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	889b      	ldrh	r3, [r3, #4]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7f5 f9f2 	bl	80002d0 <__aeabi_i2f>
 800aeec:	4602      	mov	r2, r0
                 * hand->lower_scale_factor)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	4619      	mov	r1, r3
 800aef4:	4610      	mov	r0, r2
 800aef6:	f7f5 fa3f 	bl	8000378 <__aeabi_fmul>
 800aefa:	4603      	mov	r3, r0
 800aefc:	461c      	mov	r4, r3
                + hand->center_value);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	8a1b      	ldrh	r3, [r3, #16]
            output = (int32_t) roundf (
 800af02:	4618      	mov	r0, r3
 800af04:	f7f5 f9e4 	bl	80002d0 <__aeabi_i2f>
 800af08:	4603      	mov	r3, r0
 800af0a:	4619      	mov	r1, r3
 800af0c:	4620      	mov	r0, r4
 800af0e:	f7f5 f92b 	bl	8000168 <__addsf3>
 800af12:	4603      	mov	r3, r0
 800af14:	4618      	mov	r0, r3
 800af16:	f000 f8c7 	bl	800b0a8 <roundf>
 800af1a:	4603      	mov	r3, r0
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7f5 fb7b 	bl	8000618 <__aeabi_f2iz>
 800af22:	4603      	mov	r3, r0
 800af24:	617b      	str	r3, [r7, #20]
        }
    return output;
 800af26:	697b      	ldr	r3, [r7, #20]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	371c      	adds	r7, #28
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd90      	pop	{r4, r7, pc}

0800af30 <ema_filter_init>:
 */


#include "ema_filter.h"

int ema_filter_init(ema_filter_t * hand, uint8_t k) {
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	460b      	mov	r3, r1
 800af3a:	70fb      	strb	r3, [r7, #3]
  hand->state = 0;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	605a      	str	r2, [r3, #4]
  hand->k = k;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	78fa      	ldrb	r2, [r7, #3]
 800af46:	709a      	strb	r2, [r3, #2]
  hand->half= 1 << (hand->k - 1);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	789b      	ldrb	r3, [r3, #2]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	2201      	movs	r2, #1
 800af50:	fa02 f303 	lsl.w	r3, r2, r3
 800af54:	b29a      	uxth	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	801a      	strh	r2, [r3, #0]
  return 1;
 800af5a:	2301      	movs	r3, #1
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	bc80      	pop	{r7}
 800af64:	4770      	bx	lr

0800af66 <ema_filter_update>:

uint16_t ema_filter_update(ema_filter_t * hand, uint16_t input) {
 800af66:	b480      	push	{r7}
 800af68:	b085      	sub	sp, #20
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	460b      	mov	r3, r1
 800af70:	807b      	strh	r3, [r7, #2]
  hand->state += input;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	685a      	ldr	r2, [r3, #4]
 800af76:	887b      	ldrh	r3, [r7, #2]
 800af78:	441a      	add	r2, r3
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	605a      	str	r2, [r3, #4]
  uint16_t output = (hand->state + hand->half) >> hand->k;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	8812      	ldrh	r2, [r2, #0]
 800af86:	4413      	add	r3, r2
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	7892      	ldrb	r2, [r2, #2]
 800af8c:	40d3      	lsrs	r3, r2
 800af8e:	81fb      	strh	r3, [r7, #14]
  hand->state -= output;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	685a      	ldr	r2, [r3, #4]
 800af94:	89fb      	ldrh	r3, [r7, #14]
 800af96:	1ad2      	subs	r2, r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	605a      	str	r2, [r3, #4]
  return output;
 800af9c:	89fb      	ldrh	r3, [r7, #14]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3714      	adds	r7, #20
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bc80      	pop	{r7}
 800afa6:	4770      	bx	lr

0800afa8 <hysteresis_init>:

#include "hysteresis_filter.h"

int
hysteresis_init (hysteresis_filter_t *hand, uint16_t error_bit)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	460b      	mov	r3, r1
 800afb2:	807b      	strh	r3, [r7, #2]
    hand->ADERR = 0;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	801a      	strh	r2, [r3, #0]
    hand->ADSTPT = 0;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	805a      	strh	r2, [r3, #2]
    hand->ADBTH = 1U << error_bit;
 800afc0:	887b      	ldrh	r3, [r7, #2]
 800afc2:	2201      	movs	r2, #1
 800afc4:	fa02 f303 	lsl.w	r3, r2, r3
 800afc8:	b29a      	uxth	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	809a      	strh	r2, [r3, #4]
    return 1;
 800afce:	2301      	movs	r3, #1
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bc80      	pop	{r7}
 800afd8:	4770      	bx	lr

0800afda <hysteresis_update>:
uint16_t
hysteresis_update (hysteresis_filter_t *hand, uint16_t input)
{
 800afda:	b480      	push	{r7}
 800afdc:	b085      	sub	sp, #20
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
 800afe2:	460b      	mov	r3, r1
 800afe4:	807b      	strh	r3, [r7, #2]
    uint16_t output = hand->ADSTPT;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	885b      	ldrh	r3, [r3, #2]
 800afea:	81fb      	strh	r3, [r7, #14]
    hand->ADERR = input - hand->ADSTPT;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	885b      	ldrh	r3, [r3, #2]
 800aff0:	887a      	ldrh	r2, [r7, #2]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	b21a      	sxth	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	801a      	strh	r2, [r3, #0]
    if ((hand->ADERR < (-hand->ADBTH)) || (hand->ADERR > (hand->ADBTH)))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b002:	461a      	mov	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	889b      	ldrh	r3, [r3, #4]
 800b008:	425b      	negs	r3, r3
 800b00a:	429a      	cmp	r2, r3
 800b00c:	db07      	blt.n	800b01e <hysteresis_update+0x44>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b014:	461a      	mov	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	889b      	ldrh	r3, [r3, #4]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	dd04      	ble.n	800b028 <hysteresis_update+0x4e>
        {
            output = input;
 800b01e:	887b      	ldrh	r3, [r7, #2]
 800b020:	81fb      	strh	r3, [r7, #14]
            hand->ADSTPT = input;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	887a      	ldrh	r2, [r7, #2]
 800b026:	805a      	strh	r2, [r3, #2]

            // OUTPUT - 1, Not an optimize result, need to combines with center
            // deadzone
        }
    return output;
 800b028:	89fb      	ldrh	r3, [r7, #14]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	bc80      	pop	{r7}
 800b032:	4770      	bx	lr

0800b034 <memset>:
 800b034:	4603      	mov	r3, r0
 800b036:	4402      	add	r2, r0
 800b038:	4293      	cmp	r3, r2
 800b03a:	d100      	bne.n	800b03e <memset+0xa>
 800b03c:	4770      	bx	lr
 800b03e:	f803 1b01 	strb.w	r1, [r3], #1
 800b042:	e7f9      	b.n	800b038 <memset+0x4>

0800b044 <__libc_init_array>:
 800b044:	b570      	push	{r4, r5, r6, lr}
 800b046:	2600      	movs	r6, #0
 800b048:	4d0c      	ldr	r5, [pc, #48]	; (800b07c <__libc_init_array+0x38>)
 800b04a:	4c0d      	ldr	r4, [pc, #52]	; (800b080 <__libc_init_array+0x3c>)
 800b04c:	1b64      	subs	r4, r4, r5
 800b04e:	10a4      	asrs	r4, r4, #2
 800b050:	42a6      	cmp	r6, r4
 800b052:	d109      	bne.n	800b068 <__libc_init_array+0x24>
 800b054:	f000 f84c 	bl	800b0f0 <_init>
 800b058:	2600      	movs	r6, #0
 800b05a:	4d0a      	ldr	r5, [pc, #40]	; (800b084 <__libc_init_array+0x40>)
 800b05c:	4c0a      	ldr	r4, [pc, #40]	; (800b088 <__libc_init_array+0x44>)
 800b05e:	1b64      	subs	r4, r4, r5
 800b060:	10a4      	asrs	r4, r4, #2
 800b062:	42a6      	cmp	r6, r4
 800b064:	d105      	bne.n	800b072 <__libc_init_array+0x2e>
 800b066:	bd70      	pop	{r4, r5, r6, pc}
 800b068:	f855 3b04 	ldr.w	r3, [r5], #4
 800b06c:	4798      	blx	r3
 800b06e:	3601      	adds	r6, #1
 800b070:	e7ee      	b.n	800b050 <__libc_init_array+0xc>
 800b072:	f855 3b04 	ldr.w	r3, [r5], #4
 800b076:	4798      	blx	r3
 800b078:	3601      	adds	r6, #1
 800b07a:	e7f2      	b.n	800b062 <__libc_init_array+0x1e>
 800b07c:	0800b1f0 	.word	0x0800b1f0
 800b080:	0800b1f0 	.word	0x0800b1f0
 800b084:	0800b1f0 	.word	0x0800b1f0
 800b088:	0800b1f4 	.word	0x0800b1f4

0800b08c <memcpy>:
 800b08c:	440a      	add	r2, r1
 800b08e:	4291      	cmp	r1, r2
 800b090:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b094:	d100      	bne.n	800b098 <memcpy+0xc>
 800b096:	4770      	bx	lr
 800b098:	b510      	push	{r4, lr}
 800b09a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b09e:	4291      	cmp	r1, r2
 800b0a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0a4:	d1f9      	bne.n	800b09a <memcpy+0xe>
 800b0a6:	bd10      	pop	{r4, pc}

0800b0a8 <roundf>:
 800b0a8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b0ac:	3b7f      	subs	r3, #127	; 0x7f
 800b0ae:	2b16      	cmp	r3, #22
 800b0b0:	4601      	mov	r1, r0
 800b0b2:	b510      	push	{r4, lr}
 800b0b4:	dc14      	bgt.n	800b0e0 <roundf+0x38>
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	da07      	bge.n	800b0ca <roundf+0x22>
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800b0c0:	d101      	bne.n	800b0c6 <roundf+0x1e>
 800b0c2:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800b0c6:	4608      	mov	r0, r1
 800b0c8:	bd10      	pop	{r4, pc}
 800b0ca:	4a08      	ldr	r2, [pc, #32]	; (800b0ec <roundf+0x44>)
 800b0cc:	411a      	asrs	r2, r3
 800b0ce:	4210      	tst	r0, r2
 800b0d0:	d0f9      	beq.n	800b0c6 <roundf+0x1e>
 800b0d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b0d6:	4119      	asrs	r1, r3
 800b0d8:	4401      	add	r1, r0
 800b0da:	ea21 0102 	bic.w	r1, r1, r2
 800b0de:	e7f2      	b.n	800b0c6 <roundf+0x1e>
 800b0e0:	2b80      	cmp	r3, #128	; 0x80
 800b0e2:	d1f0      	bne.n	800b0c6 <roundf+0x1e>
 800b0e4:	f7f5 f840 	bl	8000168 <__addsf3>
 800b0e8:	4601      	mov	r1, r0
 800b0ea:	e7ec      	b.n	800b0c6 <roundf+0x1e>
 800b0ec:	007fffff 	.word	0x007fffff

0800b0f0 <_init>:
 800b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f2:	bf00      	nop
 800b0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0f6:	bc08      	pop	{r3}
 800b0f8:	469e      	mov	lr, r3
 800b0fa:	4770      	bx	lr

0800b0fc <_fini>:
 800b0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fe:	bf00      	nop
 800b100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b102:	bc08      	pop	{r3}
 800b104:	469e      	mov	lr, r3
 800b106:	4770      	bx	lr
